<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>插入排序 | Baobaobear</title>
    <link>/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <atom:link href="/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <description>插入排序</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 10 Oct 2019 20:52:52 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>插入排序</title>
      <link>/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
    </image>
    
    <item>
      <title>插入排序与希尔排序优化思路</title>
      <link>/post/20191009-sorting-2/</link>
      <pubDate>Thu, 10 Oct 2019 20:52:52 +0800</pubDate>
      <guid>/post/20191009-sorting-2/</guid>
      <description>&lt;p&gt;本篇针对插入排序和希尔排序来讲优化思路，有部分内容因为前一篇文章已经有交代，这里不重复，如果你还没有看，请先看&lt;a href=&#34;../20191008-sorting-1&#34;&gt;前一篇&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;插入排序基本实现&#34;&gt;插入排序基本实现&lt;/h2&gt;

&lt;p&gt;我们先来看插入排序的基本实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void insert_sort(sort_element_t * beg, sort_element_t * end)
{
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        sort_element_t val = *i;
        sort_element_t* j = i;
        for (; j &amp;gt; beg &amp;amp;&amp;amp; val &amp;lt; j[-1]; --j)
        {
            *j = j[-1];
        }
        *j = val;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入排序即使不做任何优化，效率也明显高于上篇所说的冒泡排序和选择排序。那么按照惯例，先上双向看看效果&lt;/p&gt;

&lt;h3 id=&#34;插入排序优化-双向插入&#34;&gt;插入排序优化，双向插入&lt;/h3&gt;

&lt;p&gt;不过双向版本的插入排序可能并不是你想象中那么好写，甚至于有点不太好懂&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void double_insert_sort(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        for (sort_element_t* i = beg + 1, *j = end - 1; ; )
        {
            sort_element_t val = *i;
            sort_element_t* t = i;
            for (; t &amp;gt; beg &amp;amp;&amp;amp; val &amp;lt; t[-1]; --t)
            {
                *t = t[-1];
            }
            *t = val;

            if (++i &amp;gt; j)
            {
                if (*i &amp;lt; *j)
                    ++j;
                else
                    break;
            }

            val = j[-1];
            t = j;
            for (; t &amp;lt; end &amp;amp;&amp;amp; *t &amp;lt; val; ++t)
            {
                t[-1] = *t;
            }
            t[-1] = val;

            if (i &amp;gt; --j)
            {
                if (*j &amp;lt; j[-1])
                    --i;
                else
                    break;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;我们来看看测试结果，在 VS2015 下对 45000 个int排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;insert2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;165&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;176&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;165&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;115&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;575&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1259&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;532&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;855&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;568&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1252&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1474&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1537&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1611&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;642&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;813&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;733&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1068&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;809&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1076&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1082&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1073&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1072&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1074&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1073&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;939&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2193&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;832&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2159&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2157&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2137&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2155&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2149&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2146&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2138&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2154&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个优化效果非常不明显，有种吃力不讨好的感觉。那么，我们换个方法，来试试加大步长吧，这个变动让算法有了另一个名字&lt;/p&gt;

&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;

&lt;p&gt;希尔排序的坑特别深，你需要有心理准备。希尔排序和梳排序类似，都是通过使用较大的步长让元素更快速地到达正确位置附近，不过在步长的选择上，希尔排序与梳排序差别巨大。首先梳排序的步长选择较为简单，每次乘以0.8即可，这个数字就不要管怎么来的了，我也不知道。梳排序的研究资料较少，但希尔排序则不一样，步长选择的研究非常多，也就是说光是步长的选择就是一门学问，这就是一个大坑，而且这个步长选择对性能的影响十分明显。我们先来看最早的希尔排序版本，最早的版本使用步长每次乘以0.5。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_0_5(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = (size_t)(end - beg) / 2;
        for (; incre &amp;gt;= 1; incre /= 2)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后来，Pratt 与 Knuth 改进了新的&lt;a href=&#34;https://oeis.org/A003462&#34; target=&#34;_blank&#34;&gt;步长序列&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;1, 4, 13, 40, 121, ...&lt;/code&gt;&lt;br /&gt;
得到以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt;= 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多关于步长的研究可以参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34;&gt;维基百科&lt;/a&gt;，本篇不对步长做讲解。后文的优化将使用这个版本的代码&lt;/p&gt;

&lt;h3 id=&#34;希尔排序优化-运用带哨兵的插入排序&#34;&gt;希尔排序优化，运用带哨兵的插入排序&lt;/h3&gt;

&lt;p&gt;带哨兵的插入排序是什么东西？其实就是指以下这样的插入排序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void unguarded_insert_sort(sort_element_t * beg, sort_element_t * end)
{
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        sort_element_t val = *i;
        sort_element_t* j = i;
        for (; val &amp;lt; j[-1]; --j)
        {
            *j = j[-1];
        }
        *j = val;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和前面的插入排序的区别在哪？就是少了&lt;code&gt;j &amp;gt; beg &amp;amp;&amp;amp;&lt;/code&gt;，不做边界判断。不做边界判断确实能运行得更快，但不会越界吗？我们来考虑以下这种情况&lt;br /&gt;
&lt;code&gt;int arr[8] = {-1, 8, 9, 4, 5, 6, 1, 6};&lt;/code&gt;&lt;br /&gt;
然后我们排序的时候写&lt;code&gt;unguarded_insert_sort(arr + 1, arr + 8);&lt;/code&gt;它就能正确排序而且不会发生越界，因为最前面存在比需要排序的元素都要小的数，而那个数就是哨兵，它充当着让内循环退出的作用，也就是说，在调用这个函数的时候，只要保证beg的左边存在比右边都要小的元素就行了。&lt;/p&gt;

&lt;p&gt;有了这个能怎么优化呢？我们把步长1的部分单独拆出来，写成下面这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_o1(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt; 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
        insert_sort(beg, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个能理解吧，步长1的时候完全就是插入排序，但真正厉害的在下面这步，要注意到这种写法在变为步长1之前，它的步长是4，我们可以证明整个数组的最小值一定在前4个数中，即前一个步长的范围内。这里不给出具体证明，有兴趣你可以自己试试证明。有了这个结论，前4个元素用插入排序排好了后，后面的就可以使用&lt;code&gt;unguarded_insert_sort&lt;/code&gt;了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_o2(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 10)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt; 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
        insert_sort(beg, beg + 4);
        unguarded_insert_sort(beg + 4, end);
    }
    else
    {
        insert_sort(beg, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个哨兵技巧在其它的排序里面甚至别的问题里同样也会存在。除了这个还有没有别的优化空间呢？例如，shellsort的最优情况下的时间复杂度还是&lt;code&gt;O(nlogn)&lt;/code&gt;，那有没有办法使得最优情况时间复杂度下降到&lt;code&gt;O(n)&lt;/code&gt;呢？确实有办法，如果在某一轮发现没有数进行交换，那么就立即转成带次数限制的插入排序进行尝试，具体请参阅我的&lt;a href=&#34;(https://github.com/Baobaobear/sort)&#34; target=&#34;_blank&#34;&gt;sort项目&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;测试结果&#34;&gt;测试结果&lt;/h2&gt;

&lt;p&gt;以下是在 VS2015 上对 4,500,000 个int排序的测试&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bao_shell&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;373&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;148&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;147&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_o2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;540&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;187&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;547&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;222&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_0_5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;606&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;601&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;236&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;572&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;261&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;comb_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;161&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;492&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;477&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;214&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;169&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;273&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中&lt;code&gt;bao_shell&lt;/code&gt;是我在&lt;a href=&#34;(https://github.com/Baobaobear/sort)&#34; target=&#34;_blank&#34;&gt;sort项目&lt;/a&gt;中写的希尔排序，使用了更优的步长序列，里面包含更多的优化技巧，本篇就不一一介绍了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
