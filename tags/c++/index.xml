<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; | Baobaobear</title>
    <link>/tags/c&#43;&#43;/</link>
      <atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <description>c&#43;&#43;</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 04 Jan 2020 08:26:00 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>c&#43;&#43;</title>
      <link>/tags/c&#43;&#43;/</link>
    </image>
    
    <item>
      <title>伪随机数生成算法</title>
      <link>/post/20200104-xoshiro/</link>
      <pubDate>Sat, 04 Jan 2020 08:26:00 +0800</pubDate>
      <guid>/post/20200104-xoshiro/</guid>
      <description>&lt;p&gt;这次主要介绍伪随机数生成算法，顺便介绍一个在2018-2019年的伪随机数研究成果，就是 xoshiro/xoroshiro 随机数生成算法。&lt;/p&gt;

&lt;h2 id=&#34;历史&#34;&gt;历史&lt;/h2&gt;

&lt;p&gt;在较早的时候，甚至到现在，伪随机数的生成元老级别算法“线性同余伪随机数生成算法”可谓无处不在，像现在的C/C++的rand函数就是使用线性同余实现的伪随机数生成。所谓的线性同余法，就是这个迭代方程 $S_n = (aS_{n-1} + c)\mod m$，其中，$S_0$ 称为这个随机序列的种子，a,c,m是三个常数，不过这三个数不能随意选，m的大小决定随机数的周期，最大周期等于m，为了便于在计算机里实现，通常m选取$2^{32}$或$2^{64}$。在m已经确定为这两的时候，为了让周期尽可能大，常数a,c还至少要满足以下条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;若 c 非 0，那么 c 与 m 互质；若 c 为 0，那么 a 与 m 互质&lt;/li&gt;
&lt;li&gt;m 所有的素因子均能整除 a-1&lt;/li&gt;
&lt;li&gt;若 m 是4的倍数，那么 a-1 也是 4 的倍数&lt;/li&gt;
&lt;li&gt;a 和 c 都是正整数且小于 m&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些典型的常数取值可以参见wiki上的&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_congruential_generator&#34; target=&#34;_blank&#34;&gt;线性同余&lt;/a&gt;条目。&lt;/p&gt;

&lt;h2 id=&#34;更高的需求&#34;&gt;更高的需求&lt;/h2&gt;

&lt;p&gt;我们之所以使用线性同余，就是因为它实现简单，在对随机数质量要求较低的时候，例如用来作为treap的随机数，那么线性同余完全够用，但建议不要使用rand，因为在windows下不少编译器的最大值太小了，导致效果下降，自己写一个用参数&lt;code&gt;a=69069,c=1,m=2^32&lt;/code&gt;比rand好，我在那篇关于treap的文章就是用了这组参数。线性同余法最大的缺陷是低位随机性特别差，如果使用类似&lt;code&gt;next() % k&lt;/code&gt;的方式来获得区间在$[0,k-1]$的随机数，那么当线性同余迭代方程的m是2的幂且k也是2的幂的时候，灾难就发生了，特别地当k是2的时候，你将得到一个0101的循环序列。为了避免这种情况，通常会取线性同余结果的高位，而且低位去掉得越多，&lt;code&gt;%2&lt;/code&gt;的周期就越长。例如结果是64位，取高32位作为最终结果，那么&lt;code&gt;%2&lt;/code&gt;的周期就是 $2^{33}$ ，但这样会导致有效位减少，而且问题也没有根本地解决。另一种解决办法是选取一个素数作为m，例如2147483647正是一个素数，但如此一来，线性同余的计算速度就会慢不少，周期也没有前一个的长。两种基本实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint32_t s;
    static inline uint16_t rotl(const uint16_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (16 - k));
    }
    LCG32() { seed(); }
    LCG32(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        s = s * 214013UL + 2531011UL;
        return s;
    }
};

struct MCG : public RNG_base&amp;lt;uint32_t, 0x7FFFFFFEULL&amp;gt;
{
    uint64_t s;
    MCG() { seed(); }
    MCG(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        s = s * 48271 % 0x7FFFFFFF;
        return (result_type)s;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中基类&lt;code&gt;RNG_base&lt;/code&gt;的定义在下文代码中有。第一个是32位的实现，所以叫做LCG32，如果是64位里面取高32位，那么就叫做&lt;code&gt;LCG64/32&lt;/code&gt;。第二个实现没有加法操作，即c=0，这种特例叫做MCG。&lt;/p&gt;

&lt;h2 id=&#34;随机数的质量和周期&#34;&gt;随机数的质量和周期&lt;/h2&gt;

&lt;p&gt;如果对生成的随机数质量要求高，例如写一个扑克游戏，如果是52张牌，所有的排列就是 $52!$ （约为$2^{225.5}$），那么我们需要周期比排列数多得多的随机数生成算法以期望所有可能的排列都有机会出现，那到底需要多大呢？这里我们假设平均每16位生成一个8位有效的随机数，我们需要d个随机数得到的排列，即16d个位的所有可能性，都要有可能出现，若满周期的随机数生成器的周期是 $2^{n}$，输出长度为m位，那么我们只要知道$n/m$个输出就能唯一确定生成器的状态，同时这$n/m$个输出的所有可能都会一一出现，即长度为$n$的二进制必定在序列中出现。所以在这种情况下只要$n\geq16d$就能保证所需排列必定会出现。而在前面提到的扑克游戏里，d=52，那么需要的最小周期就是$2^{832}$，总之，只要生成器的周期的$2^{n}$中的n，比你需要生成的排列所需要的二进制流长度要大，那就保证能得到任意一个排列。这时候就最佳选择之一就是&lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_Twister&#34; target=&#34;_blank&#34;&gt;梅森旋转&lt;/a&gt;，在C++11里的随机数实现默认就是使用它，而且我们一般特指MT19937，即它的周期是 $2^{19937}-1$，如果输出为64位，那么任意长度小于19904位的数据都会在其生成序列中出现（之所以不是19937只是因为它不是输出长度的整数倍），但你要是用这个算法大量生成随机数那是会稍慢一些的，而且这个算法也并没有通过BigCrush的所有测试。我们还存在一种情况，就是需要大量生成随机数，同时质量也有一定要求，速度如果比线性同余还快就更好。&lt;/p&gt;

&lt;h2 id=&#34;线性同余的改进&#34;&gt;线性同余的改进&lt;/h2&gt;

&lt;h3 id=&#34;输出质量&#34;&gt;输出质量&lt;/h3&gt;

&lt;p&gt;线性同余法的均匀性非常好，算法也简单，可惜分布性差，有多差呢，咱们用LCG16(0x43FD,0x9EC3)的输出画黑底白点图，相邻两次输出的高9位作为左半图的坐标，低9位作为右半图的坐标，连续采样524288个点，同一坐标出现次数越多亮度越高，于是得到下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;左边与右边的都有明显的斜线模式。与以下专业的PCG32生成器做个比较，关注点是亮度比较平均，基本没有特别亮的点，也没有比较多暗点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/pcg32.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是也就有不少人想方设法去改进。首先的改进，便是前面所提及的截取高位作为输出，那么内部数据为64位，输出是32位的，就叫做&lt;code&gt;LCG64/32&lt;/code&gt;，同理内部数据为32位，输出是16位的，就叫做&lt;code&gt;LCG32/16&lt;/code&gt;，这样一来，随机数质量大幅度提升。基于此实现的版本如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32_16 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint32_t s;
    LCG32_16() { seed(); }
    LCG32_16(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        s = s * 214013UL + 2531011UL;
        return s &amp;gt;&amp;gt; 16;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码得到的图形如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg32_16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样生成的随机数质量就有了一个很大的飞跃。另外，LCG结果的低位，周期性特别短，而LCG结果的高位，对下一个数的影响又特别小，那能不能对这个特性加以利用呢？既然高位对下一个数的影响特别小，我们就创造影响，让高位单独参与计算；既然低位的结果差，那就直接舍弃，同时当高位作为下一个数的位旋转参数，这样避免了最低位的固定 $2^{16}$ 周期的问题。所以可以改写如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32_16ro : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint32_t s;
    LCG32_16ro() { seed(); }
    LCG32_16ro(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint32_t x = s;
        s = s * 214013UL + 2531011UL;
        return rotl16((uint16_t)(x &amp;gt;&amp;gt; 16u), x &amp;gt;&amp;gt; 28u);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg32_16ro.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;结果反而明显变差了，原因是作为参数的高4位也是输出的一部分，导致那高4位在最终出现的位置是固定的16种情况，解决方法1是不取那4位，取4到11位，方法2是把高16位与低16位做异或运算后再做旋转，两种方案均可解决这个问题，后面的测试使用的是第二种方案，具体代码就不重复了。&lt;/p&gt;

&lt;h3 id=&#34;输出周期&#34;&gt;输出周期&lt;/h3&gt;

&lt;p&gt;然后再来看周期，单独一个LCG周期只有 $2^{32}$ 或 $2^{64}$ ，那我们有没有可能通过两个或以上的随机数生成器构造出周期是它们周期之积的的生成器呢？也许一时半会不容易想出来，我们先考虑怎么让一个LCG生成器周期变长。&lt;/p&gt;

&lt;p&gt;要注意的是我们不能瞎改，必须是一个满周期的生成器，乱改的话在绝大多数情况下都达不到满周期从而导致返回值的分布不均匀。假如我们手上有一个LCG，周期是p，如果单纯只要周期变长，那我们有一个足够简单的方法，我们增加一个参数x，在原本的LCG输出的结果基础上 xor x 再输出，然后当原来的LCG生成了p次，就让参数x自增1，于是又能生成p个整体与原来不重叠的数，如此循环，于是x的自增周期是p2的话，总周期便是 $p\times{p_2}$ 。可是这明显能感觉到质量可能很糟糕，那解决办法就是，那个x改成另一个LCG来生成即可。这样我们便得到把两个LCG合并得到更大周期的办法。不过，问题是我们为了记录生成次数，似乎还要多定义一个变量来记录生成的次数，这个变量是会影响生成器的状态的，为了避免增加新的变量，在这里我们换个办法，不必生成p次，只要生成结果是某个设定值例如0，就更新第二个LCG，这样就节省了一个变量，于是可以写出以下的代码，为了方便说明，使用的是&lt;code&gt;LCG16&lt;/code&gt;，周期是65536。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_1 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_1() { seed(); }
    LCG16_1(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ s;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样把两个 $2^{16}$ 周期的LCG组合起来，确实得到了 $2^{32}$ 周期的LCG，不过之所以用周期这么小的，是为了能发现问题，我们能穷举这个LCG的生成序列，我们能轻易找出多处大段大段的随机数完全相同，有多大段呢，1千到3万个不等，即之前生成的数千个随机数，后面某处又重现了这个序列，而且在 $2^{32}$ 周期内发生。这说明单纯这样组合，结果是糟糕的。具体图形如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们加上前面的位旋转，以期望减少这种情况的出现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_2 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_2() { seed(); }
    LCG16_2(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(x, x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出现这个情况的原因前面有解释，正是高4位导致的。对此，为了把高4位的模式抹除，改为&lt;code&gt;rotl16(x ^ (x &amp;lt;&amp;lt; k), x &amp;gt;&amp;gt; 12)&lt;/code&gt;，只要k大于等于4，这个模式就迅速消失。取k为7得到代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_3 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_3() { seed(); }
    LCG16_3(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(x ^ (x &amp;lt;&amp;lt; 7), x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们还可以再考虑一个问题，之前都是用高位的旋转参数对自己旋转，那可不可以错开，改为旋转下一个数呢？答案是可以的，生成的结果仍然是满周期的，也不存在高4位位置固定的问题，得到的代码和图形是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_4 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_4() { seed(); }
    LCG16_4(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(s, x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是我们确实得到了一个看起来更随机的生成器，但3和4的图仔细观察仍然能发现左边的图有规律的线条模式，和专业算法比较还是能看出差距，不过这个问题之后再去解决。那如果我们需要任意加大周期要怎么做呢，如果单纯按这个思路，那么增加了n级，就会导致输出要异或n次，代码也难写。这里要换一个思路，我们把扩展状态做成一个数组，每次只与数组中其中一个元素来异或运算，而选择的方法利用LCG的低位是循环的特性，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG16s : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    static const uint16_t ext_size = 1 &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    uint16_t s, a[ext_size];
    LCG16s() { seed(); }
    LCG16s(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a[0] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        if (ext_size &amp;gt; 1) a[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 2) a[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 48);
        for (uint16_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl16(a[i - 1] * (uint16_t)0x43FD + (uint16_t)0x9EC3, a[i-3] &amp;amp; 15) ^ a[i - 2];
        }
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) {
            for (uint16_t i = 0; i &amp;lt; ext_size; ++i) {
                a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527);
                if (a[i]) break;
            }
        }
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return rotl16(s, x &amp;gt;&amp;gt; 12) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从图上就能直观看出这东西有问题，问题在哪呢？以上这个生成器的周期在模板参数假设是n，那么其周期为 $ 2^{16 \times (2^n + 1)}$，可以任意加大周期。可是就在这个时候就出现问题了，我们假设参数是8，那么数组大小为256，那当s为0的时候，大多数情况下只有&lt;code&gt;a[0]&lt;/code&gt;发生改变，那导致的结果就是在下一个短周期里，每256个数有255个与前一个短周期完全一样，所以我们要做修改，每次s为0的时候，a数组每一个数都得至少更新一次，且如果&lt;code&gt;a[i]&lt;/code&gt;为0，那&lt;code&gt;a[i+1]&lt;/code&gt;就更新两遍，这样可以改写如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG16_ext : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    static const uint16_t ext_size = 1 &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    uint16_t s, a[ext_size];
    LCG16_ext() { seed(); }
    LCG16_ext(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a[0] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        if (ext_size &amp;gt; 1) a[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 2) a[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 48);
        for (uint16_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl16(a[i - 1] * (uint16_t)0x43FD + (uint16_t)0x9EC3, a[i-3] &amp;amp; 15) ^ a[i - 2];
        }
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) {
            for (uint16_t i = 0, carry = 0; i &amp;lt; ext_size; ++i) {
                if (carry) carry = (a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527)) == 0;
                carry |= (a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527)) == 0;
            }
        }
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return rotl16(s, x &amp;gt;&amp;gt; 12) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_ext.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上这个版本经过一些简单的测试，符合满周期且概率均等。当然这个uint16有点太小，于是仍然能从图里看出分布有点问题，左边的图存在明暗间隔的竖条和横条，即问题存在于高位。所以本节的最后提供一个&lt;code&gt;LCG64_32_ext&lt;/code&gt;的完整实现，参数ext_bit为n，那么其周期为 $ 2^{32 \times (2^n + 2)}$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG64_32_ext : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    static const uint64_t ext_size = 1ULL &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    const int init_iter = 256 * 256;
    uint64_t s;
    uint32_t a[ext_size];
    LCG64_32_ext() { seed(); }
    LCG64_32_ext(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s = seed1;
        a[0] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 1) a[1] = (uint32_t)seed2;
        if (ext_size &amp;gt; 2) a[2] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        for (uint32_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl32((uint32_t)(a[i - 1] * seed_mul + 1), a[i - 2] &amp;amp; 15) ^ a[i - 2];
        }
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint64_t x = s;
        if (s == 0) {
            for (uint64_t i = 0, carry = 0; i &amp;lt; ext_size; ++i) {
                if (carry) carry = (a[i] = (a[i] * 2891336453u + 887987685u)) == 0;
                carry |= (a[i] = (a[i] * 2891336453u + 887987685u)) == 0;
            }
        }
        s = s * 3935559000370003845ULL + 1442695040888963407ULL;
        return rotr32((uint32_t)(s &amp;gt;&amp;gt; 32), x &amp;gt;&amp;gt; 59) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg64_32_ext.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个图已经能与PCG的图看不出明显的差异，而且能通过BigCrash测试。当然，这样的实现还没有经过严格的随机性测试，这里只是给大家思路，以上代码建议不要用于实际使用场景。另外，以上思路参考自&lt;a href=&#34;http://www.pcg-random.org/&#34; target=&#34;_blank&#34;&gt;PCG&lt;/a&gt;算法。&lt;/p&gt;

&lt;h2 id=&#34;lua的修改&#34;&gt;lua的修改&lt;/h2&gt;

&lt;p&gt;通过参阅lua的源代码，最早的时候，它还是直接使用的C语言内置的rand，后来被诟病随机数范围太小、生成的质量太差。所以后来做了一番改进，在2018年之前，使用的是TausWorthe的一个随机数算法，周期为 $2^{223}-1$ ，所以又叫做 TausWorthe 223 或 TW223，代码参见后文的&lt;code&gt;taus_worthe223&lt;/code&gt;。这里要介绍的是lua在2018年之后更换的新随机数算法。&lt;/p&gt;

&lt;h2 id=&#34;xoshiro-xoroshiro&#34;&gt;xoshiro/xoroshiro&lt;/h2&gt;

&lt;p&gt;而在2018年，新出现的&lt;a href=&#34;http://prng.di.unimi.it/&#34; target=&#34;_blank&#34;&gt;xoshiro/xoroshiro&lt;/a&gt;算法以其周期更大、质量更高、速度更快的特性，很快lua的&lt;a href=&#34;http://lua-users.org/lists/lua-l/2018-05/msg00109.html&#34; target=&#34;_blank&#34;&gt;实现&lt;/a&gt;便改用它，而且官方还提供了不同的实现，你可以自行在周期长度、随机数质量、运行速度间自行取舍，这个算法改进自Xorshift，同样属于&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear-feedback_shift_register&#34; target=&#34;_blank&#34;&gt;LFSR&lt;/a&gt;。不过xoshiro/xoroshiro提供的版本实在是太多了，怎么取舍呢？我通过阅读paper，选出了三个建议的版本，分别是&lt;code&gt;xoroshiro128++&lt;/code&gt;，&lt;code&gt;xoshiro256**&lt;/code&gt;，&lt;code&gt;xoroshiro1024**&lt;/code&gt;，名字后面的数字表示周期，例如&lt;code&gt;xoshiro256**&lt;/code&gt;的周期是 $2^{256}-1$，而后面的加号和乘号表示生成时所用的运算符，所对应的类名分别是&lt;code&gt;xoroshiro128pp&lt;/code&gt;，&lt;code&gt;xoshiro256ss&lt;/code&gt;，&lt;code&gt;xoroshiro1024ss&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其生成速度之快超越线性同余法（限64位平台）。而&lt;code&gt;xoshiro256**&lt;/code&gt;大多数场合足够使用，且lua&lt;a href=&#34;https://github.com/lua/lua/blob/d7bb8df8414f71a290c8a4b1c9f7c6fe839a94df/lmathlib.c#L307&#34; target=&#34;_blank&#34;&gt;所选择的实现&lt;/a&gt;也是它，除非你特别看它不爽非要特别大的周期，那就上&lt;code&gt;xoroshiro1024**&lt;/code&gt;吧。而在需要快速产生大量浮点数的场合，官方建议使用&lt;code&gt;xoroshiro128+&lt;/code&gt;或&lt;code&gt;xoroshiro256+&lt;/code&gt;，但如果生成整数，那请不要选择只有一个&lt;code&gt;+&lt;/code&gt;的版本，要选择&lt;code&gt;++&lt;/code&gt;或&lt;code&gt;**&lt;/code&gt;的版本。&lt;/p&gt;

&lt;p&gt;xoshiro/xoroshiro还有一个非常特别的功能，它有个jump和long jump功能，例如对于&lt;code&gt;xoshiro256**&lt;/code&gt;，一次jump调用相当于迭代了 $2^{128}$ 次，这样生成的新状态与原来的状态距离非常大，然后用于两个线程，这样就能保证生成的序列不产生重叠，而long jump则相当于迭代 $2^{192}$ 次，这样能生成出4个状态用于4线程，这个特色功能是其它随机数生成器所不具备的。不过以下模板并不包含这部分，有需要的话自己上官网那把代码复制过来用就行。&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;p&gt;这里的实现除了以上所提及的，还包括常见的&lt;code&gt;rand48&lt;/code&gt;，&lt;code&gt;taus88&lt;/code&gt;，&lt;code&gt;PCG32&lt;/code&gt;，&lt;code&gt;well512&lt;/code&gt;等等。编译以下代码需要C++11支持，如果要在不支持的编译器上编译就稍微改改就行。&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename _res_type, uint64_t ret_max = 0xFFFFFFFFFFFFFFFFULL&amp;gt;
struct RNG_base
{
    typedef _res_type result_type;
    static constexpr result_type min() { return 0; }
    static constexpr result_type max() { return (result_type)ret_max; }
    const uint64_t seed_mul = 6364136223846793005ULL;
    const int init_iter = 16;
    uint64_t new_seed() {
        std::random_device rd;
        return ((uint64_t)rd() &amp;lt;&amp;lt; 32) | rd();
    }
    uint64_t def_seed() {
        static uint64_t seed = new_seed();
        seed *= 3935559000370003845ULL;
        return ++seed;
    }
    static inline uint64_t rotl64(const uint64_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (64 - k));
    }
    static inline uint64_t rotr64(const uint64_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (64 - k));
    }
    static inline uint32_t rotl32(const uint32_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (32 - k));
    }
    static inline uint32_t rotr32(const uint32_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (32 - k));
    }
    static inline uint16_t rotl16(const uint16_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (16 - k));
    }
    static inline uint16_t rotr16(const uint16_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (16 - k));
    }
};

struct PCG32 : public RNG_base&amp;lt;uint32_t&amp;gt; // XSH RR
{
    const int init_iter = 1; // min 1
    uint64_t s;
    PCG32() { seed(); }
    PCG32(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint64_t x = s;
        s = s * 6364136223846793005ULL + 1442695040888963407ULL;
        return rotr32((uint32_t)((x ^ (x &amp;gt;&amp;gt; 18)) &amp;gt;&amp;gt; 27), x &amp;gt;&amp;gt; 59);
    }
};

struct rand48 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint16_t s[3];
    static const uint16_t RAND48_A0 = 0xE66D;
    static const uint16_t RAND48_A1 = 0xDEEC;
    static const uint16_t RAND48_A2 = 0x0005;
    static const uint16_t RAND48_C0 = 0x000B;
    rand48() { seed(); }
    rand48(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s[0] = (uint16_t)seed1;
        s[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        s[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
    }
    inline void do_rand48() {
        const uint32_t x0 = s[0];
        const uint32_t x1 = s[1];
        const uint32_t x2 = s[2];

        uint32_t a = RAND48_A0 * x0 + RAND48_C0;
        s[0] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);

        a &amp;gt;&amp;gt;= 16;

        a += RAND48_A0 * x1 + RAND48_A1 * x0;
        s[1] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);

        a &amp;gt;&amp;gt;= 16;
        a += RAND48_A0 * x2 + RAND48_A1 * x1 + RAND48_A2 * x0;
        s[2] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);
    }
    result_type operator()() {
        do_rand48();
        return ((uint32_t)s[2] &amp;lt;&amp;lt; 16) + s[1];
    }
};

struct taus88 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint32_t s[3];
    const int init_iter = 0;
    taus88() { seed(); }
    taus88(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = (uint32_t)seed1;
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        s[2] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    inline uint32_t tausworthe(uint32_t arg, uint32_t stage1, uint32_t stage2, uint32_t stage3, uint32_t limit) {
        return ((arg &amp;amp; limit) &amp;lt;&amp;lt; stage1) ^ (((arg &amp;lt;&amp;lt; stage2) ^ arg) &amp;gt;&amp;gt; stage3);
    }
    result_type operator()() {
        s[0] = tausworthe(s[0], 12, 13, 19, 4294967294UL);
        s[1] = tausworthe(s[1], 4, 2, 25, 4294967288UL);
        s[2] = tausworthe(s[2], 17, 3, 11, 4294967280UL);
        return (s[0] ^ s[1] ^ s[2]);
    }
};

struct taus_worthe223 : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t gen[4];
    taus_worthe223() { seed(); }
    taus_worthe223(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        gen[0] = seed1;
        gen[1] = seed2;
        gen[2] = seed3;
        gen[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
#define taus_worthe(i,k,q,s) z = gen[i]; \
    z = (((z &amp;lt;&amp;lt; q) ^ z) &amp;gt;&amp;gt; (k - s)) ^ ((z&amp;amp;((uint64_t)(int64_t)-1 &amp;lt;&amp;lt; (64 - k))) &amp;lt;&amp;lt; s); \
    r ^= z; gen[i] = z
    result_type operator()() {
        uint64_t r = 0, z;
        taus_worthe(0, 63, 31, 18);
        taus_worthe(1, 58, 19, 28);
        taus_worthe(2, 55, 24, 7);
        taus_worthe(3, 47, 21, 8);
        return r;
    }
#undef taus_worthe
};

struct well512 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    // http://lomont.org/papers/2008/Lomont_PRNG_2008.pdf
    // const int init_iter = 0; // min 0
    const uint64_t seed_mul = 134775813;
    uint32_t s[16];
    uint32_t index;
    well512() { seed(); }
    well512(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = (uint32_t)(seed1);
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        s[2] = (uint32_t)(seed2);
        s[3] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        s[4] = (uint32_t)(seed3);
        s[5] = (uint32_t)(seed3 &amp;gt;&amp;gt; 32);
        s[6] = (uint32_t)(seed4);
        s[7] = (uint32_t)(seed4 &amp;gt;&amp;gt; 32);
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 64; ++i, ++j) {
            if (i % 4 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * (uint32_t)seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        index = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint32_t a, b, c, d;
        a = s[index];
        c = s[(index + 13) &amp;amp; 15];
        b = a ^ c ^ (a &amp;lt;&amp;lt; 16) ^ (c &amp;lt;&amp;lt; 15);
        c = s[(index + 9) &amp;amp; 15];
        c ^= (c &amp;gt;&amp;gt; 11);
        a = s[index] = b ^ c;
        d = a ^ ((a &amp;lt;&amp;lt; 5) &amp;amp; 0xDA442D24);
        index = (index + 15) &amp;amp; 15;
        a = s[index];
        s[index] = a ^ b ^ d ^ (a &amp;lt;&amp;lt; 2) ^ (b &amp;lt;&amp;lt; 18) ^ (c &amp;lt;&amp;lt; 28);
        return s[index];
    }
};

struct splitmix64 : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s;
    splitmix64() { seed(); }
    splitmix64(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        uint64_t z = (s += 0x9e3779b97f4a7c15);
        z = (z ^ (z &amp;gt;&amp;gt; 30)) * 0xbf58476d1ce4e5b9;
        z = (z ^ (z &amp;gt;&amp;gt; 27)) * 0x94d049bb133111eb;
        return z ^ (z &amp;gt;&amp;gt; 31);
    }
};

struct xoshiro64ss : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint32_t s[2];
    xoshiro64ss() { seed(); }
    xoshiro64ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s[0] = (uint32_t)seed1;
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint32_t s0 = s[0];
        uint32_t s1 = s[1];
        const uint32_t result = rotl32(s0 * 0x9E3779BB, 5) * 5;
        s1 ^= s0;
        s[0] = rotl32(s0, 26) ^ s1 ^ (s1 &amp;lt;&amp;lt; 9);
        s[1] = rotl32(s1, 13);
        return result;
    }
};

struct xoroshiro128p : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128p() { seed(); }
    xoroshiro128p(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = s0 + s1;
        s1 ^= s0;
        s[0] = rotl64(s0, 24) ^ s1 ^ (s1 &amp;lt;&amp;lt; 16);
        s[1] = rotl64(s1, 37);
        return result;
    }
};

struct xoroshiro128pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128pp() { seed(); }
    xoroshiro128pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = rotl64(s0 + s1, 17) + s0;
        s1 ^= s0;
        s[0] = rotl64(s0, 49) ^ s1 ^ (s1 &amp;lt;&amp;lt; 21);
        s[1] = rotl64(s1, 28);
        return result;
    }
};

struct xoroshiro128ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128ss() { seed(); }
    xoroshiro128ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = rotl64(s0 * 5, 7) * 9;
        s1 ^= s0;
        s[0] = rotl64(s0, 24) ^ s1 ^ (s1 &amp;lt;&amp;lt; 16);
        s[1] = rotl64(s1, 37);
        return result;
    }
};

struct xoshiro256p : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256p() { seed(); }
    xoshiro256p(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = s[0] + s[3];
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro256pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256pp() { seed(); }
    xoshiro256pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = rotl64(s[0] + s[3], 23) + s[0];
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro256ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256ss() { seed(); }
    xoshiro256ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = rotl64(s[1] * 5, 7) * 9;
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro1024ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[16];
    int p;
    xoshiro1024ss() { seed(); }
    xoshiro1024ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    void seed(uint8_t seed[], int size) {
        uint8_t* t = (uint8_t*)s;
        if (size &amp;gt; 128) size = 128;
        for (int i = 0; i &amp;lt; size; ++i) {
            t[i] = ((uint8_t*)seed)[i];
        }
        if (size == 0) {
            size = 8; s[0] = 0x931197d8e3177f17ULL;
        }
        for (int i = size, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const int q = p;
        const uint64_t s0 = s[p = (p + 1) &amp;amp; 15];
        uint64_t s15 = s[q];
        const uint64_t result = rotl64(s0 * 5, 7) * 9;

        s15 ^= s0;
        s[q] = rotl64(s0, 25) ^ s15 ^ (s15 &amp;lt;&amp;lt; 27);
        s[p] = rotl64(s15, 36);

        return result;
    }
};

struct xoshiro1024pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[16];
    int p;
    xoshiro1024pp() { seed(); }
    xoshiro1024pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    void seed(uint8_t seed[], int size) {
        uint8_t* t = (uint8_t*)s;
        if (size &amp;gt; 128) size = 128;
        for (int i = 0; i &amp;lt; size; ++i) {
            t[i] = ((uint8_t*)seed)[i];
        }
        if (size == 0) {
            size = 8; s[0] = 0x931197d8e3177f17ULL;
        }
        for (int i = size, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const int q = p;
        const uint64_t s0 = s[p = (p + 1) &amp;amp; 15];
        uint64_t s15 = s[q];
        const uint64_t result = rotl64(s0 + s15, 23) + s15;

        s15 ^= s0;
        s[q] = rotl64(s0, 25) ^ s15 ^ (s15 &amp;lt;&amp;lt; 27);
        s[p] = rotl64(s15, 36);

        return result;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;效率测试&#34;&gt;效率测试&lt;/h2&gt;

&lt;p&gt;我们当然不能全信官方的数据，具体表现不同机器不同编译器也可能不相同，所以我们就来测试一下。测试所用的实现均为我个人实现的版本，不代表官方版本的运行效率，PCG32使用的是XSH-RR，PCG64使用的是XSL-RR&lt;/p&gt;

&lt;p&gt;在x86下测试标准是生成2亿个64位随机数的运行时间，如生成器生成的是32位，那么生成4亿个32位整数，即以相同输出位数的时间来做比较&lt;/p&gt;

&lt;h3 id=&#34;x86&#34;&gt;x86&lt;/h3&gt;

&lt;p&gt;在VS2015上以x86编译的运行时间&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;394&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2034&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2579&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1819&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6705&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2581&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2221&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1232&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1844&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1794&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2118&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;605&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;882&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;534&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1194&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1382&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1279&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1856&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1513&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1472&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1585&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1651&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在mingw32 gcc5.1.0 以&lt;code&gt;-O2&lt;/code&gt;参数编译的结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;398&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1219&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1008&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;877&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1384&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3141&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1439&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;705&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1757&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1173&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1267&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;663&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;919&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;951&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1036&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;845&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1094&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1205&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1067&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1074&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;x64&#34;&gt;x64&lt;/h3&gt;

&lt;p&gt;在VS2015上以x64编译的运行时间&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;396&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;399&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1207&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;609&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;407&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;670&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;988&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1147&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;759&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;212&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;516&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;328&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;515&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;215&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;267&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;232&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;151&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;182&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;193&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;492&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在centos7x64 gcc8.3.1 以&lt;code&gt;-O2&lt;/code&gt;参数编译的结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;426&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;413&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1115&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;505&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;434&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;392&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;511&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;839&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;707&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;448&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1009&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;186&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;525&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;229&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;476&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;237&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;191&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;182&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;292&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2112&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从以上数据来看，首先要区分架构，如果是32位的，&lt;code&gt;++&lt;/code&gt;的更快，而在64位上则大多&lt;code&gt;**&lt;/code&gt;稍快，而现在大多数系统都支持64位的情况下，优先考虑&lt;code&gt;**&lt;/code&gt;的版本。而256与128的差距很小，不建议使用128，除非你确实要省这么点内存。综合最佳的是&lt;code&gt;xoshiro256**&lt;/code&gt;，即表格里的xoshiro256ss，64位架构下比线性同余快，而且质量好得多，推荐使用它。而如果你需要同时考虑32位和64位，那选择&lt;code&gt;xoshiro256++&lt;/code&gt;也是不错的。再者，如果你只需要生成浮点随机数，那么xoroshiro128p是速度最快的。不过老实说，大多数场合都没有必要对这么点差别纠结，选择一个合适的就行了，而且VS测试结果很迷，优化得让人猜不透，我认为以gcc的结果优先作为参考。以上数据仅供参考。&lt;/p&gt;

&lt;h2 id=&#34;随机性测试&#34;&gt;随机性测试&lt;/h2&gt;

&lt;p&gt;使用 TestU01 1.2.3 版的 SmallCrash, Crash 和 BigCrash 进行测试（如SmallCrash未通过则不测试Crash，Crash未通过则不测试BigCrash），横线&lt;code&gt;-&lt;/code&gt;表示通过测试，&lt;code&gt;/&lt;/code&gt;表示不进行测试，&lt;code&gt;?&lt;/code&gt;表示未测试&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;状态空间(bits)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;状态周期&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;SmallCrash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Crash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;BigCrash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CollisionOver&lt;br/&gt;BirthdaySpacings&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16ro&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{48}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SerialOver&lt;br/&gt;&amp;hellip;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{288}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SerialOver&lt;br/&gt;MaxOft&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{48}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SimpPoker&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{88}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{223}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;512&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{512}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift64s&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A.S.&lt;sup&gt;[6]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1056&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{1024}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1056&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{1024}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;20032&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{19937}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注解：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LCG32未通过的项：BirthdaySpacings, Collision, Gap, SimpPoker, CouponCollector, MaxOft, WeightDistrib, MatrixRank, HammingIndep, RandomWalk1&lt;/li&gt;
&lt;li&gt;LCG32_16ro的实现代码并不是本文中描述的有问题的版本，它是列表里唯一一个32位能通过SmallCrash和Crash测试的实现。BigCrash未通过的项：CouponCollector, Gap, MaxOft, WeightDistrib, SumCollector, LongestHeadRun, PeriodsInStrings&lt;/li&gt;
&lt;li&gt;LCG32_16ext,0在BigCrash未通过的项：SerialOver, CouponCollector, WeightDistrib, PeriodsInStrings&lt;/li&gt;
&lt;li&gt;rand48未通过的项：BirthdaySpacings, Gap, SimpPoker, WeightDistrib, CouponCollector&lt;/li&gt;
&lt;li&gt;据wiki，xorshift128p输出reversed的情况下不能通过BigCrash测试&lt;/li&gt;
&lt;li&gt;xoshiro64ss未通过的项：AppearanceSpacings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;随机性测试的部分结果也会带有一定的随机性，多次测试的结果可能不同，测试结果仅供参考&lt;/p&gt;

&lt;h2 id=&#34;生成-0-1-0-范围的均匀分布浮点数&#34;&gt;生成 $[0, 1.0)$ 范围的均匀分布浮点数&lt;/h2&gt;

&lt;p&gt;以上模板生成的都是无符号整数，如果要生成浮点数的话，以上的模板里除了&lt;code&gt;MCG&lt;/code&gt;不能直接用以下函数外，其它的都可以直接使用（速度快），用来把生成的整数转换成对应的浮点数。又或者，你可以直接用STL的&lt;code&gt;uniform_real_distribution&lt;/code&gt;（通用性好），以上全部模板支持STL的distribution系列。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;float rand_float(uint32_t rnd)
{
    union {
        float f;
        uint32_t u;
    }x;
    x.u = ((rnd &amp;gt;&amp;gt; 9) | 0x3F800000UL);
    return x.f - 1.0f;
}

double rand_float(uint64_t rnd)
{
    union {
        double d;
        uint64_t u;
    } x;
    x.u = ((rnd &amp;gt;&amp;gt; 12) | 0x3FF0000000000000UL);
    return x.d - 1.0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;生成-0-n-范围的均匀分布随机整数&#34;&gt;生成 $[0, n]$ 范围的均匀分布随机整数&lt;/h2&gt;

&lt;p&gt;很多人第一个方案就是 &lt;code&gt;rnd % (n + 1)&lt;/code&gt; ，其实这是错误的，在你对随机数分布要求不高的时候可以这么用，否则只要n+1不是2的整数次幂，获得的随机数就不是均匀分布的，除了直接使用STL的&lt;code&gt;uniform_int_distribution&lt;/code&gt;，自己写的话，除了&lt;code&gt;MCG&lt;/code&gt;不能直接用以下函数外，其它的大多可以直接使用（条件是参数eg的随机引擎生成的随机数最大值必须大于等于n）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;class _Eg&amp;gt;
static uint64_t i64_distribution(_Eg&amp;amp; eg, uint64_t n)
{
    ++n;
    if ((n &amp;amp; -n) == n)
        return (int64_t)eg() &amp;amp; (n-1);
    uint64_t m = n;
    while (m &amp;amp; (m - 1)) m += m &amp;amp; -m;
    --m;
    for (;;)
    {
        uint64_t r = (uint64_t)eg() &amp;amp; m;
        if (r &amp;lt; n)
            return r;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样的缺点是如果n比较小，那随机数据的大部分都浪费了，为了能更大地利用随机数据，可以做如下的改进，按n的大小分为1，2，4，8字节，每次从随机数据里取1，2，4，8个字节，多余的部分留下次使用，这样既照顾了速度也照顾了数据利用率。如果你需要能生成任意大小，那么你需要把随机数引擎作为二进制流数据生成，然后再从二进制流读取 $log_2n$ 个bit来做以上操作，这样代码较为复杂，但在n较小的时候能最大限度的利用生成的数据，这里就不具体展开了，有这个需求的话直接使用 &lt;code&gt;uniform_int_distribution&lt;/code&gt; 就足够了。以上全部模板支持直接调用。&lt;/p&gt;

&lt;p&gt;网上还有很多其它的错误生成方法，以下给大家带来一个视频，我觉得讲解得不错&lt;/p&gt;

&lt;iframe src=&#34;https://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful/player&#34; width=&#34;960&#34; height=&#34;540&#34; allowFullScreen frameBorder=&#34;0&#34; title=&#34;rand() Considered Harmful - Microsoft Channel 9 Video&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;随机数生成是一个大坑，以上只是做个简单得不能再简单的介绍，我只是碰巧看到lua更新了这个顺便更新一波，写个普及文，要是自己去创造一个随机数算法，我觉得比写别的算法还困难不少，绝大多数的实现都经不起数学推敲。之后有时间再收集收集资料再做介绍。&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_congruential_generator&#34; target=&#34;_blank&#34;&gt;线性同余&lt;/a&gt; LCG&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;MCG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_Twister&#34; target=&#34;_blank&#34;&gt;梅森旋转&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear-feedback_shift_register&#34; target=&#34;_blank&#34;&gt;LFSR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://prng.di.unimi.it/&#34; target=&#34;_blank&#34;&gt;xoshiro/xoroshiro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pcg-random.org/&#34; target=&#34;_blank&#34;&gt;PCG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pcg-random.org/pdf/toms-oneill-pcg-family-v1.02.pdf&#34; target=&#34;_blank&#34;&gt;PCG pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sprng.org/Version5.0/parameters.html&#34; target=&#34;_blank&#34;&gt;LCG Generator Parameters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_random_number_generators&#34; target=&#34;_blank&#34;&gt;List of random number generators&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>可持久化线段树</title>
      <link>/post/20191231-persistent_segtree/</link>
      <pubDate>Tue, 31 Dec 2019 08:26:00 +0800</pubDate>
      <guid>/post/20191231-persistent_segtree/</guid>
      <description>&lt;p&gt;可持久化权值线段树，wiki上指出引入者名字叫黃嘉泰，名字缩写正好是某位主席名字，所以又叫做主席树。而本篇先介绍可持久化线段树，阅读本篇前你需要先了解&lt;a href=&#34;../20191208-segtree/&#34;&gt;线段树&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;

&lt;p&gt;所谓的可持久化，意思是你能得到所有的历史版本，为了达到这个效果，当然可以每次修改的时候，先整体复制再修改，结果自然就是会爆内存。而事实上，由于每次修改最多改一条链，而其它分支可以重用。我们先拿链表做例子，如果有个链表内容是 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 ，现在我们把3修改成6，得到 1-&amp;gt;2-&amp;gt;6-&amp;gt;4-&amp;gt;5 ，但是后面的元素没有改动，所以我们可以把后面的元素直接重叠在一起使用，如下图：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
1--&amp;gt;2
2--&amp;gt;3
3--&amp;gt;4
4--&amp;gt;5
1&#39;--&amp;gt;2&#39;
2&#39;--&amp;gt;6
6--&amp;gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，完全可以当成两条不同的链表使用，同时节省空间。而可持久化线段树做法与这一样，就是没变的部分还使用原来节点，所以这个实现不能使用之前介绍的堆式储存，要和平衡树一样动态开节点。&lt;/p&gt;

&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;假设我们的数据是以下这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;构建线段树后结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒号前面的两个数表示一条线段，冒号后表示的是数据，这个数据表示的是这个区间的和。&lt;/p&gt;

&lt;p&gt;然后我们要把第3个元素从5改为1，构造第二棵线段树，首先复制一个root，包括儿子的指向也复制，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:8--&amp;gt;1,2:1
1,4&#39;:8--&amp;gt;3,4:7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，要更新的节点在右儿子那，所以把右儿子复制出来，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:8--&amp;gt;1,2:1
1,4&#39;:8--&amp;gt;3,4&#39;:7
3,4&#39;:7--&amp;gt;3,3:5
3,4&#39;:7--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，在区间$[3,4]$要更新的节点在左儿子那，所以把左儿子复制出来，同时由于这是最后的节点，再从底向上更新sum，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:4--&amp;gt;1,2:1
1,4&#39;:4--&amp;gt;3,4&#39;:3
3,4&#39;:3--&amp;gt;L3,3&#39;:1
3,4&#39;:3--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图中&lt;code&gt;L3,3&#39;:1&lt;/code&gt;是&lt;code&gt;3,4&#39;:3&lt;/code&gt;的左儿子。这样就是可持久化线段树的构造过程&lt;/p&gt;

&lt;h2 id=&#34;静态区间范围查询&#34;&gt;静态区间范围查询&lt;/h2&gt;

&lt;p&gt;现在给出区间$[L,R]$和范围$[a,b]$，求数组中在区间$[L,R]$里有多少个元素在范围$[a,b]$里。这种查询普通的线段树并不好办，那可持久化线段树有什么方法来解呢，首先我们先构造一棵空线段树，然后对数组元素做离散化，按大小映射到$[0,n-1]$，然后对离散化后的数组，按下标次序，一个一个加入到可持久化线段树里，例如数字2，那么我们就要在线段树里对2号元素+1，所以这就是可持久化权值线段树，即主席树。如此这般加入后，由于我们是按下标次序加入的，所以我们非常容易地得到表示区间$[0,R]$的线段树，那么在范围$[a,b]$里的元素数量，正好就是$[a,b]$区间和。但如果要求的是区间$[L,R]$里有多少个元素在范围$[a,b]$里，那我们除了要求出区间$[0,R]$，还要求出区间$[0,L-1]$，然后两者的$[a,b]$区间和的差，就是我们所要的答案&lt;/p&gt;

&lt;h2 id=&#34;基础模板&#34;&gt;基础模板&lt;/h2&gt;

&lt;p&gt;以下基础模板只支持区间求和，即求区间$[0,R]$里有多少个元素在范围$[a,b]$里&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct persistent_seg_tree
{
    struct data
    {
        int sum;
        data() :sum(0) {}
    };
    struct node
    {
        int l, r;
        data d;
        node() :l(0), r(0) {}
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; roots;
    int sz;

    void up(int id)
    {
        nodes[id].d.sum = nodes[nodes[id].l].d.sum + nodes[nodes[id].r].d.sum;
    }
    int newnode(int cpy)
    {
        int id = (int)nodes.size();
        node tmp = nodes[cpy];
        nodes.push_back(tmp);
        return id;
    }
    int add(int tp, int tl, int tr, int i, int v)
    {
        int id = newnode(tp);
        if (tl + 1 &amp;gt;= tr)
        {
            nodes[id].d.sum += v;
            return id;
        }
        int tmid = (tl + tr) / 2;
        if (i &amp;lt; tmid)
        {
            int nid = add(nodes[id].l, tl, tmid, i, v);
            nodes[id].l = nid;
        }
        else
        {
            int nid = add(nodes[id].r, tmid, tr, i, v);
            nodes[id].r = nid;
        }
        up(id);
        return id;
    }
    int getsum(int tp, int tl, int tr, int l, int r)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return nodes[tp].d.sum;
        }
        int tmid = (tl + tr) / 2;
        int sum = 0;
        if (l &amp;lt; tmid)
        {
            sum += getsum(nodes[tp].l, tl, tmid, l, r);
        }
        if (r &amp;gt; tmid)
        {
            sum += getsum(nodes[tp].r, tmid, tr, l, r);
        }
        return sum;
    }
    // interface
    void init(int range, int root_size) // 数组大小[0, range)，操作次数
    {
        sz = range;
        nodes.clear();
        roots.clear();
        nodes.reserve(root_size * (int)(log(sz * 2.0) / log(2.0) + 1.01));
        nodes.push_back(node());
        roots.reserve(root_size + 1);
        roots.push_back(0);
    }
    void add(int pos, int v)
    {
        int last = roots.back();
        roots.push_back(add(last, 0, sz, pos, v));
    }
    int getsum(int t, int l, int r)
    {
        if (t &amp;lt;= 0) return 0;
        if (r &amp;lt; l) return 0;
        if (t &amp;gt;= (int)roots.size()) t = (int)roots.size() - 1;
        return getsum(roots[t], 0, sz, l, r + 1);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用说明，先调用init，参数分别是离散化后的值域大小，和数组大小（对应的就是操作完后根的个数，所以名字是&lt;code&gt;root_size&lt;/code&gt;），然后循环 &lt;code&gt;add(pos, 1)&lt;/code&gt;，最后查询时，调用&lt;code&gt;getsum(R, a, b) - getsum(L - 1, a, b)&lt;/code&gt;，LR就是区间，ab就是值域范围。&lt;/p&gt;

&lt;h2 id=&#34;静态区间第k大&#34;&gt;静态区间第k大&lt;/h2&gt;

&lt;p&gt;此问题解法较多，本篇主要介绍使用主席树的解法，同样也是先建立一棵可持久化权值线段树，对于查询区间为$[0,R]$的第k大，这个问题很简单，就是找出前缀和大于等于k的区间$[0,m]$所对应的最小的m值，所以只要对$[0,R]$所对应的线段树做查找，如果左子树的sum小于等于k，那么进入左子树查询k，否则进入右子树查询k-sum即可。但对于查询区间$[L,R]$，我们需要找出$[0,R]$和$[0,L-1]$这两棵线段树，它们的$[a,b]$区间和表示在$[L,R]$里有多少个数的值域在$[a,b]$之间，所以我们就同时对这两棵线段树做查找，设 $[0,R]$左子树的sum 减去 $[0,L-1]$左子树的sum 为S，那么如果S小于等于k，那么进入左子树查询k，否则进入右子树查询k-S，实现代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int kth(int tpl, int tpr, int tl, int tr, int k)
{
    if (tl + 1 &amp;gt;= tr) return tl;
    int tmid = (tl + tr) / 2;
    int num = nodes[nodes[tpr].l].d.sum - nodes[nodes[tpl].l].d.sum;
    if (k &amp;lt;= num) return kth(nodes[tpl].l, nodes[tpr].l, tl, tmid, k);
    else return kth(nodes[tpl].r, nodes[tpr].r, tmid, tr, k - num);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;区间第k大模板&#34;&gt;区间第k大模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct persistent_seg_tree
{
    struct data
    {
        int sum;
        data() :sum(0) {}
    };
    struct node
    {
        int l, r;
        data d;
        node() :l(0), r(0) {}
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; roots;
    int sz;

    void up(int id)
    {
        nodes[id].d.sum = nodes[nodes[id].l].d.sum + nodes[nodes[id].r].d.sum;
    }
    int newnode(int cpy)
    {
        int id = (int)nodes.size();
        node tmp = nodes[cpy];
        nodes.push_back(tmp);
        return id;
    }
    int add(int tp, int tl, int tr, int i, int v)
    {
        int id = newnode(tp);
        if (tl + 1 &amp;gt;= tr)
        {
            nodes[id].d.sum += v;
            return id;
        }
        int tmid = (tl + tr) / 2;
        if (i &amp;lt; tmid)
        {
            int nid = add(nodes[id].l, tl, tmid, i, v);
            nodes[id].l = nid;
        }
        else
        {
            int nid = add(nodes[id].r, tmid, tr, i, v);
            nodes[id].r = nid;
        }
        up(id);
        return id;
    }
    int kth(int tpl, int tpr, int tl, int tr, int k)
    {
        if (tl + 1 &amp;gt;= tr) return tl;
        int tmid = (tl + tr) / 2;
        int num = nodes[nodes[tpr].l].d.sum - nodes[nodes[tpl].l].d.sum;
        if (k &amp;lt;= num) return kth(nodes[tpl].l, nodes[tpr].l, tl, tmid, k);
        else return kth(nodes[tpl].r, nodes[tpr].r, tmid, tr, k - num);
    }
    // interface
    void init(int range, int root_size) // 数组大小[0, range)，操作次数
    {
        sz = range;
        nodes.clear();
        roots.clear();
        nodes.reserve(root_size * (int)(log(sz * 2.0) / log(2.0) + 1.01));
        nodes.push_back(node());
        roots.reserve(root_size + 1);
        roots.push_back(0);
    }
    void add(int i, int v)
    {
        int last = roots.back();
        roots.push_back(add(last, 0, sz, i, v));
    }
    int kth(int tpl, int tpr, int k)
    {
        return kth(roots[tpl - 1], roots[tpr], 0, sz, k);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它说明&#34;&gt;其它说明&lt;/h2&gt;

&lt;p&gt;其它的可持久化数据结构大同小异，如可持久化的trie，构造方法也是一样的&lt;/p&gt;

&lt;p&gt;以上只介绍了静态区间的范围查询和第k大查询，还不支持动态修改并查询，这个会在之后再做介绍。&lt;/p&gt;

&lt;p&gt;习题：静态区间范围查询&lt;a href=&#34;https://vjudge.net/problem/HDU-4417&#34; target=&#34;_blank&#34;&gt;hdu 4417&lt;/a&gt;，静态区间第k大&lt;a href=&#34;https://vjudge.net/problem/POJ-2104&#34; target=&#34;_blank&#34;&gt;POJ 2104&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FHQ Treap</title>
      <link>/post/20191215-fhq-treap/</link>
      <pubDate>Sun, 15 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191215-fhq-treap/</guid>
      <description>&lt;p&gt;讲完了&lt;a href=&#34;../20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;和&lt;a href=&#34;../20191213-tree-sequence/&#34;&gt;splaytree&lt;/a&gt;，接下来讲把这两的思想混合在一起的 FHQ Treap，据说作者是范浩强。&lt;/p&gt;

&lt;p&gt;splay其实还有两个操作split和merge没有介绍，我打算把这两放在这里一并介绍&lt;/p&gt;

&lt;h2 id=&#34;split和merge&#34;&gt;Split和Merge&lt;/h2&gt;

&lt;p&gt;Split就是把树按某个条件划分成两棵子树，如果是查找树，就按某个值划分为小于它的以及大于等于它的（等于号取哪边怎么好写怎么来就是），如果是序列维护，那就按照rank来划分。而merge操作则正好相反，把两棵子树合并成为一棵。所以，如果我们需要对某个区间做操作，那么我们就把那个区间Split出来，操作好了后（打懒惰标记，或取出结果）再Merge回去就行了，与splay操作的思路是差不多的。不过为了在split再merge后能间接对树的平衡性优化，我们不能简单地merge，要套用Treap的随机数法，我们先来看怎么split。&lt;/p&gt;

&lt;p&gt;先定义好接口&lt;code&gt;void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)&lt;/code&gt;，x是返回的左子树，y是返回的右子树，接着我们需要递归split，如果划分点在左子树，那么y一定是根，反之划分点在右子树，那么x一定是根。确定了其中一个，在递归调用的时候，假如y确定了，于是还没确定的，就是x以及根节点的左子树的指向，所以把这两传参就行了，时间复杂度 $O(logn)$ ，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 维护序列的实现
void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
{
    if (!tp) { x = y = 0; return; }
    pushdown(tp);
    if (k &amp;lt;= nodes[ch(tp, 0)].sz)
    {
        y = tp;
        split(ch(tp, 0), k, x, ch(tp, 0));
        update(y);
    }
    else
    {
        x = tp;
        split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
        update(x);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来讲讲merge，我们不能直接把右子树直接接在左子树的最后一个元素后，这样会导致树高度太大。在Treap里面，引入了一个随机值，来决定谁来做根节点，所以，我们就对比这个值，如果左子树的小，那么就让左子树的右儿子与右子树merge，否则就让右子树的左儿子与左子树merge，递归调用就是了，时间复杂度 $O(logn)$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int merge(int tl, int tr)
{
    if (!tl) return tr;
    else if (!tr) return tl;
    if (nodes[tl].k &amp;lt; nodes[tr].k)
    {
        pushdown(tl);
        ch(tl, 1) = merge(ch(tl, 1), tr);
        return update(tl);
    }
    else
    {
        pushdown(tr);
        ch(tr, 0) = merge(tl, ch(tr, 0));
        return update(tr);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;这么快就给模板了？没错，你在理解了Treap以后，再去学习&lt;code&gt;FHQ-Treap&lt;/code&gt;那是相当简单的，最复杂的两个操作已经讲完了，相比Treap，它不需要旋转操作，而通过merge操作来让树平衡，而且这组操作让其它的操作相比Treap都来得简单，最不容易写出BUG，代码也是最短的一个，常数也比splaytree小，所有操作的期望时间复杂度都是 $O(logn)$ 。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct FHQ_Treap
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d, sum, lz_add;
        node(int z = 1) :sz(z), k(rnd()) { ch[0] = ch[1] = 0; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    int new_node(const data&amp;amp; d)
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            nodes[id] = node();
        }
        else nodes.push_back(node());
        nodes[id].d = d;
        nodes[id].sum = d;
        return id;
    }
    int update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
        return tp;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            add(n.ch[0], n.lz_add); add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    int merge(int tl, int tr)
    {
        if (!tl) return tr;
        else if (!tr) return tl;
        if (nodes[tl].k &amp;lt; nodes[tr].k)
        {
            pushdown(tl);
            ch(tl, 1) = merge(ch(tl, 1), tr);
            return update(tl);
        }
        else
        {
            pushdown(tr);
            ch(tr, 0) = merge(tl, ch(tr, 0));
            return update(tr);
        }
    }
    void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
    {
        if (!tp) { x = y = 0; return; }
        pushdown(tp);
        if (k &amp;lt;= nodes[ch(tp, 0)].sz)
        {
            y = tp;
            split(ch(tp, 0), k, x, ch(tp, 0));
            update(y);
        }
        else
        {
            x = tp;
            split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
            update(x);
        }
    }
    void remove(int&amp;amp; tp)
    {
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        root = 0;
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int kth(int k)
    {
        int x, y, z;
        split(root, k, y, z); split(y, k - 1, x, y);
        int id = y;
        root = merge(merge(x, y), z);
        return id;
    }
    void insert(int k, data v)
    {
        int l, r;
        split(root, k - 1, l, r);
        int tp = new_node(v);
        root = merge(merge(l, tp), r);
    }
    void erase(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        remove(y);
        root = merge(x, z);
    }
    void range_add(int l, int r, data v)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        add(y, v);
        root = merge(merge(x, y), z);
    }
    T getsum(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        T ret = nodes[y].sum;
        root = merge(merge(x, y), z);
        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是个支持区间加、区间删和区间求和的模板。除了LCT，都交给这个数据结构解决吧。&lt;/p&gt;

&lt;h2 id=&#34;其它问题&#34;&gt;其它问题&lt;/h2&gt;

&lt;p&gt;如果你要问为什么不一开始就介绍这个，而先解释其它的树结构，那是因为那是基础啊，基础搞好了，那再搞这个就很简单了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>平衡树与序列维护</title>
      <link>/post/20191213-tree-sequence/</link>
      <pubDate>Fri, 13 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191213-tree-sequence/</guid>
      <description>&lt;p&gt;平衡树除了用来对存在偏序关系的数据进行维护，还能用于对序列维护，相当于一个数组。阅读本文你需要先看完上一篇关于&lt;a href=&#34;../20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;的文章。&lt;/p&gt;

&lt;h2 id=&#34;序列维护&#34;&gt;序列维护&lt;/h2&gt;

&lt;p&gt;在之前的文章，我们介绍过使用树状数组，以及线段树来维护一个序列，可以做区间操作及区间求和，但它们都存在一个缺点，不能动态插入数据。那我们怎么样才能通过平衡树来维护序列呢，之前我们有一个size字段能快速找第k大（或树的中序遍历第k个元素），而旋转操作并不会改变元素之间的相对顺序，那么我们就通过它直接插入到第k个元素的前面，这样我们插入的时候就不再通过要插入的值本身的大小关系，而需要多加一个参数k决定插入的位置。当平衡树用于维护序列的时候，就不用考虑元素相等的问题了。这样我们把元素相等处理的代码删除并修改基本操作的代码就能得到第一个能维护序列的基本模板，以下模板使用Treap修改得来。&lt;/p&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;以下模板我实现成真·模板，就几乎可以作为数组使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        node(int z = 1) :sz(z), k(rnd()) { d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { if (size() &amp;gt;= reserve_size) nodes.reserve((reserve_size *= 2) + 1); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;动态版本线段树&#34;&gt;动态版本线段树&lt;/h2&gt;

&lt;p&gt;有了这个，我们就可以把它改成动态版本的线段树，就是每个根节点多维护一个sum字段，再加一个懒惰标记，就能实现区间加和区间求和。不过和线段树不同的是，线段树的子树的根只维护区间的结果，而平衡树的根本身就是一个元素，所以代码和线段树略有差别。以下我们实现一个支持区间加和区间求和且能动态增减数据的平衡树，实测与前面讲线段树文章的普通线段树模板，在解决同一问题的执行时间非常接近&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        data sum;
        data lz_add;
        node(int z = 1) :sz(z), k(rnd()) { sum = lz_add = d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; sum = n.sum; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void _add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            _add(n.ch[0], n.lz_add);
            _add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            nodes[tp].sum = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int s = n.ch[r];
        pushdown(s);
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    data getsum(int&amp;amp; tp, int l, int r)
    {
        if (tp == 0 || l &amp;gt;= r) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            return n.sum;
        }
        else
        {
            pushdown(tp);
            data sum = 0;
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                sum = nodes[tp].d;
            }
            sum = sum + getsum(n.ch[0], l, min(sz, r));
            sum = sum + getsum(n.ch[1], max(1, l - sz), r - sz);
            return sum;
        }
    }
    void range_add(int&amp;amp; tp, int l, int r, const data&amp;amp; d)
    {
        if (tp == 0 || l &amp;gt;= r) return;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            _add(tp, d);
        }
        else
        {
            //pushdown(tp);
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                nodes[tp].d = nodes[tp].d + d;
            }
            nodes[tp].sum = nodes[tp].sum + d * (r - l);
            range_add(n.ch[0], l, min(sz, r), d);
            range_add(n.ch[1], max(1, l - sz), r - sz, d);
        }
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { reserve(); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
    T getsum(int l, int r) { return getsum(root, l, r + 1); }
    void range_add(int l, int r, data v) { range_add(root, l, r + 1, v); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;splay-tree&#34;&gt;Splay tree&lt;/h2&gt;

&lt;p&gt;使用以上这个Treap的自由度还是不够好，有些操作还是不容易做，例如区间翻转，或者区间删除。所以我们需要一个功能更为强大的树，因为那个随机数的限制，不能任意节点都能当树根，而没有那个随机数字段的树，就是伸展树Splay tree，区别主要是三个地方，一是需要父节点字段，维护关系时常数更大，二是旋转，使用双旋，三是splay操作，作用是把节点提升到树根。这个splay操作就是神器，能把很多区间操作写得非常简单，代码也确实是目前介绍的树里面代码最少的。不过伸展树的缺点是编码理解难度稍大。&lt;/p&gt;

&lt;p&gt;和其它树的不同点是，为了保证区间操作代码简短，初始化的时候直接插入两个元素作为序列的一头一尾，于是实际操作区间是2到n+1，这个细节要注意，有了这两个元素可以减少很多特判操作。例如说，要找区间&lt;code&gt;[l,r]&lt;/code&gt;，那么只要让位置r+1的元素splay到根，然后再让位置l-1的元素splay到根的左边，那么l-1位的元素的右子树就是整个操作区间了，而为了让这个总是能做，所以才要预先加两个元素。这个技巧用在了几乎所有操作里面，包括插入，删除，所有的区间操作。splay操作的时间复杂度 $O(logn)$&lt;/p&gt;

&lt;p&gt;以下是序列维护用的基本splaytree模板，要改成支持区间求和什么的就自己改吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct splaytree_seq
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], fa, sz;
        data d;
        node(int z = 1) :sz(z) { ch[0] = ch[1] = fa = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    inline int&amp;amp; fa(int tp) { return nodes[tp].fa; }
    inline int rch(int tp) { return ch(fa(tp), 1) == tp; }
    int new_node()
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            fa(recyc) = 0;
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.d = n.d + d;
    }
    void rotate(int s)
    {
        int f1 = fa(s), f2 = fa(f1);
        int d1 = rch(s), d2 = rch(f1);
        ch(f2, d2) = s; fa(s) = f2;
        fa(ch(s, d1 ^ 1)) = f1; ch(f1, d1) = ch(s, d1 ^ 1);
        fa(f1) = s; ch(s, d1 ^ 1) = f1;
        update(f1); update(s);
    }
    void splay(int tp, int goal = 0)
    {
        for (int f; (f = fa(tp)) != goal; rotate(tp))
            if (fa(f) != goal) rotate(rch(tp) == rch(f) ? f : tp);
        if (!goal) root = tp;
    }
    int find_m(int tp, int r)
    {
        int p = tp;
        while (ch(p, r)) p = ch(p, r);
        if (p != tp) splay(p, tp);
        return p;
    }
    int merge(int tl, int tr)
    {
        if (!tl) { fa(tr) = 0; return tr; }
        if (!tr) { fa(tl) = 0; return tl; }
        int p = find_m(tl, 1);
        ch(p, 1) = tr; fa(tr) = p;
        return tl;
    }
    void insert(int k, const data&amp;amp; d)
    {
        int tp = new_node();
        splay(kth(root, k + 1)); splay(kth(root, k), root);
        int c = ch(root, 0);
        nodes[c].ch[1] = tp;
        nodes[tp].fa = c;
        nodes[tp].d = d;
        update(c); update(root);
    }
    void remove(int&amp;amp; tp)
    {
        fa(tp) = 0;
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    int kth(int tp, int k)
    {
        if (tp == 0) return tp;
        node&amp;amp; n = nodes[tp];
        //pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz &amp;gt; k) return kth(n.ch[0], k);
        if (sz &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        nodes.push_back(node()); nodes.push_back(node());
        nodes[1].ch[0] = 2; nodes[1].sz = 2; nodes[2].fa = 1;
        root = 1; // be the bound
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz - 2; }
    int kth(int k) { int id = kth(root, k + 1); splay(id); return id; }
    void erase(int l, int r)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        remove(ch(ch(root, 0), 1));
        update(ch(root, 0)); update(root);
    }
    void range_add(int l, int r, data v)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        add(ch(ch(root, 0), 1), v);
        update(ch(root, 0)); update(root);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上已经直接写好了区间删除，对于区间反转等操作，可以模仿线段树加懒惰标记即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Treap与SBT</title>
      <link>/post/20191211-treap-sbt/</link>
      <pubDate>Wed, 11 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191211-treap-sbt/</guid>
      <description>&lt;p&gt;这里之所以把这两个放在一起讲，是因为它们实在是相似度很高（至少在竞赛领域），都需要求kth和指定元素的rank（Treap的话可有可无，但通常会需要）。不过如果你没有写过树，强烈建议你自己通过理解来写一遍。&lt;/p&gt;

&lt;h2 id=&#34;bst&#34;&gt;BST&lt;/h2&gt;

&lt;p&gt;首先，Treap和SBT都属于BST的一种，BST就是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&#34; target=&#34;_blank&#34;&gt;二叉搜索树&lt;/a&gt;，它满足的特点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;没有两个节点的值相等&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比左子树所有节点的值要大&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比右子树所有节点的值要小&lt;/li&gt;
&lt;li&gt;任意子树均为二叉搜索树&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们实在需要支持多个相同值放在树里面，那么有两种情况，如果那些相同值是确实完全没有区别（例如int），那么只需要在每个节点多加一个字段记录这个值出现的次数就可以了，但如果这些值只有偏序关系，可能不是严格相等，存在其它非比较字段，那么我们就再在每个节点增加一个next域做成一个链表即可。&lt;/p&gt;

&lt;p&gt;基本操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插入(insert)：对比子树的根节点的值r与插入的值v，如果v与r相等，根节点重复数量+1，如果v小于r，插入到左子树，v大于r则插入到右子树&lt;/li&gt;
&lt;li&gt;查找(find)：和插入相似，值相等时返回其id&lt;/li&gt;
&lt;li&gt;删除(erase)：先查找，找到的时候，再查找它的后继（右子树的最小），用后继元素替换后再删除原后继&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;支持简单重复元素的bst模板&#34;&gt;支持简单重复元素的BST模板&lt;/h2&gt;

&lt;p&gt;这个模板还添加了size域，用于求第k小元素和元素排名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct bst
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        return ret;
    }
    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int nxt = nodes[tp].ch[1];
            while (nodes[nxt].ch[0])
                nxt = nodes[nxt].ch[0];
            int dup = nodes[nxt].dup;
            nodes[tp].d = nodes[nxt].d;
            nodes[tp].dup = nodes[nxt].dup;
            recycle.push_back(nxt);
            int* tmp = &amp;amp;nodes[tp].ch[1];
            while (nodes[*tmp].ch[0])
            {
                nodes[*tmp].sz -= dup;
                tmp = &amp;amp;nodes[*tmp].ch[0];
            }
            *tmp = nodes[*tmp].ch[1];
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;一些说明&#34;&gt;一些说明&lt;/h3&gt;

&lt;p&gt;子节点用的节段是ch数组(child的缩写)，不使用left和right的原因是为了节省代码，例如在insert函数里，通过计算&lt;code&gt;d &amp;lt; n.d&lt;/code&gt;的值是0或1决定下一步是递归调用左还是右子节点的时候，就不需要分别针对left和right写代码，后面的find和erase同理。&lt;/p&gt;

&lt;p&gt;rank函数在upper为0的时候，找到的是相同元素里面最小的排名，如果v不存在树里面，那么就是v假如要插入到树里的排名。upper为1的时候，找到的是大于v的最小的元素的排名，即v的后继。&lt;/p&gt;

&lt;p&gt;kth函数的参数如果非法，会导致无限循环，如果你想避免那么你可以在函数里添加检查，例如加一句&lt;code&gt;if (tp == 0) return 0;&lt;/code&gt;即可。&lt;/p&gt;

&lt;h2 id=&#34;优化bst&#34;&gt;优化BST&lt;/h2&gt;

&lt;p&gt;单纯的BST最大的问题是，它最坏的情况是可能成为一条链表，例如你按从小到大插入到树里面的时候，缺乏让它缩减树高的机制，所以接下来要讲两个非常重要的操作，就是树的旋转&lt;/p&gt;

&lt;p&gt;图A&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
4--&amp;gt;2
2--&amp;gt;1
2--&amp;gt;3
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图B&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
2--&amp;gt;4
4--&amp;gt;3
2--&amp;gt;1
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上两图，从A到B叫做zig，把左儿子旋转到root的位置，也叫右旋，B到A叫做zag，把右儿子旋转到root的位置，也叫左旋，旋转代码也很简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    tp = s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上参数r如果是0，就是zig，r是1就是zag。有了旋转操作，我们就可以开始看自平衡树了。&lt;/p&gt;

&lt;h2 id=&#34;treap&#34;&gt;Treap&lt;/h2&gt;

&lt;p&gt;Treap其实炒鸡简单，在BST的基础上多一个随机数生成的字段，这个字段用于决定树要怎么旋转。这个字段就是个优先级，父节点的优先级不大于两个子节点的优先级，这其实就是heap，所以，Treap就是树堆（Tree-heap）。维护Treap，我们只需要在insert的时候，检查是不是满足heap，如果不满足就旋转，相对BST只加了非常少的代码，也就加了rotate函数，rnd函数（直接用rand也行），insert加了维护，以及旋转时需要的update函数维护size字段，也就是说Treap是最经济实惠的平衡树。&lt;/p&gt;

&lt;p&gt;操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新(update): 累加左右子树的size&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除(erase): 找到要删除的元素后，对比两子树的根的优先级，把较的小旋转到原来要删除的元素的位置，使要删除的元素的深度+1，直到删除的元素没有两个子树为止&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct treap
{
struct data
{
    int v;
    data(int _v = 0) :v(_v) {}
    bool operator==(const data&amp;amp; d) const
    {
        return v == d.v;
    }
    bool operator&amp;lt;(const data&amp;amp; d) const
    {
        return v &amp;lt; d.v;
    }
};
struct node
{
    int ch[2], sz, dup;
    unsigned k;
    data d;
    node(int z = 1) :sz(z), dup(z), k(rnd()) { ch[0] = ch[1] = 0; }
    static unsigned rnd()
    {
        static unsigned r = 0x123;
        r = r * 69069 + 1;
        return r;
    }
};
vector&amp;lt;node&amp;gt; nodes;
vector&amp;lt;int&amp;gt; recycle;
int root;
int reserve_size;
void reserve()
{
    if (size() &amp;gt;= reserve_size)
        nodes.reserve((reserve_size *= 2) + 1);
}
int new_node()
{
    int id = (int)nodes.size();
    if (!recycle.empty())
    {
        id = recycle.back();
        recycle.pop_back();
        nodes[id] = node();
    }
    else nodes.push_back(node());
    return id;
}
void update(int tp)
{
    node&amp;amp; n = nodes[tp];
    n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
}
int insert(int&amp;amp; tp, const data&amp;amp; d)
{
    if (tp == 0)
    {
        tp = new_node();
        nodes[tp].d = d;
        return tp;
    }
    node&amp;amp; n = nodes[tp];
    ++n.sz;
    if (d == n.d)
    {
        ++n.dup;
        return tp;
    }
    int r = d &amp;lt; n.d;
    int&amp;amp; s = n.ch[r ^ 1];
    int ret = insert(s, d);
    if (nodes[s].k &amp;lt; n.k) rotate(tp, r ^ 1), update(tp);
    return ret;
}
void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    update(tp);
    tp = s;
}
int find(int tp, const data&amp;amp; d) // return id
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d) return tp;
    return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
}
int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d)
    {
        --nodes[tp].sz;
        if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
        return 1;
    }
    if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
    {
        --nodes[tp].sz;
        return 1;
    }
    return 0;
}
void remove(int&amp;amp; tp)
{
    if (tp == 0) return;
    if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
    {
        recycle.push_back(tp);
        tp = nodes[tp].ch[!nodes[tp].ch[0]];
    }
    else
    {
        int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
        rotate(tp, r ^ 1);
        remove(nodes[tp].ch[r]);
        update(tp);
    }
}
int kth(int tp, int k) // return id
{
    node&amp;amp; n = nodes[tp];
    int sz = nodes[n.ch[0]].sz;
    if (sz &amp;gt;= k) return kth(n.ch[0], k);
    if (sz + n.dup &amp;gt;= k) return tp;
    return kth(n.ch[1], k - sz - n.dup);
}
int rank(int tp, const data&amp;amp; d, int dup)
{
    if (tp == 0) return 1;
    node&amp;amp; n = nodes[tp];
    if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
    else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
    return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
}
// interface
void init(int size)
{
    nodes.clear();
    recycle.clear();
    nodes.reserve(size + 1);
    nodes.push_back(node(0));
    root = 0; reserve_size = size;
}
int get(int id) { return nodes[id].d.v; }
int size() { return nodes[root].sz; }
int insert(data v) { reserve(); return insert(root, v); }
int erase(data v) { return erasefind(root, v); }
int find(data v) { return find(root, v); } // return id
int kth(int k) { return kth(root, k); } // return id
// upperbound when upper = 1
int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sbt&#34;&gt;SBT&lt;/h2&gt;

&lt;p&gt;这个名字和BST特别像，但它全名是&lt;code&gt;Size Balanced Tree&lt;/code&gt;，作者是&lt;a href=&#34;https://www.zhihu.com/question/30541674&#34; target=&#34;_blank&#34;&gt;CQF&lt;/a&gt;，它通过size字段来进行树平衡。它的关键操作叫做&lt;code&gt;maintain&lt;/code&gt;，这个操作的平摊复杂度是 $O(1)$ ，这货具体解释可以看CQF的论文，SBT的时间常数比Treap更小一些，内存也更小，不过代码也稍长一些（就是因为&lt;code&gt;maintain&lt;/code&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct sbt
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        maintain(tp, r ^ 1);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    void maintain(int&amp;amp; tp, int s)
    {
        if (tp == 0) return;
        if (nodes[nodes[nodes[tp].ch[s]].ch[s]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
            rotate(tp, s);
        else if (nodes[nodes[nodes[tp].ch[s]].ch[s ^ 1]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
        {
            rotate(nodes[tp].ch[s], s ^ 1);
            rotate(tp, s);
        }
        else return;

        maintain(nodes[tp].ch[s], s);
        maintain(nodes[tp].ch[s ^ 1], s ^ 1);
        maintain(tp, s);
        maintain(tp, s ^ 1);
    }

    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].sz &amp;gt;= nodes[nodes[tp].ch[1]].sz;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;温馨提示&#34;&gt;温馨提示&lt;/h2&gt;

&lt;p&gt;别看代码长，如果你还没自己实现过，硬着头皮写一次，你就懂了，核心其实只有那么点。以上没有实现插入相等元素后用链表串起来，实在有需要时自己加一下就好了。又或者，如果你不需要处理相同元素，那么代码也有不少的简化，特别是删除元素的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线段树</title>
      <link>/post/20191208-segtree/</link>
      <pubDate>Sun, 08 Dec 2019 18:26:00 +0800</pubDate>
      <guid>/post/20191208-segtree/</guid>
      <description>&lt;p&gt;很多人在初始接触线段树的时候，一看到别人写一大堆代码就直接弃坑了，其实不要被它的外表所欺骗，线段树其实是相当好写的树结构了，而且理解起来其实很简单。要学会这个，你不能光会抄模板就会区间修改和求个区间和，因为实际应用经常会使用它的变形，还是在于理解&lt;del&gt;（理解后背板）&lt;/del&gt;。&lt;/p&gt;

&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;首先，回想一下heap的结构，它使用一个数组，同时使用下标本身来表达父子关系，这样的方式能节省大量指针所需要的内存空间，以下也使用这种表示方法来表示一棵线段树，也就是说，这里介绍的，属于&lt;strong&gt;狭义线段树&lt;/strong&gt;。假设我们的数据是以下这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;构建线段树后结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16--&amp;gt;1,4:8
1,8:16--&amp;gt;5,8:8
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
5,8:8--&amp;gt;5,6:7
5,8:8--&amp;gt;7,8:1
5,6:7--&amp;gt;5,5:3
5,6:7--&amp;gt;6,6:4
7,8:1--&amp;gt;7,7:0
7,8:1--&amp;gt;8,8:1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒号前面的两个数表示一条线段，冒号后表示的是数据，这个数据表示的是这个区间的和。如此一来，我们查询一个区间的和，可以很快地计算出来，例如求&lt;code&gt;[1,6]&lt;/code&gt;的和，那么需要拆分为&lt;code&gt;[1,4]&lt;/code&gt;与&lt;code&gt;[5,6]&lt;/code&gt;的和，分别是8和7，所以结果是&lt;code&gt;8+7=15&lt;/code&gt;，原理就是这样而已。&lt;/p&gt;

&lt;h2 id=&#34;单点数据更新&#34;&gt;单点数据更新&lt;/h2&gt;

&lt;p&gt;单点更新时，可以参考树状数组，先更新子节点，然后向上找父节点更新即可，也可以递归实现，这不在本节讨论范围。不过如果你确实只需要单点修改，那么可以考虑ZKW线段树，ZKW线段树是先更新子节点，然后向上找父节点更新，由于少了很多递归，常数比递归的线段树要小。后文提供一个简易的模板作为参考。&lt;/p&gt;

&lt;h2 id=&#34;区间数据更新&#34;&gt;区间数据更新&lt;/h2&gt;

&lt;p&gt;例如，我们希望对区间&lt;code&gt;[3,5]&lt;/code&gt;上的数都加上2，这时候需要引入懒惰标记，其实就是把操作记录在父节点上，有必要时再向下传递。像刚才的例子，都加上懒惰标记后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:7,0
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:7,0--&amp;gt;3,3:5,0
3,4:7,0--&amp;gt;4,4:2,0
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:3,0
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后对区间&lt;code&gt;[3,5]&lt;/code&gt;上的数都加上2，那么把这个区间拆分为&lt;code&gt;[3,4]&lt;/code&gt;和&lt;code&gt;[5,5]&lt;/code&gt;，更新标记&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:11,2
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:11,2--&amp;gt;3,3:5,0
3,4:11,2--&amp;gt;4,4:2,0
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:5,2
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是说，&lt;code&gt;[3,3]&lt;/code&gt;和&lt;code&gt;[4,4]&lt;/code&gt;都没有更新，更新在&lt;code&gt;[3,4]&lt;/code&gt;上了，那么接下来需要查询&lt;code&gt;[3,3]&lt;/code&gt;的话，就把标记向下传递一层，变成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:11,0
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:11,0--&amp;gt;3,3:7,2
3,4:11,0--&amp;gt;4,4:4,2
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:5,2
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，再获取区间&lt;code&gt;[3,3]&lt;/code&gt;的结果7，就是所需要的答案&lt;/p&gt;

&lt;h2 id=&#34;基础模板&#34;&gt;基础模板&lt;/h2&gt;

&lt;p&gt;以下基础模板只支持区间求和，以及区间整体加上一个数的操作，和&lt;a href=&#34;../20191111-fenwicktree/&#34;&gt;树状数组&lt;/a&gt;后面提供的模板实现了相同的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree_add
{
    struct node
    {
        int sum;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d; // 仿heap的形式保存线段树
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    // 当前tp节点对应的线段区间为[tl,tr]，更新区间是[l,r]
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl + 1) * v;
            d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 更新左右儿子
        if (l &amp;lt;= tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 统计左右儿子
        int sum = 0;
        if (l &amp;lt;= tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid + 1, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1，如需要从1开始那么要+1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz; // 扩展为满二叉树
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r, v, 0, sz - 1, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r, 0, sz - 1, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法，调用init初始化范围（注意下标从0到size-1，下标要从1开始的话要size+1，否则如果size正好是2的k次方时操作下标为size时会出问题），然后通过&lt;code&gt;update_add&lt;/code&gt;和&lt;code&gt;get_sum&lt;/code&gt;更新数据即可。&lt;/p&gt;

&lt;p&gt;另外一点，这个模板实现没有使用左闭右开区间来写，如果改用左闭右开区间，并添加build实现，则得到如下实现（代码有少许简化且更对称更好读）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree_add
{
    struct node
    {
        int sum;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl) * v;
            d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 更新左右儿子
        if (l &amp;lt; tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 统计左右儿子
        int sum = 0;
        if (l &amp;lt; tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid, tr, rson(tp));
        return sum;
    }
    void build(int a[], int alen, int tl, int tr, int tp)
    {
        if (tl + 1 == tr)
        {
            if (tl &amp;lt; alen)
                d[tp].sum = a[tl];
            else
                d[tp].sum = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        build(a, alen, tl, tmid, lson(tp));
        build(a, alen, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
        d[tp].lz_add = 0;
    }
    void build(int a[], int alen)
    {
        build(a, alen, 0, sz, 0);
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r + 1, v, 0, sz, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;进阶模板&#34;&gt;进阶模板&lt;/h2&gt;

&lt;p&gt;如果你需要支持区间整体加上某个数，同时支持区间整体设置为指定数，那么就需要多重懒惰标记，模板可以改写如下（闭区间实现）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    static const int lz_mark = 0x80000000;
    struct node
    {
        int sum;
        int lz_set;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl + 1) * v;
            if (d[tp].lz_set != lz_mark) d[tp].lz_set += v;
            else d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt;= tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    void update_set(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum = (tr - tl + 1) * v; //区间和
            d[tp].lz_set = v;
            d[tp].lz_add = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt;= tmid) update_set(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_set(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        int sum = 0;
        if (l &amp;lt;= tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid + 1, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r, v, 0, sz - 1, 0);
    }
    void update_set(int l, int r, int v)
    {
        update_set(l, r, v, 0, sz - 1, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r, 0, sz - 1, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;左闭右开区间实现（接口为闭区间）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    static const int lz_mark = 0x80000000;
    struct node
    {
        int sum;
        int lz_set;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl) * v;
            if (d[tp].lz_set != lz_mark) d[tp].lz_set += v;
            else d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt; tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    void update_set(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum = (tr - tl) * v; //区间和
            d[tp].lz_set = v;
            d[tp].lz_add = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt; tmid) update_set(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_set(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    ll get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        int sum = 0;
        if (l &amp;lt; tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r + 1, v, 0, sz, 0);
    }
    void update_set(int l, int r, int v)
    {
        update_set(l, r + 1, v, 0, sz, 0);
    }
    ll get_sum(int l, int r)
    {
        return get_sum(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;简易区间最值模板（就是简易得只有查询，如果要支持更新就自己加上）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    struct node
    {
        int max;
        int min;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    int get_max(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].max;
        }
        int tmid = (tl + tr) / 2;
        int ret = INT_MIN;
        if (l &amp;lt; tmid) ret = max(ret, get_max(l, r, tl, tmid, lson(tp)));
        if (r &amp;gt; tmid) ret = max(ret, get_max(l, r, tmid, tr, rson(tp)));
        return ret;
    }
    int get_min(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].min;
        }
        int tmid = (tl + tr) / 2;
        int ret = INT_MAX;
        if (l &amp;lt; tmid) ret = min(ret, get_min(l, r, tl, tmid, lson(tp)));
        if (r &amp;gt; tmid) ret = min(ret, get_min(l, r, tmid, tr, rson(tp)));
        return ret;
    }
    void build(int a[], int alen, int tl, int tr, int tp)
    {
        if (tl + 1 == tr)
        {
            if (tl &amp;lt; alen)
            {
                d[tp].max = a[tl];
                d[tp].min = a[tl];
            }
            else
            {
                d[tp].max = 0;
                d[tp].min = 0;
            }
            return;
        }
        int tmid = (tl + tr) / 2;
        build(a, alen, tl, tmid, lson(tp));
        build(a, alen, tmid, tr, rson(tp));
        d[tp].max = max(d[lson(tp)].max, d[rson(tp)].max);
        d[tp].min = min(d[lson(tp)].min, d[rson(tp)].min);
    }
    void build(int a[], int alen)
    {
        build(a, alen, 0, sz, 0);
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    int get_min(int l, int r)
    {
        return get_min(l, r + 1, 0, sz, 0);
    }
    int get_max(int l, int r)
    {
        return get_max(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;zkw线段树模板&#34;&gt;ZKW线段树模板&lt;/h2&gt;

&lt;p&gt;这是单点修改求区间和的模板，求区间最值稍微改改就好了，如果需要区间修改，那么可以模仿树状数组的办法做差分，或做永久化标记，适应性比递归实现的线段树差一些，优点是常数小，以下实现比前面的大约快30%左右，代码更简单，就不额外解释了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct zkwseg_tree
{
    struct node
    {
        int sum;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int p, int v)
    {
        int i = sz + p;
        while (i)
        {
            d[i].sum += v;
            i &amp;gt;&amp;gt;= 1;
        }
    }
    int get_sum(int l, int r)
    {
        int sum = 0;
        l += sz;
        r += sz + 1;
        for (; l &amp;lt; r; l&amp;gt;&amp;gt;=1, r&amp;gt;&amp;gt;=1)
        {
            if (l &amp;amp; 1)
            {
                sum += d[l++].sum;
            }
            if (r &amp;amp; 1)
            {
                sum += d[--r].sum;
            }
        }
        return sum;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它说明&#34;&gt;其它说明&lt;/h2&gt;

&lt;p&gt;以上模板为了解释简单，有的实现只有&lt;code&gt;update&lt;/code&gt;和&lt;code&gt;get_sum&lt;/code&gt;操作，并没有&lt;code&gt;build&lt;/code&gt;的部分，只使用&lt;code&gt;update&lt;/code&gt;即可完成build的操作，时间复杂度也是一样的。除了维护区间和，也可以维护区间最大最小值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后缀数组</title>
      <link>/post/20191113-suffixarray/</link>
      <pubDate>Wed, 13 Nov 2019 18:26:00 +0800</pubDate>
      <guid>/post/20191113-suffixarray/</guid>
      <description>&lt;p&gt;后缀数组其实概念很好理解，就是给出一个字符串，长度是n，对它所有的n个后缀编号从1到n进行排序，排序后，最小的那个后缀的编号假设是m1，那么&lt;code&gt;sa[1] = m1&lt;/code&gt;，类似地，第二小的是m2的话，&lt;code&gt;sa[2] = m2&lt;/code&gt;，sa这个数组就是我们所需要的后缀数组。根据这个，我们可以直接用sort算出sa，以下为最简单的实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_simple
{
    vector&amp;lt;int&amp;gt; sa;
    int s_size;
    const char* p_s;
    int size() const
    {
        return s_size;
    }
    static bool cmp(const char* x, const char* y)
    {
        return strcmp(x, y) &amp;lt; 0;
    }
    void init(char * str)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;

        sa.resize(n + 1);
        vector&amp;lt; const char* &amp;gt; rp;
        rp.resize(n + 1);

        for (int i = 1; i &amp;lt;= n; ++i)
        {
            rp[i] = p_s + i;
        }
        sort(rp.begin() + 1, rp.end(), cmp);
        for (int i = 1; i &amp;lt;= n; ++i)
        {
            sa[i] = rp[i] - p_s;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个实现的时间复杂度 $O(n^2logn)$&lt;/p&gt;

&lt;p&gt;要注意的一点是下标从1开始。有了这个，可以做点什么呢？例如给你一个串p，求出p在主串s中出现了多少次。那么在有了sa的情况下，因为sa是有序的，问题就变成了二分搜索，分别用&lt;code&gt;lower_bound&lt;/code&gt;和&lt;code&gt;upper_bound&lt;/code&gt;通过sa搜索p，两个相减便得出现次数。&lt;/p&gt;

&lt;h2 id=&#34;rank-数组&#34;&gt;rank 数组&lt;/h2&gt;

&lt;p&gt;光有sa其实还不够用，我们还需要rank数组，&lt;code&gt;rank[m]&lt;/code&gt;的值是p的话，那么表示字符串中编号m的后缀，它的排名是p，即与sa数组是互逆，所以我们可以得到 &lt;code&gt;sa[rank[i]] == rank[sa[i]] == i&lt;/code&gt; ，也就是说通过rank，可以快速判断某两个后缀的大小关系。&lt;/p&gt;

&lt;h2 id=&#34;height-数组&#34;&gt;height 数组&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;height[i]&lt;/code&gt;的值表示的是，&lt;code&gt;sa[i-1]&lt;/code&gt;与&lt;code&gt;sa[i]&lt;/code&gt;这两个后缀的相同前缀长度，特别地，&lt;code&gt;height[1] == 0&lt;/code&gt;，求解height需要用到rank数组和sa数组，以及如下引理&lt;/p&gt;

&lt;p&gt;$$height[rank[i]]\ge height[rank[i-1]]-1$$&lt;/p&gt;

&lt;p&gt;通过以上引理直接暴力实现即可，复杂度 $O(n)$ ，这里不做证明。&lt;/p&gt;

&lt;p&gt;三个数组的完整实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_simple
{
    vector&amp;lt;int&amp;gt; sa, rk, ht;
protected:
    int s_size;
    const char* p_s;
public:
    int size() const
    {
        return s_size;
    }

    static bool cmp(const char* x, const char* y)
    {
        return strcmp(x, y) &amp;lt; 0;
    }

    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;

        sa.resize(n + 1);
        rk.resize(n + 1);
        vector&amp;lt;const char*&amp;gt; rp;
        rp.resize(n + 1);

        for (int i = 1; i &amp;lt;= n; ++i)
        {
            rp[i] = p_s + i;
        }
        sort(rp.begin() + 1, rp.end(), cmp);
        for (int i = 1; i &amp;lt;= n; ++i)
        {
            sa[i] = rp[i] - p_s;
            rk[sa[i]] = i;
        }
        if (h) create_height();
    }
    void create_height()
    {
        ht.resize(s_size + 1);
        for (int i = 1, k = 0; i &amp;lt;= s_size; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[rk[i] - 1] + k])
                ++k;
            ht[rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;应用1-可重叠最长重复子串&#34;&gt;应用1 可重叠最长重复子串&lt;/h2&gt;

&lt;p&gt;这个题目在本博客讲&lt;a href=&#34;../20191028-kmp/&#34;&gt;kmp&lt;/a&gt;部分已经有介绍，例如&lt;code&gt;eabcaefabcabc&lt;/code&gt;，最长重复子串是&lt;code&gt;abca&lt;/code&gt;，长度是4，这里介绍用后缀数组的解法。其实所谓的最长重复子串，就是找到两个后缀，让它们的公共前缀最长，那这就简单了，我们只要在height数组里找最大值就可以了，查找时间 $O(n)$ 。&lt;/p&gt;

&lt;h2 id=&#34;应用2-不同子串的个数&#34;&gt;应用2 不同子串的个数&lt;/h2&gt;

&lt;p&gt;来看这道题 &lt;a href=&#34;https://vjudge.net/problem/SPOJ-DISUBSTR&#34; target=&#34;_blank&#34;&gt;SPOJ-DISUBSTR&lt;/a&gt; ，说的是统计一个字符串里有多少不同的子串。&lt;/p&gt;

&lt;p&gt;这里我们就需要用到height数组，由于它表示的正是和前一个后缀的相同前缀长度，那么我们对任意的后缀&lt;code&gt;sa[i]&lt;/code&gt;，取这个后缀的长度，即&lt;code&gt;len(s)-sa[i]&lt;/code&gt;，减去&lt;code&gt;height[i]&lt;/code&gt;再加上1，即表示&lt;code&gt;sa[i]&lt;/code&gt;这个后缀有多少个前缀与&lt;code&gt;sa[i-1]&lt;/code&gt;不相同，所以我们累加即可。核心代码也就这么几行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int sum_h = 0;
for (int i = 1; i &amp;lt;= sa.size(); ++i)
{
    sum_h += sa.size() - sa.sa[i] - sa.ht[i] + 1;
}
printf(&amp;quot;%d\n&amp;quot;, sum_h);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也许有人会发现问题了，这个题直接用hash实现，才 $O(n^2)$ 的复杂度，这个后缀数组的实现，光是生成就 $O(n^2logn)$ ，不是还更慢吗？单看时间复杂度的确是这样，但事实上后缀数组可以0ms通过，hash实现约400ms左右。&lt;/p&gt;

&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;

&lt;p&gt;直接排序的后缀数组确实过于暴力了，虽然不少题目已经足够AC，但我们还有更好的，这里简要介绍倍增法。假设对字符串&amp;rdquo;ababaabb&amp;rdquo;求后缀数组，那么先对每一个字符做排序，计算出它们的rank，注意相同串的rank结果要相同，结果在下表的&amp;rdquo;排序1&amp;rdquo;，然后我们对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+1&lt;/code&gt;在&amp;rdquo;排序1&amp;rdquo;上的rank组合起来，这个组合的key再做排序，如下表&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;1 1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 2&lt;/td&gt;
&lt;td&gt;2 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上这样得到了所有后缀中，前缀长度为2的排名，接下来，我们步长翻倍，对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+2&lt;/code&gt;在&amp;rdquo;排序2&amp;rdquo;上的rank组合起来再排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;排序2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合2&lt;/td&gt;
&lt;td&gt;2 2&lt;/td&gt;
&lt;td&gt;4 4&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;4 2&lt;/td&gt;
&lt;td&gt;1 5&lt;/td&gt;
&lt;td&gt;2 3&lt;/td&gt;
&lt;td&gt;5 0&lt;/td&gt;
&lt;td&gt;3 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上这样得到了所有后缀中，前缀长度为4的排名，接下来，我们步长翻倍，对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+4&lt;/code&gt;在&amp;rdquo;排序3&amp;rdquo;上的rank组合起来再排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;排序3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合3&lt;/td&gt;
&lt;td&gt;3 1&lt;/td&gt;
&lt;td&gt;7 4&lt;/td&gt;
&lt;td&gt;2 8&lt;/td&gt;
&lt;td&gt;6 5&lt;/td&gt;
&lt;td&gt;1 0&lt;/td&gt;
&lt;td&gt;4 0&lt;/td&gt;
&lt;td&gt;8 0&lt;/td&gt;
&lt;td&gt;5 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至此，再下一轮的步长是8，已经大于等于字符串长度的时候，rank数组便计算完成了。以下是使用此思路的实现代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_2_sort
{
    vector&amp;lt;int&amp;gt; sa, ht;
    int *rk;
protected:
    vector&amp;lt;int&amp;gt; rk1, rk2;
    int s_size;
    int *p_rk, *o_rk;
    const char* p_s;

    struct SA_2_sort_cmp
    {
        int *rk, w;
        SA_2_sort_cmp(int *_rk, int _w) :rk(_rk), w(_w) {}
        bool operator()(int x, int y) const
        {
            return rk[x] == rk[y] ? rk[x + w] &amp;lt; rk[y + w] : rk[x] &amp;lt; rk[y];
        }
    };
public:
    bool cmp(int x, int y, int w)
    {
        return o_rk[x] == o_rk[y] &amp;amp;&amp;amp; o_rk[x + w] == o_rk[y + w];
    }
    int size() const
    {
        return s_size;
    }
    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;
        sa.resize(n + 1);
        rk1.clear(); rk1.resize(n * 2 + 2);
        rk2.clear(); rk2.resize(n * 2 + 2);
        p_rk = &amp;amp;*rk1.begin();
        o_rk = &amp;amp;*rk2.begin();

        for (int i = 1; i &amp;lt;= n; ++i) p_rk[i] = p_s[i];

        for (int w = 1, i, p; w &amp;lt; n; w &amp;lt;&amp;lt;= 1)
        {
            // init sa
            for (int i = 1; i &amp;lt;= n; ++i) sa[i] = i;

            sort(sa.begin() + 1, sa.end(), SA_2_sort_cmp(p_rk, w));

            // write new rank
            for (std::swap(p_rk, o_rk), p = 0, i = 1; i &amp;lt;= n; ++i)
                p_rk[sa[i]] = cmp(sa[i], sa[i - 1], w) ? p : ++p;
        }
        rk = p_rk;
        if (n == 1) sa[1] = rk[1] = 1;
        if (h) create_height();
    }
    void create_height()
    {
        int n = s_size;
        ht.resize(n + 1);
        for (int i = 1, k = 0; i &amp;lt;= n; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[p_rk[i] - 1] + k])
                ++k;
            ht[p_rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上实现的时间复杂度是 $O(nlog^2n)$ ，如果你想要更快，那就用 $O(n)$ 的计数排序吧，便可把整体时间复杂度下降到 $O(nlogn)$&lt;/p&gt;

&lt;h2 id=&#34;再优化&#34;&gt;再优化&lt;/h2&gt;

&lt;p&gt;绝大多数情况下，使用以上方法 $O(nlogn)$ 复杂度已经够用了，但如果你是一个更有追求的人，可以继续学习 $O(n)$ 复杂度建立后缀数组的办法，名字叫做&lt;code&gt;SA-IS&lt;/code&gt;和&lt;code&gt;DC3&lt;/code&gt;，你可以通过搜索以上两个名字得到更具体的介绍，本文就只介绍到这里。&lt;/p&gt;

&lt;h2 id=&#34;o-nlogn-模板&#34;&gt;$O(nlogn)$ 模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_2
{
    vector&amp;lt;int&amp;gt; sa, ht;
    int *rk;
protected:
    vector&amp;lt;int&amp;gt; rk1, rk2;
    int s_size;
    int *p_rk, *o_rk;
    const char* p_s;
public:
    bool cmp(int x, int y, int w)
    {
        return o_rk[x] == o_rk[y] &amp;amp;&amp;amp; o_rk[x + w] == o_rk[y + w];
    }
    int size() const
    {
        return s_size;
    }
    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;
        int cnt_size = max(256, n) + 1;
        vector&amp;lt;int&amp;gt; vid, vpx, vcnt;
        sa.resize(n + 1);
        rk1.clear(); rk1.resize(n * 2 + 2);
        rk2.clear(); rk2.resize(n * 2 + 2);
        vid.resize(n + 1); vpx.resize(n + 1);
        vcnt.resize(cnt_size);
        int* id = &amp;amp;*vid.begin();
        int* px = &amp;amp;*vpx.begin();
        int* cnt = &amp;amp;*vcnt.begin();
        p_rk = &amp;amp;*rk1.begin();
        o_rk = &amp;amp;*rk2.begin();

        int m = 128, p = 0;
        for (int i = 1; i &amp;lt;= n; ++i) ++cnt[p_rk[i] = p_s[i]];
        for (int i = 1; i &amp;lt;= m; ++i) cnt[i] += cnt[i - 1];
        for (int i = n; i &amp;gt;= 1; --i) sa[cnt[p_rk[i]]--] = i;

        for (int w = 1, i; w &amp;lt; n; w &amp;lt;&amp;lt;= 1, m = p)
        {
            // init id
            for (p = 0, i = n; i &amp;gt; n - w; --i)
                id[++p] = i;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w) id[++p] = sa[i] - w;

            sort(cnt, id, px, n, m);

            // write new rank
            for (std::swap(p_rk, o_rk), p = 0, i = 1; i &amp;lt;= n; ++i)
                p_rk[sa[i]] = cmp(sa[i], sa[i - 1], w) ? p : ++p;
        }
        rk = p_rk;
        if (n == 1) sa[1] = rk[1] = 1;
        if (h) create_height();
    }
    void sort(int* cnt, int* id, int* px, int n, int m)
    {
        memset(cnt, 0, sizeof(int) * (m + 1));
        for (int i = 1; i &amp;lt;= n; ++i)
            ++cnt[px[i] = p_rk[id[i]]];
        for (int i = 1; i &amp;lt;= m; ++i)
            cnt[i] += cnt[i - 1];
        for (int i = n; i &amp;gt;= 1; --i)
            sa[cnt[px[i]]--] = id[i];
    }
    void create_height()
    {
        int n = s_size;
        ht.resize(n + 1);
        for (int i = 1, k = 0; i &amp;lt;= n; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[p_rk[i] - 1] + k])
                ++k;
            ht[p_rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>树状数组</title>
      <link>/post/20191111-fenwicktree/</link>
      <pubDate>Mon, 11 Nov 2019 13:32:00 +0800</pubDate>
      <guid>/post/20191111-fenwicktree/</guid>
      <description>&lt;p&gt;树状数组，是一个用于在近似 $O(logn)$ 时间内动态修改以及查询前缀和的数据结构，以下我们先来看以下树关系表格&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里表达的是，16的子节点有8, 12, 14, 15&lt;/p&gt;

&lt;p&gt;8的子节点有4, 6, 7&lt;/p&gt;

&lt;p&gt;12的子节点有10, 11，即夹在12与它的同级节点8之间&lt;/p&gt;

&lt;p&gt;我们把数值与它的二进制一起形象化画出下图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
2,0010--&amp;gt;1,0001
4,0100--&amp;gt;3,0011
4,0100--&amp;gt;2,0010
6,0110--&amp;gt;5,0101
8,1000--&amp;gt;7,0111
8,1000--&amp;gt;6,0110
8,1000--&amp;gt;4,0100
10,1010--&amp;gt;9,1001
12,1100--&amp;gt;11,1011
12,1100--&amp;gt;10,1010
14,1110--&amp;gt;13,1101
16,10000--&amp;gt;8,1000
16,10000--&amp;gt;12,1100
16,10000--&amp;gt;14,1110
16,10000--&amp;gt;15,1111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样构造的原理是运用到一个二进制运算技巧，假设一个节点x，那么它的父节点就是&lt;code&gt;x + (x &amp;amp; -x)&lt;/code&gt;，其中，&lt;code&gt;x &amp;amp; -x&lt;/code&gt;是去掉右起第一个1的左边的1，例如x如果是6，二进制是110，只保留最右边的1结果就是10了，所以6的父节点就是&lt;code&gt;6+2=8&lt;/code&gt;，更多的可以参考这篇&lt;a href=&#34;../post/20191012-binary-skill/&#34;&gt;二进制技巧&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;前缀和&#34;&gt;前缀和&lt;/h2&gt;

&lt;p&gt;给一个数组a，如果我们需要计算前n个元素的和 $\sum_{i=1}^n{a[i]}$ ，直接累加是很慢的，这里我们用树状数组，我们规定，每个节点保存的值，是它和它的子节点的和，我们用数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt; 画个表格，注意数组下标从1开始。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;那有了这个表，我们要是求出前4个数的和，直接看第4列是30，答案就出来了，因为它上面的数就是它和它所有子结点的和。但如果是别的数呢，例如要求前7个数的和，就不能光看第7列了，需要把第4列、第6列和第7列的3个数相加，即&lt;code&gt;30+9+3=42&lt;/code&gt;就是前7个数的和。注意到这三列其实就是三个同级节点，而且我们通过7这个数本身可以轻松计算前两列的数，计算的方法是&lt;code&gt;x - (x &amp;amp; -x)&lt;/code&gt;，把&lt;code&gt;x=7&lt;/code&gt;代入，得到6，再把6代入，得到4，再把4代入，得到0，0就结束了，而在这个迭代的过程里，就知道我们应该把4,6,7三列的数相加。&lt;/p&gt;

&lt;p&gt;再换一个数，例如11呢，把&lt;code&gt;x=11&lt;/code&gt;代入，得到10，再把10代入，得到8，再把8代入，得到0，所以我们应该把8,10,11三列的数加起来，即&lt;code&gt;44+1+6=51&lt;/code&gt;就是前11个数的和。&lt;/p&gt;

&lt;p&gt;把以上过程写成函数，就是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int sum(int fwtree[], int x)
{
    int r = 0;
    while (x &amp;gt; 0)
    {
        r += fwtree[x];
        x -= x&amp;amp;-x;
    }
    return r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，这段代码的时间复杂度近似是 $O(logx)$&lt;/p&gt;

&lt;h2 id=&#34;动态维护&#34;&gt;动态维护&lt;/h2&gt;

&lt;p&gt;还是前面的数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt; ，现在假如已经计算好了树状数组，但我们需要对第6个元素，让它减少6，怎么操作呢，其实很简单，根据定义，在子节点修改的时候，让它的所有父节点都做相同的修改，那么6的父节点分别有8,16，所以我们对第6,8,16列都一起减少6，得到以下新表格&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这样就维护完成了，所以咱们的实现代码也非常的简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void add(int fwtree[], int treesize, int x, int add)
{
    while (x &amp;lt;= treesize)
    {
        fwtree[x] += add;
        x += x&amp;amp;-x;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;区间和&#34;&gt;区间和&lt;/h2&gt;

&lt;p&gt;我们之所以需要前缀和，就是为了能快速求区间和。例如我们需要求出数组第i个到第j个元素的和，那么我们用&lt;code&gt;sum(x)&lt;/code&gt;表示前x个元素的和，那么可以转化为求&lt;code&gt;sum(j) - sum(i-1)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;区间操作-单点查询&#34;&gt;区间操作+单点查询&lt;/h2&gt;

&lt;p&gt;因为树状数组的修改是单点修改，即每次只能修改一个数，那么现在我们提出一个新问题，如果我们需要多次做区间操作（整个区间的数同时加上y），然后查询数组里面指定第k个元素是什么，例如这个题&lt;a href=&#34;https://loj.ac/problem/131&#34; target=&#34;_blank&#34;&gt;loj131&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于树状数组不能快速做区间操作，我们用到另一个技巧叫做差分法，我们对数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt;求相邻元素的差，得到新的数组&lt;/p&gt;

&lt;p&gt;&lt;code&gt;9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样做了后，如果我们要求出原来第k个元素，那么就是求前k个元素之和，所以如果第i个元素加上a，那么相当于i后面所有元素都加上a。&lt;/p&gt;

&lt;p&gt;所以，这时候的区间操作，就会变成单点操作，例如我们要对区间&lt;code&gt;[i,j]&lt;/code&gt;所有的元素加上a，那么在差分了以后，其实就是对第i个元素加上a，再对第j+1个元素减去a。&lt;/p&gt;

&lt;h2 id=&#34;区间操作-区间和&#34;&gt;区间操作+区间和&lt;/h2&gt;

&lt;p&gt;如果我们既要做区间操作，同时还要求区间和怎么办，为了支持区间操作，我们仍然先做差分，然后接下来就是让人头痛的数学推导，假设数组a是原数组，b是a的差分数组，由前缀和的定义，我们求前n个元素的和，即&lt;/p&gt;

&lt;p&gt;$$ \sum_{i=1}^{n} a_i $$&lt;/p&gt;

&lt;p&gt;展开为b数组表达&lt;/p&gt;

&lt;p&gt;$$ = \sum_{i=1}^n{} \sum_{j=1}^i b_j $$&lt;/p&gt;

&lt;p&gt;展开，合并同类项&lt;/p&gt;

&lt;p&gt;$$ = \sum_{i=1}^n b_i\times(n-i+1) $$&lt;/p&gt;

&lt;p&gt;$$ = (n+1)\times\sum_{i=1}^n b_i - \sum_{i=1}^n b_i\times i $$&lt;/p&gt;

&lt;p&gt;那么，我们再定义一个c数组，满足&lt;code&gt;c[i] == b[i] * i&lt;/code&gt;，然后我们再分别对b和c维护一个树状数组，定义&lt;code&gt;sum(b,x)&lt;/code&gt;表示数组b前x个元素的和，&lt;code&gt;sum(c,x)&lt;/code&gt;表示数组c前x个元素的和，那么我们便可以通过计算&lt;code&gt;(x + 1) * sum(b, x) - sum(c, x)&lt;/code&gt;求出数组a的前缀和。&lt;/p&gt;

&lt;p&gt;习题：&lt;a href=&#34;https://loj.ac/problem/132&#34; target=&#34;_blank&#34;&gt;loj132&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;拓展&#34;&gt;拓展&lt;/h2&gt;

&lt;p&gt;树状数组还有一些别的技巧，一是 $O(n)$ 建立，通过已知数组a在 $O(n)$ 时间生成对应的树状数组（直接add来操作是nlogn），这个在这里不做介绍。&lt;/p&gt;

&lt;p&gt;还有权值树状数组求第k小元素。所谓权值树状数组，就是用&lt;code&gt;a[i] = v&lt;/code&gt;来表示数值i重复出现了v次，所以v是非负数，那么这个数组的前缀和就是递增的，即存在二分。然后对数组a维护的树状数组直接二分的话是 $O(lognlogn)$ ，但我们可以运用树状数组的特性优化到 $O(logn)$ ，以下是实现代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int kth(int fwtree[], int size, int k)
{
    int cnt = 0, ret = 0;
    for (int i = (int)(log(size + 0.1) / log(2)); ~i; --i)
    {
        ret += 1 &amp;lt;&amp;lt; i;
        if (ret &amp;gt;= size || cnt + fwtree[ret] &amp;gt;= k)
            ret -= 1 &amp;lt;&amp;lt; i;
        else
            cnt += fwtree[ret];
    }
    return ret + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;权值树状数组还有一个应用，就是用来求&lt;strong&gt;逆序数&lt;/strong&gt;，先对原数组排序求出每个元素的rank，转化为长度n，元素为1~n的一个排列，之后使用权值树状数组，就可以轻松求出在&lt;code&gt;a[1]&lt;/code&gt;到&lt;code&gt;a[i-1]&lt;/code&gt;有多少个元素比&lt;code&gt;a[i]&lt;/code&gt;要大，计算&lt;code&gt;sum(n) - sum(a[i])&lt;/code&gt;便知，把结果累加就是逆序数。&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;p&gt;区间修改+区间求和模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;vector&amp;gt;
typedef long long ll;


struct fwtree_range
{
    std::vector&amp;lt;int&amp;gt; ta;
    std::vector&amp;lt;ll&amp;gt; tb;
    int sz;
    void init(int size)
    {
        ta.clear(); ta.resize(size + 1);
        tb.clear(); tb.resize(size + 1);
        sz = size;
    }
    void add(int x, int a)
    {
        ll v = a * (ll)x;
        for (; x &amp;lt;= sz; x += x&amp;amp;-x)
        {
            ta[x] += a;
            tb[x] += v;
        }
    }
    template &amp;lt;class T&amp;gt;
    ll sum_t(T&amp;amp; t, int x)
    {
        ll r = 0;
        for (; x &amp;gt; 0; x -= x&amp;amp;-x)
            r += t[x];
        return r;
    }
    ll sum(int x)
    {
        return (x + 1) * sum_t(ta, x) - sum_t(tb, x);
    }
    void range_add(int l, int r, int a)
    {
        add(l, a);
        add(r + 1, -a);
    }
    ll range_sum(int l, int r)
    {
        return sum(r) - sum(l - 1);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法，调用&lt;code&gt;init&lt;/code&gt;初始化大小后，使用&lt;code&gt;range_add&lt;/code&gt;及&lt;code&gt;range_sum&lt;/code&gt;做区间修改及区间和查询就行了，当然它也支持单点修改和单点查询，你令区间&lt;code&gt;l == r&lt;/code&gt;就行了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick sort(快速排序)杂谈 3</title>
      <link>/post/20191019-qsort-talk-3/</link>
      <pubDate>Mon, 21 Oct 2019 17:32:00 +0800</pubDate>
      <guid>/post/20191019-qsort-talk-3/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;../20191007-qsort-talk-2/&#34;&gt;上一篇&lt;/a&gt;我们介绍了快排的各种优化，最后得到了一个超越VS的STL std::sort实现的版本，这回我们来讲讲怎么折磨gcc的std::sort。&lt;/p&gt;

&lt;h2 id=&#34;gcc的实现&#34;&gt;GCC的实现&lt;/h2&gt;

&lt;p&gt;这个我直接给个&lt;a href=&#34;https://github.com/gcc-mirror/gcc/blob/gcc-8-branch/libstdc++-v3/include/bits/stl_algo.h#L1896&#34; target=&#34;_blank&#34;&gt;github来源&lt;/a&gt;，链接里是gcc8分支的实现源码，我已经通过链接标记出第1896行，那里就是&lt;code&gt;__unguarded_partition&lt;/code&gt;函数的实现，就是快排的划分函数，而在后面几个函数就是快排的本体了。为了避免它代码更新导致位置变化，我把相关代码复制过来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  template&amp;lt;typename _Iterator, typename _Compare&amp;gt;
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
                           _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
        {
          if (__comp(__b, __c))
            std::iter_swap(__result, __b);
          else if (__comp(__a, __c))
            std::iter_swap(__result, __c);
          else
            std::iter_swap(__result, __a);
        }
      else if (__comp(__a, __c))
        std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
        std::iter_swap(__result, __c);
      else
        std::iter_swap(__result, __b);
    }

  /// This is a helper function...
  template&amp;lt;typename _RandomAccessIterator, typename _Compare&amp;gt;
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
                          _RandomAccessIterator __last,
                          _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
        {
          while (__comp(__first, __pivot))
            ++__first;
          --__last;
          while (__comp(__pivot, __last))
            --__last;
          if (!(__first &amp;lt; __last))
            return __first;
          std::iter_swap(__first, __last);
          ++__first;
        }
    }

  /// This is a helper function...
  template&amp;lt;typename _RandomAccessIterator, typename _Compare&amp;gt;
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
                                _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
                                  __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template&amp;lt;typename _RandomAccessIterator, typename _Compare&amp;gt;
    inline void
    __partial_sort(_RandomAccessIterator __first,
                   _RandomAccessIterator __middle,
                   _RandomAccessIterator __last,
                   _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }

  /// This is a helper function for the sort routine.
  template&amp;lt;typename _RandomAccessIterator, typename _Size, typename _Compare&amp;gt;
    void
    __introsort_loop(_RandomAccessIterator __first,
                     _RandomAccessIterator __last,
                     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first &amp;gt; int(_S_threshold))
        {
          if (__depth_limit == 0)
            {
              std::__partial_sort(__first, __last, __last, __comp);
              return;
            }
          --__depth_limit;
          _RandomAccessIterator __cut =
            std::__unguarded_partition_pivot(__first, __last, __comp);
          std::__introsort_loop(__cut, __last, __depth_limit, __comp);
          __last = __cut;
        }
    }

  // sort

  template&amp;lt;typename _RandomAccessIterator, typename _Compare&amp;gt;
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
           _Compare __comp)
    {
      if (__first != __last)
        {
          std::__introsort_loop(__first, __last,
                                std::__lg(__last - __first) * 2,
                                __comp);
          std::__final_insertion_sort(__first, __last, __comp);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;吐槽一句，连gcc源代码也把tab和空格混合使用我也是醉了，源代码的tab在这里已替换为空格以保证版面一致&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;这里我们并不需要关注太多东西，在上一篇我们讲到过，快排最大的弱点正在于它的划分元素选择上，所以我们只需要看这个函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  template&amp;lt;typename _RandomAccessIterator, typename _Compare&amp;gt;
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
                                _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
                                  __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个函数从&lt;code&gt;__first + 1&lt;/code&gt;, &lt;code&gt;__mid&lt;/code&gt;, &lt;code&gt;__last - 1&lt;/code&gt;三个数里面，取一个中位数交换到&lt;code&gt;__first&lt;/code&gt;的位置，知道这个就能想办法生成对抗数据了。为了让它运行缓慢，那么只要让它这个函数每次都选到&lt;strong&gt;第二小&lt;/strong&gt;的元素放最左边，这样每次调用&lt;code&gt;__unguarded_partition&lt;/code&gt;的结果，就是把划分点划分到了&lt;code&gt;__first + 2&lt;/code&gt;的位置上，即每次只划分两个元素，这就是它的最坏情况。&lt;/p&gt;

&lt;p&gt;构造这个东西需要一些技巧，我们要模拟std::sort的过程，但为了复杂性降低，我们令最右边元素值最大，那么中位数必定在&lt;code&gt;__first + 1&lt;/code&gt;与&lt;code&gt;__mid&lt;/code&gt;中选出，这样在partition过程中就能保证不会动到最后的元素，只会在这两个之间换来换去。然后我们只模拟出交换的结果，而不必去遍历，否则你生成的复杂度就$O(n^2)$了。&lt;/p&gt;

&lt;p&gt;另外，还要注意的一点是，它使用的是&lt;code&gt;intro sort&lt;/code&gt;来实现，也就是说深度到一定程度后，会转化为堆排序，而堆排序的最坏情况是乱序数组，我们不必一直这么做，否则堆排序时间并不是最长的，我们只要弄深度150的就够用了。我们来看看生成的数据在8000000长度下，使用mingw64-gcc8编译参数-O3的实测结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;evil&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;intro_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;510&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;510&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;282&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;473&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;487&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;480&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::heap&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;584&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;369&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1436&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1499&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;962&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;第4、5列是随机打乱的数据，作为对比组，而evil列就是生成的对抗数据，我把&lt;code&gt;heap sort&lt;/code&gt;及前一篇的&lt;code&gt;intro_sort&lt;/code&gt;实现放上来做比较，可以看出在这组数据下，&lt;code&gt;std::sort&lt;/code&gt;必然地比堆排序还要慢，是乱序数据的3.5倍左右，当然这个时间完全取决于堆排序的时间。&lt;/p&gt;

&lt;p&gt;附上生成代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct save_index
{
    int val;
    int index;

    save_index(int i = 0, int v = -1)
        : val(v)
        , index(i)
    {}
    void swap(save_pos&amp;amp; p)
    {
        int t = p.val;
        p.val = val;
        val = t;
    }
    bool operator &amp;lt; (const save_index&amp;amp; p) const
    {
        return index &amp;lt; p.index;
    }
};

void qsort_sim_gcc(save_index * beg, save_index * end, int max_round)
{
    int cur_num = 0;
    if ((end-1)-&amp;gt;val == -1)
    {
        (end - 1)-&amp;gt;val = (end - beg) * 2;
    }
    while (beg + 1 &amp;lt; end &amp;amp;&amp;amp; --max_round &amp;gt; 0)
    {
        save_index *l = beg + 1, *r = end - 1, *m = beg + (end - beg) / 2;

        if (l-&amp;gt;val == -1)
            l-&amp;gt;val = ++cur_num;
        if (r-&amp;gt;val == -1)
            r-&amp;gt;val = ++cur_num;
        if (m-&amp;gt;val == -1)
            m-&amp;gt;val = ++cur_num;

        if (l-&amp;gt;val &amp;gt; m-&amp;gt;val)
        {
            if (m-&amp;gt;val &amp;gt; r-&amp;gt;val)
                std::swap(*beg, *m);
            else if (l-&amp;gt;val &amp;gt; r-&amp;gt;val)
                std::swap(*beg, *r);
            else
                std::swap(*beg, *l);
        }
        else
        {
            if (m-&amp;gt;val &amp;lt; r-&amp;gt;val)
                std::swap(*beg, *m);
            else if (l-&amp;gt;val &amp;gt; r-&amp;gt;val)
                std::swap(*beg, *l);
            else
                std::swap(*beg, *r);
        }
        if (l-&amp;gt;val &amp;lt; beg-&amp;gt;val &amp;amp;&amp;amp; l-&amp;gt;val != -1)
            ;
        else if (m-&amp;gt;val &amp;lt; beg-&amp;gt;val &amp;amp;&amp;amp; m-&amp;gt;val != -1)
            std::swap(*l, *m);
        beg += 2;
    }
}

void anti_qsort_gen_gcc(std::vector&amp;lt;save_index&amp;gt;&amp;amp; vec, size_t len, int max_round)
{
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        vec.push_back(save_index((int)i));
    }
    qsort_sim_gcc(&amp;amp;*vec.begin(), &amp;amp;*vec.begin() + len, max_round);
    int cnt = 0;
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        if (vec[i].val == -1)
            ++cnt;
    }
    std::vector&amp;lt;int&amp;gt; val_list(cnt);
    for (int i = 0; i &amp;lt; cnt; ++i)
    {
        val_list[i] = i + len - cnt;
    }
    // 以下 random_shuffle 实现需要自己实现，如果你用的是mingw
    // 不能使用std::random_shuffle，注意
    random_shuffle(val_list.begin(), val_list.end());
    for (int i = 0, j = 0; i &amp;lt; len; ++i)
    {
        if (vec[i].val == -1)
        {
            vec[i].val = val_list[j++];
        }
    }
    std::sort(vec.begin(), vec.end());
}

void anti_qsort_gen_gcc(sort_element_t arr[], size_t len)
{
    std::vector&amp;lt;save_index&amp;gt; vec;
    anti_qsort_gen_gcc(vec, len, 150);
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        arr[i] = vec[i].val;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中注释的random_shuffle问题参见&lt;a href=&#34;../20191006-mingw-bug/&#34;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后总结，老实加个rand比啥都强，至少大大增加构造evil数据的难度，也大大降低遇到最坏情况的可能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick sort(快速排序)杂谈 2</title>
      <link>/post/20191019-qsort-talk-2/</link>
      <pubDate>Sat, 19 Oct 2019 00:57:00 +0800</pubDate>
      <guid>/post/20191019-qsort-talk-2/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;../20191007-qsort-talk-1/&#34;&gt;上一篇&lt;/a&gt;我们介绍了四种不同的划分算法，现在我们来针对&lt;a href=&#34;../20191007-qsort-talk-1/#3-hoare-partition-scheme&#34;&gt;Hoare partition scheme&lt;/a&gt;来讲解一些优化和注意的问题。&lt;/p&gt;

&lt;h2 id=&#34;最坏时间复杂度的优化&#34;&gt;最坏时间复杂度的优化&lt;/h2&gt;

&lt;p&gt;在前一篇的示例代码里面，只是最简单地选择的最开头或最后面的元素作为划分，这对于乱序的数据还好，对于有序的数据这么做，时间复杂度就直接变成$O(n^2)$了，那么怎么解决？第一个要解决的反而不是划分元素的选择上，而是改成&lt;code&gt;intro sort&lt;/code&gt;，记录递归深度或类似的办法，到达限制条件的时候改而使用堆排序，这属于混合排序，先让排序的最坏时间复杂度降下来是第一要务。所以可以改写出以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* intro_sort_partition(sort_element_t * beg, sort_element_t * end)
{
    sort_element_t *l = beg, *r = end - 1;
    sort_element_t pivot = *r;
    while (1)
    {
        while (l &amp;lt; r &amp;amp;&amp;amp; *l &amp;lt; pivot)
            ++l;
        while (l &amp;lt; r &amp;amp;&amp;amp; !(*r &amp;lt; pivot))
            --r;
        if (l &amp;gt;= r)
            break;
        sort_element_swap(l++, r);
    }
    sort_element_swap(l, end - 1);
    return l;
}

void intro_sort_recursive(sort_element_t * beg, sort_element_t * end, int depth)
{
    if (end - beg &amp;lt;= 1)
        return;

    if (depth &amp;lt;= 0)
    {
        heap_sort(beg, end);
        return;
    }

    sort_element_t *p = intro_sort_partition(beg, end);

    intro_sort_recursive(beg, p, depth - 1);
    intro_sort_recursive(p + 1, end, depth - 1);
}

void intro_sort(sort_element_t * beg, sort_element_t * end)
{
    int depth = (int)(log(end - beg) * 2.5);
    intro_sort_recursive(beg, end, depth);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时，这份代码使用的分割结果是&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;左&lt;/th&gt;
&lt;th&gt;中&lt;/th&gt;
&lt;th&gt;右&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至于为什么选择这种划分结果，与后面的优化有关系。&lt;/p&gt;

&lt;h2 id=&#34;划分元素的选择&#34;&gt;划分元素的选择&lt;/h2&gt;

&lt;p&gt;好，我们从这个代码开始重新谈一下分割元素的选取，网上常见有以下方案：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;固定选择最开头或最后一个&lt;/li&gt;
&lt;li&gt;固定选择中间的元素&lt;/li&gt;
&lt;li&gt;随机选择元素&lt;/li&gt;
&lt;li&gt;在开头、中间、末尾固定三个数里选择一个中位数&lt;/li&gt;
&lt;li&gt;在更多的数里面找中位数，同样是固定选择&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，我们能显然地排除第一个，它对已排序或接近排序完成的数据效率特别低，所以，接下来我们的思路就是分别针对这些选择方案看看有哪些情况让它们特别低效。&lt;/p&gt;

&lt;p&gt;那么按这个思路，我样再来考虑一下，如果要排序的数据重复元素特别的多，甚至于所有元素都相等呢？这时候你会发现不管哪种选取方案都没有用，都会陷入最坏情况，所以我们接下来在继续研究分割元素的选取之前，先考虑重复元素的问题。&lt;/p&gt;

&lt;h2 id=&#34;重复元素的过滤&#34;&gt;重复元素的过滤&lt;/h2&gt;

&lt;p&gt;之所以分割方式使用上文那种，为的就是能更方便地过滤重复元素，大于等于分割元素的，都一定在分割位置的右边，所以&lt;code&gt;intro_sort_recursive&lt;/code&gt;函数可以这样改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void intro_sort_recursive(sort_element_t * beg, sort_element_t * end, int depth)
{
    if (end - beg &amp;lt;= 1)
        return;

    if (depth &amp;lt;= 0)
    {
        heap_sort(beg, end);
        return;
    }

    sort_element_t *p = intro_sort_partition(beg, end);

    intro_sort_recursive(beg, p, depth - 1);
    for (++p; p &amp;lt; end &amp;amp;&amp;amp; !(p[-1] &amp;lt; *p || *p &amp;lt; p[-1]); )
        ++p;
    intro_sort_recursive(p, end, depth - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;!(p[-1] &amp;lt; *p || *p &amp;lt; p[-1])&lt;/code&gt;就是判断&lt;code&gt;p[-1] == *p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样修改后，在所有元素相等的情况下，时间复杂度能达到$O(n)$&lt;/p&gt;

&lt;h2 id=&#34;再次考虑划分元素的选择&#34;&gt;再次考虑划分元素的选择&lt;/h2&gt;

&lt;p&gt;这次我们把方案一个个来列举优缺点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;固定选择中间的元素，速度快，对有序或逆序的数据分割效率最高，但在中间附近元素都是数据里最大的数据的时候，即遇到最坏情况，会快速退化成堆排序&lt;/li&gt;
&lt;li&gt;在开头、中间、末尾固定三个数里选择一个中位数，这个是也gcc的STL实现，但能构造出让它遇到最坏情况的数据，比乱序数据慢4倍甚至更多&lt;/li&gt;
&lt;li&gt;在更多的数里面找中位数，同样是固定选择，VS的STL实现就是在9个数里面取，但同样能构造出让它遇到最坏情况的数据，比乱序数据慢4倍甚至更多&lt;/li&gt;
&lt;li&gt;随机选择元素，遇到最坏情况机率极低，但对于有序或逆序的数据时间比前三种都会慢一些&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;事实上，任何的固定选取方案理论上都能构造出固定的使其遇到最坏的情况，而我们的目标当然是让它减少遇到的机率，所以我推荐增加随机选择在里面，但单纯的随机选择虽然并不太优秀，但已足够实用，而且我们并不需要真的搞什么复杂的随机数，所以我们先来实现这个：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* intro_sort_partition(sort_element_t * beg, sort_element_t * end)
{
    static int s_rnd = 0x123456;
    sort_element_t *l = beg, *r = end - 1;
    sort_element_swap(r, l + (++s_rnd % (end - beg)));
    sort_element_t pivot = *r;
    while (1)
    {
        while (l &amp;lt; r &amp;amp;&amp;amp; *l &amp;lt; pivot)
            ++l;
        while (l &amp;lt; r &amp;amp;&amp;amp; !(*r &amp;lt; pivot))
            --r;
        if (l &amp;gt;= r)
            break;
        sort_element_swap(l++, r);
    }
    sort_element_swap(l, end - 1);
    return l;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要一个静态的计数器作为随机数其实就足够了，把选中的元素交换到最右边即可。&lt;/p&gt;

&lt;p&gt;那我们还是要考虑优化的话怎么弄呢？那我们结合着来，在三个数里取中位数，不过还要带上随机，代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;inline void make_mid_pivot(sort_element_t* l, sort_element_t* mid, sort_element_t* r)
{
    if (*r &amp;lt; *mid)
    {
        if (*mid &amp;lt; *l)
            return;
        sort_element_swap(mid, r);
    }
    if (*mid &amp;lt; *l)
    {
        sort_element_swap(mid, l);
        if (*r &amp;lt; *mid)
            sort_element_swap(mid, r);
    }
}

sort_element_t* intro_sort_partition(sort_element_t * beg, sort_element_t * end)
{
    static int s_rnd = 0x123456;
    sort_element_t *l = beg, *r = end - 1;
    int half = (end - beg) / 2;
    make_mid_pivot(l + s_rnd % half, l + half, r - s_rnd % half);
    ++s_rnd;
    sort_element_swap(r, l + half);
    sort_element_t pivot = *r;
    while (1)
    {
        while (l &amp;lt; r &amp;amp;&amp;amp; *l &amp;lt; pivot)
            ++l;
        while (l &amp;lt; r &amp;amp;&amp;amp; !(*r &amp;lt; pivot))
            --r;
        if (l &amp;gt;= r)
            break;
        sort_element_swap(l++, r);
    }
    sort_element_swap(l, end - 1);
    return l;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这个阶段，这个实现已经能和VS版本的std::sort平起平坐了，接下我们就要超越它&lt;/p&gt;

&lt;h2 id=&#34;小数据优化&#34;&gt;小数据优化&lt;/h2&gt;

&lt;p&gt;当需要排序的数据长度较小的时候，快速排序其实并不快，我们改用插入排序，在16个元素或以下的时候使用。修改的那部分代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void intro_sort_recursive(sort_element_t * beg, sort_element_t * end, int depth)
{
    if (end - beg &amp;lt;= 16)
    {
        insert_sort(beg, end);
        return;
    }

    if (depth &amp;lt;= 0)
    {
        heap_sort(beg, end);
        return;
    }

    sort_element_t *p = intro_sort_partition(beg, end);

    intro_sort_recursive(beg, p, depth - 1);
    for (++p; p &amp;lt; end &amp;amp;&amp;amp; !(p[-1] &amp;lt; *p || *p &amp;lt; p[-1]); )
        ++p;
    intro_sort_recursive(p, end, depth - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，已经能比VS的std::sort快了&lt;/p&gt;

&lt;h2 id=&#34;运行测试&#34;&gt;运行测试&lt;/h2&gt;

&lt;p&gt;我们来看在VS2005下对4500000个int排序的测试结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;intro_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;282&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;281&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;269&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;116&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;327&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;331&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;317&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;139&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;再看mingw64-gcc9下使用&lt;code&gt;-O3&lt;/code&gt;参数编译，对4500000个int排序的测试结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;intro_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;274&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;281&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;266&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;118&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;248&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以看到几乎在所有的测试数据里都比VS的实现快。不过尽管这个比VS的实现快，但比起gcc的实现还是稍差一点点，但已经足够好。&lt;/p&gt;

&lt;p&gt;本篇就介绍到这里了，最后把优化后的完整代码给出，更多优化请看下一篇文章&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;inline void make_mid_pivot(sort_element_t* l, sort_element_t* mid, sort_element_t* r)
{
    if (*r &amp;lt; *mid)
    {
        if (*mid &amp;lt; *l)
        {
            return;
        }
        sort_element_swap(mid, r);
    }
    if (*mid &amp;lt; *l)
    {
        sort_element_swap(mid, l);
        if (*r &amp;lt; *mid)
            sort_element_swap(mid, r);
    }
}

sort_element_t* intro_sort_partition(sort_element_t * beg, sort_element_t * end)
{
    static int s_rnd = 0x123456;
    sort_element_t *l = beg, *r = end - 1;
    int half = (end - beg) / 2;
    make_mid_pivot(l + s_rnd % half, l + half, r - s_rnd % half);
    ++s_rnd;
    sort_element_swap(r, l + half);
    sort_element_t pivot = *r;
    while (1)
    {
        while (l &amp;lt; r &amp;amp;&amp;amp; *l &amp;lt; pivot)
            ++l;
        while (l &amp;lt; r &amp;amp;&amp;amp; !(*r &amp;lt; pivot))
            --r;
        if (l &amp;gt;= r)
            break;
        sort_element_swap(l++, r);
    }
    sort_element_swap(l, end - 1);
    return l;
}

void intro_sort_recursive(sort_element_t * beg, sort_element_t * end, int depth)
{
    if (end - beg &amp;lt;= 16)
    {
        insert_sort(beg, end);
        return;
    }

    if (depth &amp;lt;= 0)
    {
        heap_sort(beg, end);
        return;
    }

    sort_element_t *p = intro_sort_partition(beg, end);

    intro_sort_recursive(beg, p, depth - 1);
    for (++p; p &amp;lt; end &amp;amp;&amp;amp; !(p[-1] &amp;lt; *p || *p &amp;lt; p[-1]); )
        ++p;
    intro_sort_recursive(p, end, depth - 1);
}

void intro_sort(sort_element_t * beg, sort_element_t * end)
{
    int depth = (int)(log(end - beg) * 2.5);
    intro_sort_recursive(beg, end, depth);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>smooth sort与weakheap sort实现</title>
      <link>/post/20191017-weakheapsort/</link>
      <pubDate>Thu, 17 Oct 2019 17:14:00 +0800</pubDate>
      <guid>/post/20191017-weakheapsort/</guid>
      <description>&lt;p&gt;本篇补充&lt;code&gt;smooth sort&lt;/code&gt;和&lt;code&gt;weakheap sort&lt;/code&gt;，不打算做太多介绍，&lt;del&gt;因为自己太菜不会讲，&lt;/del&gt;只作为笔记来记录一下实现代码。&lt;code&gt;smooth sort&lt;/code&gt;在接近排序完成的情况下的动态图&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Smoothsort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a5/Smoothsort.gif&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;smooth-sort&#34;&gt;smooth sort&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// http://www.keithschwarz.com/smoothsort/
static const unsigned int leonardo[] =
{
   1, 1, 3, 5, 9, 15, 25, 41, 67, 109, 177, 287, 465, 753, 1219, 1973,
   3193, 5167, 8361, 13529, 21891, 35421, 57313, 92735, 150049, 242785,
   392835, 635621, 1028457, 1664079, 2692537, 4356617, 7049155, 11405773,
   18454929, 29860703, 48315633, 78176337, 126491971, 204668309, 331160281,
   535828591, 866988873, 1402817465, 2269806339u, 3672623805u,
};

template&amp;lt;typename RandomAccessIterator, class Comp&amp;gt;
void smooth_sort_fix(RandomAccessIterator arr, size_t current_heap, int level_index, int levels[], Comp compare)
{
    while (level_index &amp;gt; 0)
    {
        size_t prev_heap = current_heap - leonardo[levels[level_index]];
        if (compare(arr[current_heap], arr[prev_heap]))
        {
            if (levels[level_index] &amp;gt; 1)
            {
                size_t child_heap2 = current_heap - 1;
                size_t child_heap1 = child_heap2 - leonardo[levels[level_index] - 2];
                if (compare(arr[prev_heap], arr[child_heap1])
                    || compare(arr[prev_heap], arr[child_heap2]))
                    break;
            }
            std::swap(arr[current_heap], arr[prev_heap]);
            current_heap = prev_heap;
            level_index -= 1;
        }
        else
            break;
    }

    int current_level = levels[level_index];
    while (current_level &amp;gt; 1)
    {
        size_t max_child = current_heap;
        size_t child_heap2 = current_heap - 1;
        size_t child_heap1 = child_heap2 - leonardo[current_level - 2];

        if (compare(arr[max_child], arr[child_heap1])) max_child = child_heap1;
        if (compare(arr[max_child], arr[child_heap2])) max_child = child_heap2;
        if (max_child == child_heap1)
        {
            std::swap(arr[current_heap], arr[child_heap1]);
            current_heap = child_heap1;
            current_level -= 1;
        }
        else if (max_child == child_heap2)
        {
            std::swap(arr[current_heap], arr[child_heap2]);
            current_heap = child_heap2;
            current_level -= 2;
        }
        else break;
    }
}

template&amp;lt;typename RandomAccessIterator, class Comp&amp;gt;
void smooth_sort(RandomAccessIterator arr, size_t size, Comp compare)
{
    int levels[64] = { 1 };
    int toplevel = 0;

    for (size_t i = 1; i &amp;lt; size; ++i)
    {
        if (toplevel &amp;gt; 0 &amp;amp;&amp;amp; levels[toplevel - 1] - levels[toplevel] == 1)
        {
            toplevel -= 1;
            levels[toplevel] += 1;
        }
        else if (levels[toplevel] != 1)
        {
            toplevel += 1;
            levels[toplevel] = 1;
        }
        else
        {
            toplevel += 1;
            levels[toplevel] = 0;
        }
        smooth_sort_fix(arr, i, toplevel, levels, compare);
    }

    for (size_t i = size - 2; i &amp;gt; 0; --i)
    {
        if (levels[toplevel] &amp;lt;= 1)
        {
            toplevel -= 1;
        }
        else
        {
            levels[toplevel] -= 1;
            levels[toplevel + 1] = levels[toplevel] - 1;
            toplevel += 1;

            smooth_sort_fix(arr, i - leonardo[levels[toplevel]], toplevel - 1, levels, compare);
            smooth_sort_fix(arr, i, toplevel, levels, compare);
        }
    }
}

template&amp;lt;typename RandomAccessIterator, class Comp&amp;gt;
void smooth_sort(RandomAccessIterator beg, RandomAccessIterator end, Comp compare)
{
    if (end - beg &amp;gt; 1)
    {
        smooth_sort(&amp;amp;*beg, (size_t)(end - beg), compare);
    }
}

template&amp;lt;typename RandomAccessIterator&amp;gt;
void smooth_sort(RandomAccessIterator beg, RandomAccessIterator end)
{
    smooth_sort(beg, end, std::less&amp;lt;typename std::iterator_traits&amp;lt;RandomAccessIterator&amp;gt;::value_type&amp;gt;());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;weakheap-sort&#34;&gt;weakheap sort&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;unsigned char weakheap_getflag(unsigned char *r, size_t index)
{
    return (r[index &amp;gt;&amp;gt; 3] &amp;gt;&amp;gt; (index &amp;amp; 7)) &amp;amp; 1;
}

template&amp;lt;typename RandomAccessIterator, class Comp&amp;gt;
void weakheap_merge(unsigned char flags[], RandomAccessIterator beg, RandomAccessIterator i, RandomAccessIterator j, Comp compare)
{
    if (compare(*i, *j))
    {
        flags[(j - beg) &amp;gt;&amp;gt; 3] ^= 1 &amp;lt;&amp;lt; ((j - beg) &amp;amp; 7);
        std::swap(*i, *j);
    }
}

template&amp;lt;typename RandomAccessIterator, class Comp&amp;gt;
void weakheap_sort(RandomAccessIterator beg, RandomAccessIterator end, Comp compare)
{
    if (end - beg &amp;gt; 1)
    {
        size_t n = (size_t)(end - beg);
        unsigned char * flags = new unsigned char[(n + 7) / 8];
        for (size_t i = 0; i &amp;lt; n / 8; ++i)
            flags[i] = 0;
        for (size_t i = n - 1; i &amp;gt; 0; --i)
        {
            size_t j = i;
            while ((j &amp;amp; 1) == weakheap_getflag(flags, j &amp;gt;&amp;gt; 1))
                j &amp;gt;&amp;gt;= 1;
            weakheap_merge(flags, beg, beg + (j &amp;gt;&amp;gt; 1), beg + i, compare);
        }
        for (size_t i = n - 1; i &amp;gt; 1; --i)
        {
            std::swap(*beg, *(beg + i));
            size_t j = 1, k;
            while ((k = 2 * j + weakheap_getflag(flags, j)) &amp;lt; i)
                j = k;
            while (j &amp;gt; 0)
            {
                weakheap_merge(flags, beg, beg, beg + j, compare);
                j &amp;gt;&amp;gt;= 1;
            }
        }
        std::swap(*beg, *(beg + 1));
        delete[] flags;
    }
}

template&amp;lt;typename RandomAccessIterator&amp;gt;
void weakheap_sort(RandomAccessIterator beg, RandomAccessIterator end)
{
    weakheap_sort(beg, end, std::less&amp;lt;typename std::iterator_traits&amp;lt;RandomAccessIterator&amp;gt;::value_type&amp;gt;());
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>堆排序优化思路</title>
      <link>/post/20191015-sorting-3/</link>
      <pubDate>Tue, 15 Oct 2019 20:52:52 +0800</pubDate>
      <guid>/post/20191015-sorting-3/</guid>
      <description>&lt;p&gt;堆排序其实是最不好优化的一个，在数据结构都确定的情况下，优化空间太小，除非优化数据结构本身，但那样就不叫做堆排序了。类似堆排序的还有&lt;code&gt;smooth sort&lt;/code&gt;和&lt;code&gt;weakheap sort&lt;/code&gt;，有兴趣可以自己查找相关资料。&lt;/p&gt;

&lt;h2 id=&#34;堆排序原理&#34;&gt;堆排序原理&lt;/h2&gt;

&lt;p&gt;堆排序其实是选择排序的优化变种，选择排序是把最大或最小的元素放到最边上，然后不断重复以上过程，堆排序也是如此，只不过堆排序通过构建数据结构，让查找最大或最小元素并放到最边上的速度比选择排序快得多。&lt;/p&gt;

&lt;p&gt;首先我们先来介绍什么是堆。堆只是个缩写，全名是二叉堆，是一种完全二叉树，它的特点是二叉堆的父节点元素不小于子节点的元素，以下为二叉堆例图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
30--&amp;gt;29
30--&amp;gt;28
29--&amp;gt;24
29--&amp;gt;25
28--&amp;gt;26
28--&amp;gt;22
24--&amp;gt;21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根节点是最大值的时候，就叫做最大堆，反之叫做最小堆。之所以使用完全二叉堆，是为了它能直接放到数组里，例如上图放数组里的结果是：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以看出，就是按层序遍历的结果。这样表示的好处是，可以通过下标的简单运算得到子节点的下标，我们通过简单找规律就能发现，下标k的子节点是2k+1和2k+2，所以我们能直接在数组里组织一个二叉堆。而且堆的根节点就是最值，找最值的时间复杂度是O(1)&lt;/p&gt;

&lt;p&gt;那么假如堆结构已经组织好了，我们接下来看怎么排序，还是以刚刚的数组作为例子，下标0就是最大值，那么我们就把它拿出来，与最右边元素交换，得到&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;指针&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;下标7的是已经排好的，后面不管它。这时候堆的性质破坏了，我们要去修正，指针r的子结点分别是a和b，在r,a,b中找出最大的元素a与r交换，得到&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;指针&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;再继续操作&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;指针&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这时候，指针r已经没有子结点，这时候堆就修正好了。这个过程由于是从根向叶子的操作，叫做shiftdown，还有一种相反的过程叫做shiftup，就是从叶子向根的方向操作。以上就是一轮完整的操作，包括交换最值，修正堆两步。不断循环以上操作直到所有元素有序即可。&lt;/p&gt;

&lt;p&gt;排序方法说完了，我们回头来说怎么构建堆。用shiftup法描述起来比较简单，一开始，只看下标0，那一个元素就肯定是堆。然后添加一个元素在最末，然后shiftup，修改新添加的元素，如此循环。伪代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;makeheap(arr, len)
    for i in (1, len)
        shiftup(arr, i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而使用shiftdown的话，原理一样，只是换一个方向&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;makeheap(arr, len)
    for i in (len / 2, 1)
        shiftdown(arr, i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下为完整动态图演示&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Heapsort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;堆排序基本实现&#34;&gt;堆排序基本实现&lt;/h2&gt;

&lt;p&gt;以下shiftdown实现的函数名是max_heapify&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void max_heapify(sort_element_t arr[], size_t index, size_t length)
{
    size_t child;
    sort_element_t temp = arr[index];
    for (; (child = 2 * index + 1) &amp;lt; length; index = child)
    {
        if (child + 1 &amp;lt; length &amp;amp;&amp;amp; arr[child] &amp;lt; arr[child + 1])
            ++child;
        if (temp &amp;lt; arr[child])
            arr[index] = arr[child];
        else
            break;
    }
    arr[index] = temp;
}

void heap_sort(sort_element_t arr[], size_t length)
{
    if (length &amp;gt; 1)
    {
        for (size_t i = length / 2; i-- &amp;gt; 0; )
            max_heapify(arr, i, length);
        for (size_t i = length - 1; i &amp;gt; 0; --i)
        {
            sort_element_swap(&amp;amp;arr[0], &amp;amp;arr[i]);
            max_heapify(arr, 0, i);
        }
    }
}

void heap_sort(sort_element_t* beg, sort_element_t* end)
{
    heap_sort(beg, end - beg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;堆排序-优化&#34;&gt;堆排序&amp;rdquo;优化&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;我们来重新看原来的表&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里下标k的子节点是2k+1和2k+2，运算起来麻烦，那我们如果把所有的下标加1，得到&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这时候，下标k的子节点是2k和2k+1，能减少一步加法运算&lt;/p&gt;

&lt;p&gt;所以可以得到以下模板代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;class RandomAccessIterator, class Comp&amp;gt;
void max_heapify(RandomAccessIterator arr, size_t index, size_t last, Comp compare)
{
    typename std::iterator_traits&amp;lt;RandomAccessIterator&amp;gt;::value_type temp = arr[index];
    size_t child;
    for (; (child = index &amp;lt;&amp;lt; 1) &amp;lt;= last; index = child)
    {
        if (child &amp;lt; last &amp;amp;&amp;amp; compare(*(arr + child), *(arr + child + 1)))
            ++child;
        if (compare(temp, *(arr + child)))
            *(arr + index) = *(arr + child);
        else
            break;
    }
    *(arr + index) = temp;
}

template &amp;lt;class RandomAccessIterator, class Comp&amp;gt;
void heap_sort(RandomAccessIterator beg, RandomAccessIterator end, Comp compare)
{
    if (end - beg &amp;gt; 1)
    {
        size_t length = (size_t)(end - beg);
        RandomAccessIterator parr = beg - 1;
        for (size_t i = length / 2; i &amp;gt; 0; --i)
            max_heapify_1(parr, i, length, compare);
        for (size_t i = length - 1; i &amp;gt; 0; --i)
        {
            std::swap(*beg, *(beg + i));
            max_heapify_1(parr, 1, i, compare);
        }
    }
}

template &amp;lt;class RandomAccessIterator, class Comp&amp;gt;
void heap_sort(RandomAccessIterator beg, RandomAccessIterator end, Comp compare)
{
    heap_sort(beg, end, compare);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，还是那句但是，这些所谓的优化到了不同编译器的手上结果可能会和你想象的不一样。这个在VS上是有效果的，但不幸的是这份代码在GCC下跑得并没有比原来的快，不过在GCC上办法还是有的，就是把下标操作全部换成指针，见代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;class RandomAccessIterator, class Comp&amp;gt;
void max_heapify_p(RandomAccessIterator first, RandomAccessIterator target, RandomAccessIterator last, Comp compare)
{
    typename std::iterator_traits&amp;lt;RandomAccessIterator&amp;gt;::value_type temp = *target;
    --first;
    RandomAccessIterator son;
    for (; (son = target + (target - first)) &amp;lt;= last; target = son)
    {
        if (son &amp;lt; last &amp;amp;&amp;amp; compare(*son, *(son + 1)))
            ++son;
        if (compare(temp, *son))
            *target = *son;
        else
            break;
    }
    *target = temp;
}

template &amp;lt;class RandomAccessIterator, class Comp&amp;gt;
void heap_sort_p(RandomAccessIterator beg, RandomAccessIterator end, Comp compare)
{
    if (end - beg &amp;gt; 1)
    {
        for (RandomAccessIterator i = beg + (end - beg) / 2; i &amp;gt;= beg; --i)
            max_heapify_p(beg, i, end - 1, compare);
        for (; --end &amp;gt; beg; )
        {
            std::swap(*beg, *end);
            max_heapify_p(beg, beg, end - 1, compare);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这份代码比GCC STL中的make_heap/sort_heap实现来得快一些。完整实现可以参见我的&lt;a href=&#34;https://github.com/Baobaobear/sort&#34; target=&#34;_blank&#34;&gt;sort项目&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;堆排序其它注意问题&#34;&gt;堆排序其它注意问题&lt;/h2&gt;

&lt;p&gt;堆排序在特殊情况下是能以O(n)复杂度完成的，就是当几乎所有元素或所有元素都相等的时候，是可以很快完成的。但是VS和GCC的STL中的堆排序实现面对这种情形时却花费较多的时间，原因是对相等元素的处理上，我们拿最前面的代码作为例子，我们如果改成这样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void max_heapify(sort_element_t arr[], size_t index, size_t length)
{
    size_t child;
    sort_element_t temp = arr[index];
    for (; (child = 2 * index + 1) &amp;lt; length; index = child)
    {
        if (child + 1 &amp;lt; length &amp;amp;&amp;amp; arr[child] &amp;lt; arr[child + 1])
            ++child;
        if (temp &amp;lt;= arr[child]) // 小于改小于等于
            arr[index] = arr[child];
        else
            break;
    }
    arr[index] = temp;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void max_heapify(sort_element_t arr[], size_t index, size_t length)
{
    size_t child;
    sort_element_t temp = arr[index];
    for (; (child = 2 * index + 1) &amp;lt; length; index = child)
    {
        if (child + 1 &amp;lt; length &amp;amp;&amp;amp; arr[child] &amp;lt; arr[child + 1])
            ++child;
        if (arr[child] &amp;lt; temp) // 小于才跳出，与前一个等价
            break;
        arr[index] = arr[child];
    }
    arr[index] = temp;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样导致的后果是不存在最优情况下O(n)的时间复杂度。最后再来回应开头的问题，什么很少听说&lt;code&gt;smooth sort&lt;/code&gt;和&lt;code&gt;weakheap sort&lt;/code&gt;呢？单从时间复杂度其实看不出来不用它们的理由，但真正的问题是时间常数的问题，对普通的乱序数组，&lt;code&gt;smooth sort&lt;/code&gt;和&lt;code&gt;weakheap sort&lt;/code&gt;比&lt;code&gt;heap sort&lt;/code&gt;慢，而且实现更复杂。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>素数判断和因子分解</title>
      <link>/post/20191013-prime-number/</link>
      <pubDate>Sun, 13 Oct 2019 15:37:00 +0800</pubDate>
      <guid>/post/20191013-prime-number/</guid>
      <description>&lt;p&gt;这里记录的是素数判断 &lt;code&gt;Miller Rabbin&lt;/code&gt; 的快速判定算法，而分解使用的算法是 &lt;code&gt;Pollard Rho&lt;/code&gt; 的玄学分解算法，这个算法的理论依据是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C&#34; target=&#34;_blank&#34;&gt;生日悖论&lt;/a&gt;，这里不具体讨论这个数学问题，具体讨论看前面链接就可以了。&lt;/p&gt;

&lt;p&gt;以下我们分别简要介绍这两个算法的原理&lt;/p&gt;

&lt;p&gt;首先这是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B1%B3%E5%8B%92-%E6%8B%89%E5%AE%BE%E6%A3%80%E9%AA%8C&#34; target=&#34;_blank&#34;&gt;Miller Rabbin&lt;/a&gt;的维基百科介绍页，由于页面是中文，这里不做重复介绍。&lt;/p&gt;

&lt;p&gt;下面简要解释一下Pollard&amp;rsquo;s Rho算法的原理，这是它的&lt;a href=&#34;https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm&#34; target=&#34;_blank&#34;&gt;维基百科页面&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先我们来定义这样一个函数&lt;/p&gt;

&lt;p&gt;$$f(x)=(x*x+c)%n$$&lt;/p&gt;

&lt;p&gt;其中n是需要被分解的数，c是一个任意小于n的正整数常数。那么我们给一个初始值x1，通过计算 $f(x1)$ 得到x2，然后去求 $|x1-x2|$ 与 n 的最大公约数，只要结果大于1就找到了分解结果。那如果最大公约数仍然是1，那么就通过刚才的x2求出 $x3=f(x2)$ 并计算 $|x1-x3|$ 与 n 的最大公约数。也就是说，我们可以通过这个公式得到一个数列&lt;/p&gt;

&lt;p&gt;$$ x1,x2,x3,&amp;hellip;,xn,&amp;hellip; $$&lt;/p&gt;

&lt;p&gt;但这个数列总是不会无限的，总是会循环的，那怎么去判断它有没有陷入循环呢，这用到的办法是Floyd判环算法，两个数在数列里以不同速度前进，如果环存在，那它们总会有相遇的时刻。在代码里，我们令变量x是正常速度，变量y是在x每迭代两次后y再迭代一次，所以如果环的长度是k，那么迭代k次就能发现环的存在。&lt;/p&gt;

&lt;p&gt;而在具体实现中，如果发现环的存在，我们需要变换常数c，再次进行尝试。那么我们下面不废话直接上代码，作为笔记。为了避免部分环境的输入输出问题，main函数使用了C++的输入输出，其它部分可以作为C函数使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdint&amp;gt;

int64_t gcd(int64_t a, int64_t b)
{
    return b == 0 ? a : gcd(b, a%b);
}

int64_t mul(int64_t a, int64_t b, int64_t mod)
{
    a %= mod;
    int64_t res = 0;
    while (b) {
        if (b &amp;amp; 1) res = (res + a) % mod;
        b &amp;gt;&amp;gt;= 1;
        a = (a &amp;lt;&amp;lt; 1) % mod;
    }
    return res;
}

int64_t quick_pow(int64_t a, int64_t n, int64_t mod)
{
    int64_t res = 1;
    while (n)
    {
        if (n &amp;amp; 1) res = mul(res, a, mod);
        a = mul(a, a, mod);
        n &amp;gt;&amp;gt;= 1;
    }
    return res;
}

int miller_rabbin(int64_t n, int a)
{
    int r = 0;
    int64_t s = n - 1;
    if (!(n % a))
        return 0;
    while (!(s &amp;amp; 1))
    {
        s &amp;gt;&amp;gt;= 1;
        r++;
    }
    int64_t k = quick_pow(a, s, n);
    if (k == 1)
        return 1;
    for (int j = 0; j &amp;lt; r; j++, k = mul(k, k, n))
        if (k == n - 1)
            return 1;
    return 0;
}

int is_prime(int64_t n)
{
    int test_large[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23 };
    int test_small[] = { 2, 7, 61 };
    int test_size = 9, *test = test_large;
    if (n &amp;lt; 2)
        return 0;
    if (n &amp;lt; 4759123141)
    {
        test = test_small;
        test_size = 3;
    }
    for (int i = 0; i &amp;lt; test_size; ++i)
    {
        if (n == test[i])
            return 1;
        if (miller_rabbin(n, test[i]) == 0)
            return 0;
    }
    return 1;
}

int64_t pollard_rho(int64_t n, int c)
{
    int64_t x = rand() % (n - 1) + 1, y;
    y = x = (mul(x, x, n) + c) % n;
    for (int n_try = 3, i = 0; n_try; )
    {
        x = (mul(x, x, n) + c) % n;
        if (y == x)
        {
            --n_try;
            c = rand() % (n - 1) + 1;
            continue;
        }
        int64_t d = gcd((y - x + n) % n, n);
        if (d != 1 &amp;amp;&amp;amp; d != n)
            return d;
        if (++i == 2)
        {
            y = (mul(y, y, n) + c) % n;
            i = 0;
        }
    }
    return n;
}

int main(void)
{
    int64_t n;
    std::cout &amp;lt;&amp;lt; &amp;quot;质数计算器，请输入任意小于1e18的正整数&amp;quot; &amp;lt;&amp;lt; std::endl;
    while (std::cin &amp;gt;&amp;gt; n)
    {
        if (is_prime(n))
        {
            std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot;是质数&amp;quot; &amp;lt;&amp;lt; std::endl;
        }
        else if (n &amp;gt; 2)
        {
            int64_t p = pollard_rho(n, rand() % (n - 1) + 1);
            std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot;不是质数，能被&amp;quot; &amp;lt;&amp;lt; p &amp;lt;&amp;lt; &amp;quot;整除&amp;quot; &amp;lt;&amp;lt; std::endl;
        }
        else
        {
            std::cout &amp;lt;&amp;lt; &amp;quot;请输入大于1小于1e18的整数&amp;quot; &amp;lt;&amp;lt; std::endl;
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下为python版本实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random

def _try_composite(a, d, n, s):
    if pow(a, d, n) == 1:
        return False
    for i in range(s):
        if pow(a, 2**i * d, n) == n-1:
            return False
    return True

def _is_prime(n):
    if n in _known_primes:
        return True
    if n &amp;lt; 2 or any((n % p) == 0 for p in _known_primes):
        return False
    return True

def is_prime(n, _precision_for_huge_n = 32):
    if n in _known_primes:
        return True
    d, s = n - 1, 0
    while not d % 2:
        d, s = d &amp;gt;&amp;gt; 1, s + 1
    if n &amp;lt; 4759123141: 
        return not any(_try_composite(a, d, n, s) for a in (2, 7, 61))
    if n &amp;lt; 1122004669633: 
        return not any(_try_composite(a, d, n, s) for a in (2, 13, 23, 1662803))
    if n &amp;lt; 3317044064679887385961981: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41))
    return not any(_try_composite(a, d, n, s) 
                   for a in _test_primes[:_precision_for_huge_n])
 
_known_primes = [2, 3]
_known_primes += [x for x in range(5, 1000, 2) if _is_prime(x)]
_test_primes = [2,3,307] + _known_primes[2:]

def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a%b)

def pollard_rho(n):
    x, c, 0 = random.randint(1, n - 1), random.randint(1, n - 1), 0
    y = x = (pow(x, 2, n) + c) % n
    for n_try in range(3):
        while True:
            x = (pow(x, 2, n) + c) % n
            if x == y:
                c = random.randint(1, n - 1)
                break
            d = gcd(y - x + n, n)
            if d &amp;gt; 1 and d &amp;lt; n:
                return d
            a += 1
            if a == 2:
                y = (pow(y, 2, n) + c) % n
                a = 0
    return n

number = 3451973391686190983
for i in range(number, number + 100, 2):
    if is_prime(i):
        print(i)
        break

if is_prime(number):
    print(number, &amp;quot;prime number&amp;quot;)
else:
    a = pollard_rho(number)
    print(number, &amp;quot;=&amp;quot;, a, &amp;quot;*&amp;quot;, number // a)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>二进制技巧</title>
      <link>/post/20191012-binary-skill/</link>
      <pubDate>Sat, 12 Oct 2019 15:18:00 +0800</pubDate>
      <guid>/post/20191012-binary-skill/</guid>
      <description>&lt;p&gt;二进制位运算的技巧特别多，这里就做一份cheat sheet，希望能帮助到大家。不过过于简单的就不列举了&lt;/p&gt;

&lt;h2 id=&#34;单行表达式&#34;&gt;单行表达式&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;把右边连续的1变成0&lt;/td&gt;
&lt;td&gt;n &amp;amp; ( n + 1 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;把右边第一个1变成0&lt;/td&gt;
&lt;td&gt;n &amp;amp; ( n - 1 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;把右起第一个0变成1&lt;/td&gt;
&lt;td&gt;n | ( n + 1 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;把右起连续的0变成1&lt;/td&gt;
&lt;td&gt;n | ( n - 1 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;取右边连续的1&lt;/td&gt;
&lt;td&gt;n ^ ( n + 1 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;去掉右起第一个1的左边&lt;/td&gt;
&lt;td&gt;n &amp;amp; -n 或 n &amp;amp; ( n ^ ( n - 1 ) )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;高低位交换，前x位&lt;/td&gt;
&lt;td&gt;( n &amp;lt;&amp;lt; x ) | ( x &amp;gt;&amp;gt; ( 32 - x ) )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;有符号整数计算绝对值&lt;/td&gt;
&lt;td&gt;( n ^ (n &amp;gt;&amp;gt; 31) ) - (n &amp;gt;&amp;gt; 31)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;多行的技巧&#34;&gt;多行的技巧&lt;/h2&gt;

&lt;h3 id=&#34;1-两数交换不使用第三个变量&#34;&gt;1. 两数交换不使用第三个变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void swap(int* a, int* b)
{
    *a ^= *b;
    *b ^= *a;
    *a ^= *b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-奇偶校验码&#34;&gt;2. 奇偶校验码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int check_bit(int n)
{
    n ^= n &amp;gt;&amp;gt; 1;
    n ^= n &amp;gt;&amp;gt; 2;
    n ^= n &amp;gt;&amp;gt; 4;
    n ^= n &amp;gt;&amp;gt; 8;
    n ^= n &amp;gt;&amp;gt; 16;
    return n &amp;amp; 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-计算二进制中的1的个数&#34;&gt;3. 计算二进制中的1的个数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint32_t method_1_uint32_count1(uint32_t n)
{
	n = (n &amp;amp; 0x55555555) + ((n &amp;gt;&amp;gt; 1) &amp;amp; 0x55555555);
	n = (n &amp;amp; 0x33333333) + ((n &amp;gt;&amp;gt; 2) &amp;amp; 0x33333333);
	n = (n &amp;amp; 0x0f0f0f0f) + ((n &amp;gt;&amp;gt; 4) &amp;amp; 0x0f0f0f0f);
	n = (n &amp;amp; 0x00ff00ff) + ((n &amp;gt;&amp;gt; 8) &amp;amp; 0x00ff00ff);
	n = (n &amp;amp; 0x0000ffff) + ((n &amp;gt;&amp;gt; 16) &amp;amp; 0x0000ffff);
	return n;
}

uint32_t method_2_uint32_count1(uint32_t n)
{
	n = n - ((n &amp;gt;&amp;gt; 1) &amp;amp; 0x55555555);
	n = (n &amp;amp; 0x33333333) + ((n &amp;gt;&amp;gt; 2) &amp;amp; 0x33333333);
	n = (n + (n &amp;gt;&amp;gt; 4)) &amp;amp; 0x0f0f0f0f;
	n = n + (n &amp;gt;&amp;gt; 8);
	n = n + (n &amp;gt;&amp;gt; 16);
	return n &amp;amp; 0x3f;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-计算下一组合&#34;&gt;4. 计算下一组合&lt;/h3&gt;

&lt;p&gt;前提：我们使用一个整数的二进制位来代表对应集合上的元素有没有选中，从而来表达一个组合。当我们要遍历所有组合的时候，就可以用这个办法了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int next_combination(int k)
{
    int b = k &amp;amp; -k, t = (k + b);
    return (((t ^ k) &amp;gt;&amp;gt; 2) / b) | t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-n皇后问题位运算实现&#34;&gt;5. n皇后问题位运算实现&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint64_t queen(uint32_t row, uint32_t lb, uint32_t rb)
{
    if (row == 0)
        return 1;
    uint64_t sum = 0;
    for (uint32_t r = row; r; r &amp;amp;= r - 1)
    {
        uint32_t p = r ^ (r &amp;amp; (r - 1));
        if ((p &amp;amp; lb) == 0 &amp;amp;&amp;amp; (p &amp;amp; rb) == 0)
            sum += queen(row ^ p, (lb | p) &amp;lt;&amp;lt; 1, (rb | p) &amp;gt;&amp;gt; 1);
    }
    return sum;
}

uint64_t nqueen(int n) // 返回值为棋盘大小n时解的个数
{
    return queen(((uint32_t)1 &amp;lt;&amp;lt; n) - 1, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-古老的快速平方根倒数&#34;&gt;6. 古老的快速平方根倒数&lt;/h3&gt;

&lt;p&gt;求 &lt;code&gt;1/sqrt(n)&lt;/code&gt;，这段代码出自Quake-III Arena (雷神之锤3)源代码 &lt;code&gt;/game/code/q_math.c&lt;/code&gt;，针对 IEEE 754 标准的单精度浮点格式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;float Q_rsqrt( float number )
{
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y  = number;
    i  = * ( long * ) &amp;amp;y;                       // evil floating point bit level hacking
    i  = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 );               // what the fuck?
    y  = * ( float * ) &amp;amp;i;
    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

#ifndef Q3_VM
#ifdef __linux__
    assert( !isnan(y) ); // bk010122 - FPE?
#endif
#endif
	return y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：使用常数 0x5f375a86 可以使得结果误差更小，详见&lt;a href=&#34;https://en.wikipedia.org/wiki/Fast_inverse_square_root&#34; target=&#34;_blank&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;7-绘画sierpinski三角&#34;&gt;7. 绘画Sierpinski三角&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
    const int n = (1 &amp;lt;&amp;lt; 5);
    for (int i = 0; i &amp;lt; n; ++i)
    {
        for (int j = 0; j &amp;lt;= i; ++j)
           putchar( ( i &amp;amp; j ) == j ? &#39;#&#39; : &#39; &#39;);
        printf(&amp;quot;\n&amp;quot;);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#
##
# #
####
#   #
##  ##
# # # #
########
#       #
##      ##
# #     # #
####    ####
#   #   #   #
##  ##  ##  ##
# # # # # # # #
################
#               #
##              ##
# #             # #
####            ####
#   #           #   #
##  ##          ##  ##
# # # #         # # # #
########        ########
#       #       #       #
##      ##      ##      ##
# #     # #     # #     # #
####    ####    ####    ####
#   #   #   #   #   #   #   #
##  ##  ##  ##  ##  ##  ##  ##
# # # # # # # # # # # # # # # #
################################
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>插入排序与希尔排序优化思路</title>
      <link>/post/20191009-sorting-2/</link>
      <pubDate>Thu, 10 Oct 2019 20:52:52 +0800</pubDate>
      <guid>/post/20191009-sorting-2/</guid>
      <description>&lt;p&gt;本篇针对插入排序和希尔排序来讲优化思路，有部分内容因为前一篇文章已经有交代，这里不重复，如果你还没有看，请先看&lt;a href=&#34;../20191008-sorting-1&#34;&gt;前一篇&lt;/a&gt;。我们来看插入排序的动图演示&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Insertion_sort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/heray1990/AlgorithmVisualization/blob/master/images/insertion_sort_50samples_fps30_dpi50.gif?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插入排序保证前面一块是有序的情况下，新增的一个元素通过向前交换到合适的位置，所以叫做插入排序。&lt;/p&gt;

&lt;h2 id=&#34;插入排序基本实现&#34;&gt;插入排序基本实现&lt;/h2&gt;

&lt;p&gt;我们先来看插入排序的基本实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void insert_sort(sort_element_t * beg, sort_element_t * end)
{
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        sort_element_t val = *i;
        sort_element_t* j = i;
        for (; j &amp;gt; beg &amp;amp;&amp;amp; val &amp;lt; j[-1]; --j)
        {
            *j = j[-1];
        }
        *j = val;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入排序即使不做任何优化，效率也明显高于上篇所说的冒泡排序和选择排序。那么按照惯例，先上双向看看效果&lt;/p&gt;

&lt;h3 id=&#34;插入排序优化-双向插入&#34;&gt;插入排序优化，双向插入&lt;/h3&gt;

&lt;p&gt;不过双向版本的插入排序可能并不是你想象中那么好写，甚至于有点不太好懂&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void double_insert_sort(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        for (sort_element_t* i = beg + 1, *j = end - 1; ; )
        {
            sort_element_t val = *i;
            sort_element_t* t = i;
            for (; t &amp;gt; beg &amp;amp;&amp;amp; val &amp;lt; t[-1]; --t)
            {
                *t = t[-1];
            }
            *t = val;

            if (++i &amp;gt; j)
            {
                if (*i &amp;lt; *j)
                    ++j;
                else
                    break;
            }

            val = j[-1];
            t = j;
            for (; t &amp;lt; end &amp;amp;&amp;amp; *t &amp;lt; val; ++t)
            {
                t[-1] = *t;
            }
            t[-1] = val;

            if (i &amp;gt; --j)
            {
                if (*j &amp;lt; j[-1])
                    --i;
                else
                    break;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;我们来看看测试结果，在 VS2015 下对 45000 个int排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;insert2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;165&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;176&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;165&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;115&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;575&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1259&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;532&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;855&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;568&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1252&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1474&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1537&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1611&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;642&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;813&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;733&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1068&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;809&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1076&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1082&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1073&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1072&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1074&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1073&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;939&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2193&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;832&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2159&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2157&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2137&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2155&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2149&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2146&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2138&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2154&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个优化效果非常不明显，有种吃力不讨好的感觉。那么，我们换个方法，来试试加大步长吧，这个变动让算法有了另一个名字&lt;/p&gt;

&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;

&lt;p&gt;希尔排序的坑特别深，你需要有心理准备。希尔排序和梳排序类似，都是通过使用较大的步长让元素更快速地到达正确位置附近&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/d/d8/Sorting_shellsort_anim.gif&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过在步长的选择上，希尔排序与梳排序差别巨大。首先梳排序的步长选择较为简单，每次乘以0.8即可，这个数字就不要管怎么来的了，我也不知道。梳排序的研究资料较少，但希尔排序则不一样，步长选择的研究非常多，也就是说光是步长的选择就是一门学问，这就是一个大坑，而且这个步长选择对性能的影响十分明显。我们先来看最早的希尔排序版本，最早的版本使用步长每次乘以0.5。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_0_5(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = (size_t)(end - beg) / 2;
        for (; incre &amp;gt;= 1; incre /= 2)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后来，Pratt 与 Knuth 改进了新的&lt;a href=&#34;https://oeis.org/A003462&#34; target=&#34;_blank&#34;&gt;步长序列&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;1, 4, 13, 40, 121, ...&lt;/code&gt;&lt;br /&gt;
得到以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt;= 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多关于步长的研究可以参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34;&gt;维基百科&lt;/a&gt;，本篇不对步长做讲解。后文的优化将使用这个版本的代码&lt;/p&gt;

&lt;h3 id=&#34;希尔排序优化-运用带哨兵的插入排序&#34;&gt;希尔排序优化，运用带哨兵的插入排序&lt;/h3&gt;

&lt;p&gt;带哨兵的插入排序是什么东西？其实就是指以下这样的插入排序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void unguarded_insert_sort(sort_element_t * beg, sort_element_t * end)
{
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        sort_element_t val = *i;
        sort_element_t* j = i;
        for (; val &amp;lt; j[-1]; --j)
        {
            *j = j[-1];
        }
        *j = val;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和前面的插入排序的区别在哪？就是少了&lt;code&gt;j &amp;gt; beg &amp;amp;&amp;amp;&lt;/code&gt;，不做边界判断。不做边界判断确实能运行得更快，但不会越界吗？我们来考虑以下这种情况&lt;br /&gt;
&lt;code&gt;int arr[8] = {-1, 8, 9, 4, 5, 6, 1, 6};&lt;/code&gt;&lt;br /&gt;
然后我们排序的时候写&lt;code&gt;unguarded_insert_sort(arr + 1, arr + 8);&lt;/code&gt;它就能正确排序而且不会发生越界，因为最前面存在比需要排序的元素都要小的数，而那个数就是哨兵，它充当着让内循环退出的作用，也就是说，在调用这个函数的时候，只要保证beg的左边存在比右边都要小的元素就行了。&lt;/p&gt;

&lt;p&gt;有了这个能怎么优化呢？我们把步长1的部分单独拆出来，写成下面这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_o1(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt; 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
        insert_sort(beg, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个能理解吧，步长1的时候完全就是插入排序，但真正厉害的在下面这步，要注意到这种写法在变为步长1之前，它的步长是4，我们可以证明整个数组的最小值一定在前4个数中，即前一个步长的范围内。这里不给出具体证明，有兴趣你可以自己试试证明。有了这个结论，前4个元素用插入排序排好了后，后面的就可以使用&lt;code&gt;unguarded_insert_sort&lt;/code&gt;了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void shell_sort_o2(sort_element_t * beg, sort_element_t * end)
{
    if (end - beg &amp;gt; 10)
    {
        size_t incre = 1;
        while (incre &amp;lt; (size_t)(end - beg - 1) / 3)
            incre = incre * 3 + 1; // A003462, Pratt, 1971, Knuth, 1973
        for (; incre &amp;gt; 1; incre /= 3)
        {
            sort_element_t * bound = beg + incre;
            for (sort_element_t * i = bound; i &amp;lt; end; ++i)
            {
                sort_element_t * p = i;
                sort_element_t val = *i;
                for (; p &amp;gt;= bound &amp;amp;&amp;amp; val &amp;lt; *(p - incre); p -= incre)
                    *p = *(p - incre);
                *p = val;
            }
        }
        insert_sort(beg, beg + 4);
        unguarded_insert_sort(beg + 4, end);
    }
    else
    {
        insert_sort(beg, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个哨兵技巧在其它的排序里面甚至别的问题里同样也会存在。除了这个还有没有别的优化空间呢？例如，shellsort的最优情况下的时间复杂度还是&lt;code&gt;O(nlogn)&lt;/code&gt;，那有没有办法使得最优情况时间复杂度下降到&lt;code&gt;O(n)&lt;/code&gt;呢？确实有办法，如果在某一轮发现没有数进行交换，那么就立即转成带次数限制的插入排序进行尝试，具体请参阅我的&lt;a href=&#34;https://github.com/Baobaobear/sort&#34; target=&#34;_blank&#34;&gt;sort项目&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;测试结果&#34;&gt;测试结果&lt;/h2&gt;

&lt;p&gt;以下是在 VS2015 上对 4,500,000 个int排序的测试&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bao_shell&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;373&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;148&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;147&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_o2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;540&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;187&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;547&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;222&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shell_0_5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;606&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;601&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;236&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;572&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;261&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;comb_sort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;161&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;492&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;477&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;214&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;169&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;273&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中&lt;code&gt;bao_shell&lt;/code&gt;是我在&lt;a href=&#34;https://github.com/Baobaobear/sort&#34; target=&#34;_blank&#34;&gt;sort项目&lt;/a&gt;中写的希尔排序，使用了更优的步长序列，里面包含更多的优化技巧，本篇就不一一介绍了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>选择和冒泡排序优化思路</title>
      <link>/post/20191008-sorting-1/</link>
      <pubDate>Tue, 08 Oct 2019 13:15:36 +0800</pubDate>
      <guid>/post/20191008-sorting-1/</guid>
      <description>&lt;p&gt;本篇针对两种最基本的排序（冒泡、选择）来讲优化思路。越是简单的东西反而可能存在你越想不到的优化点。但是在开始之前，先给不了解的人讲一个设计原则的问题，我们在设计排序接口的时候，最为常见的有&lt;br /&gt;
&lt;code&gt;void sort(type arr[], int len)&lt;/code&gt;&lt;br /&gt;
也许你也见过&lt;br /&gt;
&lt;code&gt;void sort(iter beg, iter end)&lt;/code&gt;&lt;br /&gt;
这时候问题就来了，很多人会错误地把end认为是最后一个元素，其实不然，这两接口可以相互转换，例如我们可以写 &lt;code&gt;sort(arr, arr + len)&lt;/code&gt; ，这样写很自然对不对，但如果你认为end是最后一个元素，那你就不得不改成 &lt;code&gt;sort(arr, arr + len - 1)&lt;/code&gt; 。事实上，这类的接口我们需要一个统一的原则，就是左闭右开区间原则，即beg就是首个元素，而end是最后一个元素+1，即end是作为结束标志，不应该把end算在范围内。接下来下面所有的接口写法，都是以&lt;br /&gt;
&lt;code&gt;void sort(iter beg, iter end)&lt;/code&gt;&lt;br /&gt;
这种方式写的，至于这样写有什么好处，接下来我们就看示例。&lt;/p&gt;

&lt;h2 id=&#34;选择排序&#34;&gt;选择排序&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/heray1990/AlgorithmVisualization/master/images/selection_sort_50samples_fps30_dpi50.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;基本实现&#34;&gt;基本实现&lt;/h3&gt;

&lt;p&gt;我们先来看选择排序，因为它编写简单，而且最不容易出错，我们来看以下两种不同的接口写法，我们定义要排序的数据类型名字是&lt;code&gt;sort_element_t&lt;/code&gt;，定义交换函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void sort_element_swap(sort_element_t *x, sort_element_t *y)
{
    sort_element_t t = *x;
    *x = *y;
    *y = t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void select_sort(sort_element_t arr[], size_t len) //方式1
{
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        size_t head = i;
        for (size_t j = i + 1; j &amp;lt; len; ++j)
        {
            if (arr[j] &amp;lt; arr[head])
                head = j;
        }
        sort_element_swap(arr + i, arr + head);
    }
}

void select_sort(sort_element_t * beg, sort_element_t * end) //方式2
{
    for (; beg &amp;lt; end; ++beg)
    {
        sort_element_t* head = beg;
        for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; *head)
                head = i;
        }
        sort_element_swap(beg, head);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就这么一眼看过去，看起来还真差不多，这样，我们再细分一下，选择排序的中间那步，其实就是找一个最小的元素，我们单独提取成一个独立函数再来看看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//方式1
size_t find_min(sort_element_t arr[], size_t beg, size_t len)
{
    size_t head = beg;
    for (size_t j = beg + 1; j &amp;lt; len; ++j)
    {
        if (arr[j] &amp;lt; arr[head])
            head = j;
    }
    return head;
}

void select_sort(sort_element_t arr[], size_t len)
{
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        sort_element_swap(arr + i, arr + find_min(arr, i, len));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//方式2
sort_element_t* find_min(sort_element_t * beg, sort_element_t * end)
{
    sort_element_t* head = beg;
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        if (*i &amp;lt; *head)
            head = i;
    }
    return head;
}

void select_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; ++beg)
    {
        sort_element_swap(beg, find_min(beg, end));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仔细观察一下，是不是第二种写法函数参数统一，而且参数数量少，而且也少了很多不必要的加法运算（像方法一需要写&lt;code&gt;arr + i&lt;/code&gt;这类）。如果你说方法一的find_min参数也可以只写两个，写成&lt;code&gt;find_min(sort_element_t arr[], size_t len)&lt;/code&gt;，那么你在调用的地方将不得不写成&lt;code&gt;find_min(arr + i, len - i)&lt;/code&gt;，这种又加又减在遇到更复杂的情况的时候，更容易把你弄晕出Bug。总之结论是最好把参数写成两个指针（或两个迭代器）的形式，不建议使用数组加长度的形式，STL的接口也全使用迭代器的形式。&lt;/p&gt;

&lt;p&gt;对于这个排序要注意的一点是，有人会写成类似下面的形式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void select_sort(sort_element_t arr[], size_t len)
{
	for (size_t j = 0; j &amp;lt; len; ++j)
	{
		for (size_t i = j + 1; i &amp;lt; len; ++i)
		{
			if (arr[j] &amp;gt; arr[i])
			{
				sort_element_t t = arr[j];
				arr[j] = arr[i];
				arr[i] = t;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上这种叫做劣化版的选择排序，在大多数的情况下会比前一个方法慢，极端条件下甚至会慢1倍甚至更多&lt;/p&gt;

&lt;p&gt;那说完劣化再讲优化，选择排序的时间复杂度是$O(n^2)$，而且运行时间与原来的排列完全无关。以上的选择排序总是选择小的，那大小一起选呢？能不能起到优化的作用？如果你单纯的多写一个find_max变成双向选择来做，在VS2005下是没有优化效果的，我测试过了。那应该怎么样呢？确实还是双向选择，不过具体实现稍有点不同。&lt;/p&gt;

&lt;h3 id=&#34;优化1-双向选择&#34;&gt;优化1，双向选择&lt;/h3&gt;

&lt;p&gt;这里的实现是一个函数里同时把最大最小一起找，这样减少了一次遍历的过程，时间能减半之余，还有一个非常有用的优化，就是当你发现最大值等于最小值的时候能提前跳出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* find_min_max(
    sort_element_t * beg,
    sort_element_t * end,
    sort_element_t** head_max)
{
    sort_element_t* head = beg;
    *head_max = beg;
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        if (*i &amp;lt; *head)
            head = i;
        else if (**head_max &amp;lt; *i)
            *head_max = i;
    }
    return head;
}

void double_select_sort(sort_element_t * beg, sort_element_t * end)
{
    while (end - beg &amp;gt; 1)
    {
        sort_element_t * head_max, * head = find_min_max(beg, end, &amp;amp;head_max);
        if (head_max != head)
        {
            if (head_max == beg)
                head_max = head;
            sort_element_swap(beg++, head);
            sort_element_swap(--end, head_max);
        }
        else
        {
            break;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与选择排序的运行时间比较如下，排序45000个int，编译环境是VS2015，用10组不同分布的数据，表格中的数字单位是毫秒，即排序用时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;834&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;981&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2213&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;合理运用双向，效果也往往不错，但是千万要注意，环境不同会导致测试结果不相同，例如你换到mingw上使用-O3编译那么将会是select比select2快，所以上面数据只供参考，具体结果请自己做测试。&lt;/p&gt;

&lt;h3 id=&#34;优化2-数据结构&#34;&gt;优化2，数据结构&lt;/h3&gt;

&lt;p&gt;选择排序的优化主要是在find_min上面，find_min的时间复杂度是$O(n)$，那如果我们通过一些数据结构的组织，例如二叉堆，那么找最大或最小值时间将变成$O(1)$，而维护这个数据结构的代价是$O(logn)$的话，总体时间复杂度将变为$O(nlogn)$，这比起选择排序的$O(n^2)$就是一个巨大的变化，具体内容在之后的 &lt;a href=&#34;../20191015-sorting-3/&#34;&gt;堆排序&lt;/a&gt; 篇具体讲解。&lt;/p&gt;

&lt;h2 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/5/54/Sorting_bubblesort_anim.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;基本实现-1&#34;&gt;基本实现&lt;/h3&gt;

&lt;p&gt;冒泡排序是我们课本必然介绍的一个排序，相对于选择排序，这种在编写的时候更容易出现逻辑错误，我们先来看典型的实现（双迭代器实现）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void bubble_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; --end)
    {
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
                sort_element_swap(i - 1, i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒泡排序这种写法，铁定的$O(n^2)$时间没跑，不过好在冒泡排序的优化方法也不少。&lt;/p&gt;

&lt;h3 id=&#34;优化1-提前跳出&#34;&gt;优化1，提前跳出&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void bubble_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; --end)
    {
        int sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过sorted变量记录某一轮是不是存在交换，如果没有交换则表明数据已经是有序的，可以提前退出循环。有这个优化对于已经有序的数据，冒泡排序将运行得特别快，即最优情况时间复杂度只有$O(n)$&lt;/p&gt;

&lt;h3 id=&#34;优化2-鸡尾酒排序&#34;&gt;优化2，鸡尾酒排序&lt;/h3&gt;

&lt;p&gt;前面的冒泡写法是单向冒泡，把最大值向最右边移，这回我们做成双向，一边把最大值右移，一边把最小值左移，不过这种方法有另一个命名，叫做鸡尾酒排序&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cocktail_shaker_sort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void cocktail_sort(sort_element_t * beg, sort_element_t * end)
{
    while (beg &amp;lt; end)
    {
        int sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
        --end;

        sorted = 1;
        for (sort_element_t * i = end - 1; i &amp;gt; beg; --i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
        ++beg;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那改成双向就真的有提升了吗？我们看实测，排序45000个int，用10组不同分布的数据，表格中的数字单位是毫秒，即排序用时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;761&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2329&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1459&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1052&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中第4组是乱序无重复数值的数据，最有代表性的一列。从中可以看到，cocktail比起bubble能节省30%的时间&lt;/p&gt;

&lt;p&gt;让我们再脑洞大开，除了可以双向，还有一种对CPU执行有利的优化方式&lt;/p&gt;

&lt;h3 id=&#34;优化3-奇偶排序&#34;&gt;优化3，奇偶排序&lt;/h3&gt;

&lt;p&gt;这种排序的排序方式见下表，假设有8个数，奇数轮比较(1,2), (3,4), (5,6), (7,8)，偶数轮比较(2,3), (4,5), (6,7)，如此循环，直到没有交换为止&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;轮次&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;具体实现代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void odd_even_sort(sort_element_t * beg, sort_element_t * end)
{
    int sorted = 0, last_sorted = 0;
    while (sorted == 0)
    {
        last_sorted = sorted;
        sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; i += 2)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (last_sorted &amp;amp;&amp;amp; sorted)
            break;

        last_sorted = sorted;
        sorted = 1;
        for (sort_element_t * i = beg + 2; i &amp;lt; end; i += 2)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (last_sorted &amp;amp;&amp;amp; sorted)
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们再脑洞大开，除了比较方向，好像我们有一个条件没有考虑上，就是冒泡排序总是相邻元素的比较，那么如果不相邻地比较呢？&lt;/p&gt;

&lt;h3 id=&#34;优化4-梳排序&#34;&gt;优化4，梳排序&lt;/h3&gt;

&lt;p&gt;通过一开始设置较大的步长，让元素能较快移动，然后逐步减少步长，直到1变成普通的冒泡排序为止。这个方法的优点，就是快，相对前面的方法来说飞快。当然，最后一步你也可以选择不调用冒泡排序，而改调用&lt;code&gt;cocktail_sort&lt;/code&gt;或&lt;code&gt;odd_even_sort&lt;/code&gt;都可以，差别不明显。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comb_sort&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/4/46/Comb_sort_demo.gif&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void comb_sort(sort_element_t * beg, sort_element_t * end)
{
    const double shrink_factor = 0.8;
    ptrdiff_t gap = end - beg;
    while (gap &amp;gt; 1)
    {
        if (gap &amp;gt; 1)
        {
            gap = (ptrdiff_t)(gap * shrink_factor);
            if (gap == 10 || gap == 9)
                gap = 11;
        }
        for (sort_element_t * i = beg + gap; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-gap])
                sort_element_swap(i, i - gap);
        }
    }
    bubble_sort(beg, end);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;完整测试&#34;&gt;完整测试&lt;/h2&gt;

&lt;p&gt;在完整测试里你会发现一些和你想象中完全不一样的情况，可不要以为你的“优化”一定就是优化&lt;/p&gt;

&lt;h3 id=&#34;vs2005下的运行时间比较-按avg平均值排序&#34;&gt;VS2005下的运行时间比较（按Avg平均值排序）&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;574&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1222&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;557&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;878&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;586&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;761&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;834&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;981&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2329&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1459&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1052&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2213&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果你只测试随机数据，那么排序应该是&lt;/p&gt;

&lt;p&gt;&lt;code&gt;combsort &amp;lt;&amp;lt; select2 &amp;lt; odd_even &amp;lt; cocktail &amp;lt; select &amp;lt; bubble&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;在mingw64-gcc8-下使用-o3-编译-最大优化-的运行时间比较&#34;&gt;在mingw64(gcc8)下使用&lt;code&gt;-O3&lt;/code&gt;编译（最大优化）的运行时间比较&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;434&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;503&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;493&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;564&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1311&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1264&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;562&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;882&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;580&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1610&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;669&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;837&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;755&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;837&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;974&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1247&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2312&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1455&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1063&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;你可以发现，找最小值过程在mingw64下被特别照顾了一下，结果它比其它的明显要快，你可以从中得知，如果你想在mingw下写出运行得快的双向选择排序，如果你的想法是再写一个&lt;code&gt;find_max&lt;/code&gt;函数，那对不起，这样是没有优化效果的。但这不是全部，还有让你更大跌眼镜的情况。&lt;/p&gt;

&lt;h3 id=&#34;在mingw64-gcc8-下使用-o1-编译-基本优化-的运行时间比较&#34;&gt;在mingw64(gcc8)下使用&lt;code&gt;-O1&lt;/code&gt;编译（基本优化）的运行时间比较&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;263&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;375&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;531&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;597&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1204&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;780&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;649&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1244&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1504&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1594&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1656&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1081&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;815&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;789&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2091&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2115&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1247&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;949&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2231&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2230&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在双向选择不但最快，而且还比&lt;code&gt;-O3&lt;/code&gt;下的快得多。老实说，会造成这种奇怪的结果，&lt;code&gt;-O1&lt;/code&gt;比&lt;code&gt;-O3&lt;/code&gt;还快的原因还真不要问我，找开发gcc/mingw的开发者。&lt;/p&gt;

&lt;p&gt;最后还是忠告一句，千万不要在一个编译器某个编译参数上看到有优化效果，就以为是事实，优化的坑远比你想象的要来得深，并不是你以为优化了它就一定变快了，编译器和编译参数以及运行环境才是你的老大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick sort(快速排序)杂谈 1</title>
      <link>/post/20191007-qsort-talk-1/</link>
      <pubDate>Mon, 07 Oct 2019 14:18:22 +0800</pubDate>
      <guid>/post/20191007-qsort-talk-1/</guid>
      <description>&lt;p&gt;我们现在使用的排序，很大比例在使用quick sort，因为它是平均速度最快的排序，但与此同时它可能也是坑最深的排序，现在我们就来讨论讨论它，因为内容较多，我计划写多篇，本篇是第一篇。&lt;/p&gt;

&lt;h2 id=&#34;快排的思路&#34;&gt;快排的思路&lt;/h2&gt;

&lt;p&gt;我们先来介绍一下快排的思路。快排的思路其实很简单，在数组中选一个元素，我们就称呼这个元素为pivot，通过与这个元素的比较，把数组划分成不比pivot大的在一边，不比pivot小的在另一边，于是就分成了两个更小的数据，对它们分别再排序就行了。但是，这个描述特别的含糊，首先是怎么选中间元素，这里面有很多不同的做法。然后就是划分了，这个划分方法非常的多，水也特别深，这里主要介绍最为常见的划分方法。&lt;/p&gt;

&lt;h2 id=&#34;划分结果分类&#34;&gt;划分结果分类&lt;/h2&gt;

&lt;p&gt;首先，就是划分的结果，划分的结果有什么好讲的呢？其实算法的描述只说了划分成不比pivot大的在一边，不比pivot小的在另一边，并没有说等于的数怎么办。事实上，关键就在等于的数怎么处理，你既可以划在其中一边，也可以两边都有，也可以划成3分，中间那块就是等于pivot的，左边是小于等于，右边是大于等于，三种划分结果都是可以的。但是，不能容许的一种情况是划分后只有一块，例如你选的pivot正好是最小的数，于是划分后，整个数组就一块，全是大于等于pivot的，这样很可能导致无限递归，这次划分也白干了。&lt;/p&gt;

&lt;p&gt;所以很多人单凭算法思路来实现的时候，往往陷入栈溢出异常，其实就是划分结果上出了问题，并没有保证每次划分后，至少划分成两块。&lt;/p&gt;

&lt;h2 id=&#34;划分手段分类&#34;&gt;划分手段分类&lt;/h2&gt;

&lt;p&gt;划分手段的典型方法至少有5种，本篇介绍其中的4种&lt;/p&gt;

&lt;h3 id=&#34;1-lomuto-partition-scheme&#34;&gt;1. Lomuto partition scheme&lt;/h3&gt;

&lt;p&gt;首先我们来看以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t * partition(
    sort_element_t * beg,
    sort_element_t * end)
{
    sort_element_t pivot = *beg;
    sort_element_t * p = beg;
    for (sort_element_t * i = beg + 1; i &amp;lt; end; i++)
    {
        if (*i &amp;lt; pivot)
        {
            sort_element_swap(++p, i);
        }
    }
    sort_element_swap(p, beg);
    return p;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t * p = partition(beg, end);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种划分方法wiki上有描述，叫做 &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Lomuto partition scheme&lt;/code&gt;&lt;/a&gt; 它的思路挺好理解，首先p就是划分边界，一开始&lt;code&gt;p = left&lt;/code&gt;，遍历数组，发现比pivot小的，就交换到p的位置，并且p++，那么p左边的就全是比p要小的。而在最后面，把pivot交换到p的位置，所以这个方法期望把数组划分成三块，小于pivot的，等于pivot的，大于等于pivot的，而且能保证至少划分出两块（中间那块等于pivot的一定存在，不过只有一个元素）。这个方法的优点是可以通过简单的修改就变成3路划分（小于、等于、大于三块），缺点是它这种划分方法速度最慢，交换次数较多。&lt;/p&gt;

&lt;h3 id=&#34;2-不知名字的方法&#34;&gt;2. 不知名字的方法&lt;/h3&gt;

&lt;p&gt;这种方法来源不明，如果你知道请告诉我，在我看来有点像 Hoare partition scheme 的变种，来看代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* partition(
    sort_element_t * first,
    sort_element_t * last)
{
    sort_element_t pivot = *first;
    while (first &amp;lt; last)
    {
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;lt; *last)
            last--;
        *first = *last;
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;gt;= *first)
            first++;
        *last = *first;
    }
    *first = pivot;
    return first;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t* p = partition(beg, end - 1);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法通过在右边寻找应该放在左边的元素，与pivot交换，然后在左边寻找应该放在右边的元素，再次与pivot交换，这样pivot通过多数交换换到划分位置上。不过上面代码做了一个简单优化，通过赋值而不是直接交换以减少赋值的次数，这种方法在网上非常常见。&lt;/p&gt;

&lt;h3 id=&#34;3-hoare-partition-scheme&#34;&gt;3. Hoare partition scheme&lt;/h3&gt;

&lt;p&gt;后来有个叫做 C.A.R. Hoare 的人发明了这种划分方法，见代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* partition(
    sort_element_t * first,
    sort_element_t * last)
{
    sort_element_t * begin = first;
    sort_element_t pivot = *first;
    while (first &amp;lt; last)
    {
        while (first &amp;lt; last &amp;amp;&amp;amp; *last &amp;gt;= pivot)
            --last;
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;gt;= *first)
            ++first;
        if (first &amp;lt; last)
            sort_element_swap(first, last);
    }
    sort_element_swap(first, begin);
    return first;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t* p = partition(beg, end - 1);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意的是，这个写法和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&#34; target=&#34;_blank&#34;&gt;wiki&lt;/a&gt; 上的略有差别。这个方法与前一个的不同点是，通过在左边寻找应该放在右边的元素，而在右边寻找应该放在左边的元素，然后交换。这个方法是以上三种里面速度最快的，但与此同时是坑最多的。例如，原描述是左边找小于，右边找大于的交换，而上面代码的实现是左边找小于等于，右边找大于等于；原描述是先找左边再找右边，上面实现是先找右边再找左边。也就是说，取不取等于号有4种组合，再乘以先左或先右两种，共8种组合，这8种有一些要求pivot取最左边，有一些要求pivot取最右边，有些左右都行，有些pivot任意位置都行。所以当你写这种划分方法的时候，看起来没什么区别的代码，偏偏出现栈溢出各种问题，其实就隐藏在这些细节上。如果你想练习调试的本领，就把这8种组合的划分全写出来，你肯定收获不少。至于哪种组合最佳，我不知道，但我知道最差的组合，就是两边都取等于号的那两种。&lt;/p&gt;

&lt;p&gt;这个写法还有一个四路划分的变种，即先划分成以下这样&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;划分好后再把两端的相等元素交换到中间得到&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;这里不具体展开，有兴趣可以自行实现&lt;/p&gt;

&lt;h3 id=&#34;4-vs-partition-scheme&#34;&gt;4. VS partition scheme&lt;/h3&gt;

&lt;p&gt;之所以这么叫是因为我目前只看到在Visual Studio系列STL的&lt;code&gt;std::sort&lt;/code&gt;是这么写的，这个写成代码有点长，但思路和上面说的四路划分有点类似，这里简单讲讲它的思路。首先pivot选择在中间，形成这样的状态&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;?&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;?&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;找到等于的元素就交换到等于那块的旁边扩大它就行了，核心思想就这样，还有很多其它的细节，这里不展开。这种方法网上几乎没有人这么写，因为写起来确实挺麻烦的。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本篇先介绍到这里，大家写快排练习建议使用 &lt;code&gt;Hoare partition scheme&lt;/code&gt; ，如果你觉得你的能力更好，那你可以写 &lt;code&gt;VS partition scheme&lt;/code&gt; 自己琢磨一下细节问题，相信你是能写出来的。那么下一篇会介绍优化的部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mingw 的 Bug</title>
      <link>/post/20191006-mingw-bug/</link>
      <pubDate>Sun, 06 Oct 2019 13:04:08 +0800</pubDate>
      <guid>/post/20191006-mingw-bug/</guid>
      <description>&lt;p&gt;这个问题最早的时候是今年8月，我在测试排序算法的速度，发现mingw上总有点不一样，而linux下的gcc是正常的，也在群里问过人，没人明白到底怎么回事，先描述一下当时遇到的情况。&lt;/p&gt;

&lt;p&gt;一开始我使用&lt;code&gt;std::random_shuffle&lt;/code&gt;打乱数组并用&lt;code&gt;std::sort&lt;/code&gt;排序，在VS上并没有发现什么问题，gcc也正常。但在mingw上，这样打乱的数组排序所花的时间，比起其它打乱方式的，例如直接赋值一个随机数的方式，要明显慢了近1倍，这个诡异的问题一直没想通是为啥。当时觉得可能是&lt;code&gt;std::sort&lt;/code&gt;对这种方式打乱的数据排序有点问题导致变慢。&lt;/p&gt;

&lt;p&gt;后来，为了和std函数脱钩，我自己重新写了随机数函数和random_shuffle函数，结果发现我的random_shuffle函数打乱的结果，&lt;code&gt;std::sort&lt;/code&gt;的时间是完全正常的，非得&lt;code&gt;std::random_shuffle&lt;/code&gt;才会出现两倍的情况，一时间我还以为是我写的有问题，还更换了不同随机函数，怎么也发现不了原因，终于把怀疑转向&lt;code&gt;std::random_shuffle&lt;/code&gt;，我就对这个函数的执行结果输出到文件，这一输出立即把我搞懵了，输出的结果分布特别有规律，初值我用的是&lt;code&gt;arr[i] = i&lt;/code&gt;，打乱后结果前32768个数都是数组里最大的数值，一时没明白怎么回事，难道它的实现很不寻常吗？我就去翻了一下源代码，在&lt;a href=&#34;https://en.cppreference.com/w/cpp/algorithm/random_shuffle&#34; target=&#34;_blank&#34;&gt;cppreference&lt;/a&gt;下源代码长下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt; class RandomIt &amp;gt;
void random_shuffle( RandomIt first, RandomIt last )
{
    typename std::iterator_traits&amp;lt;RandomIt&amp;gt;::difference_type i, n;
    n = last - first;
    for (i = n-1; i &amp;gt; 0; --i) {
        using std::swap;
        swap(first[i], first[std::rand() % (i+1)]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码我看着就不对，这个是生成不了我的执行结果的，于是又找到了下面这个：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;class RandomAccessIterator&amp;gt;
inline void random_shuffle(RandomAccessIterator first,
                           RandomAccessIterator last) {
  __random_shuffle(first, last, distance_type(first));
}
 
 
template &amp;lt;class RandomAccessIterator, class RandomNumberGenerator&amp;gt;
void random_shuffle(RandomAccessIterator first, RandomAccessIterator last,
                    RandomNumberGenerator&amp;amp; rand) {
  if (first == last) return;
  for (RandomAccessIterator i = first + 1; i != last; ++i)
    iter_swap(i, first + rand((i - first) + 1));
}
 
 
template &amp;lt;class RandomAccessIterator, class Distance&amp;gt;
void __random_shuffle(RandomAccessIterator first, RandomAccessIterator last,
                      Distance*) {
  if (first == last) return;
  for (RandomAccessIterator i = first + 1; i != last; ++i) 
#ifdef __STL_NO_DRAND48
    iter_swap(i, first + Distance(rand() % ((i - first) + 1)));
#else
  iter_swap(i, first + Distance(lrand48() % ((i - first) + 1)));
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看了这个代码，我瞬间明白这到底是怎么回事了，你能从中发现些什么吗？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我发现的是，前面的代码用的是rand，而之前我发现的，是数组里前32768个数都特别大，我的直觉是这个rand函数最大值就是32767从而导致以上问题，结果一查，还真的只有mingw的rand函数的最大值这么小，也就是说如果你希望代码跨平台，使用&lt;code&gt;std::random_shuffle&lt;/code&gt;要慎重，当然最好是减少依赖。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
