<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Treap | Baobaobear</title>
    <link>/tags/treap/</link>
      <atom:link href="/tags/treap/index.xml" rel="self" type="application/rss+xml" />
    <description>Treap</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 15 Dec 2019 13:10:00 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Treap</title>
      <link>/tags/treap/</link>
    </image>
    
    <item>
      <title>FHQ Treap</title>
      <link>/post/20191215-fhq-treap/</link>
      <pubDate>Sun, 15 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191215-fhq-treap/</guid>
      <description>&lt;p&gt;讲完了&lt;a href=&#34;../20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;和&lt;a href=&#34;../20191213-tree-sequence/&#34;&gt;splaytree&lt;/a&gt;，接下来讲把这两的思想混合在一起的 FHQ Treap，据说作者是范浩强。&lt;/p&gt;

&lt;p&gt;splay其实还有两个操作split和merge没有介绍，我打算把这两放在这里一并介绍&lt;/p&gt;

&lt;h2 id=&#34;split和merge&#34;&gt;Split和Merge&lt;/h2&gt;

&lt;p&gt;Split就是把树按某个条件划分成两棵子树，如果是查找树，就按某个值划分为小于它的以及大于等于它的（等于号取哪边怎么好写怎么来就是），如果是序列维护，那就按照rank来划分。而merge操作则正好相反，把两棵子树合并成为一棵。所以，如果我们需要对某个区间做操作，那么我们就把那个区间Split出来，操作好了后（打懒惰标记，或取出结果）再Merge回去就行了，与splay操作的思路是差不多的。不过为了在split再merge后能间接对树的平衡性优化，我们不能简单地merge，要套用Treap的随机数法，我们先来看怎么split。&lt;/p&gt;

&lt;p&gt;先定义好接口&lt;code&gt;void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)&lt;/code&gt;，x是返回的左子树，y是返回的右子树，接着我们需要递归split，如果划分点在左子树，那么y一定是根，反之划分点在右子树，那么x一定是根。确定了其中一个，在递归调用的时候，假如y确定了，于是还没确定的，就是x以及根节点的左子树的指向，所以把这两传参就行了，时间复杂度 $O(logn)$ ，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 维护序列的实现
void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
{
    if (!tp) { x = y = 0; return; }
    pushdown(tp);
    if (k &amp;lt;= nodes[ch(tp, 0)].sz)
    {
        y = tp;
        split(ch(tp, 0), k, x, ch(tp, 0));
        update(y);
    }
    else
    {
        x = tp;
        split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
        update(x);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来讲讲merge，我们不能直接把右子树直接接在左子树的最后一个元素后，这样会导致树高度太大。在Treap里面，引入了一个随机值，来决定谁来做根节点，所以，我们就对比这个值，如果左子树的小，那么就让左子树的右儿子与右子树merge，否则就让右子树的左儿子与左子树merge，递归调用就是了，时间复杂度 $O(logn)$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int merge(int tl, int tr)
{
    if (!tl) return tr;
    else if (!tr) return tl;
    if (nodes[tl].k &amp;lt; nodes[tr].k)
    {
        pushdown(tl);
        ch(tl, 1) = merge(ch(tl, 1), tr);
        return update(tl);
    }
    else
    {
        pushdown(tr);
        ch(tr, 0) = merge(tl, ch(tr, 0));
        return update(tr);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;这么快就给模板了？没错，你在理解了Treap以后，再去学习&lt;code&gt;FHQ-Treap&lt;/code&gt;那是相当简单的，最复杂的两个操作已经讲完了，相比Treap，它不需要旋转操作，而通过merge操作来让树平衡，而且这组操作让其它的操作相比Treap都来得简单，最不容易写出BUG，代码也是最短的一个，常数也比splaytree小，所有操作的期望时间复杂度都是 $O(logn)$ 。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct FHQ_Treap
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz, k;
        data d, sum, lz_add;
        node(int z = 1) :sz(z), k(rand()) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    int new_node(const data&amp;amp; d)
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            nodes[id] = node();
        }
        else nodes.push_back(node());
        nodes[id].d = d;
        nodes[id].sum = d;
        return id;
    }
    int update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
        return tp;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            add(n.ch[0], n.lz_add); add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    int merge(int tl, int tr)
    {
        if (!tl) return tr;
        else if (!tr) return tl;
        if (nodes[tl].k &amp;lt; nodes[tr].k)
        {
            pushdown(tl);
            ch(tl, 1) = merge(ch(tl, 1), tr);
            return update(tl);
        }
        else
        {
            pushdown(tr);
            ch(tr, 0) = merge(tl, ch(tr, 0));
            return update(tr);
        }
    }
    void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
    {
        if (!tp) { x = y = 0; return; }
        pushdown(tp);
        if (k &amp;lt;= nodes[ch(tp, 0)].sz)
        {
            y = tp;
            split(ch(tp, 0), k, x, ch(tp, 0));
            update(y);
        }
        else
        {
            x = tp;
            split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
            update(x);
        }
    }
    void remove(int&amp;amp; tp)
    {
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        root = 0;
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int kth(int k)
    {
        int x, y, z;
        split(root, k, y, z); split(y, k - 1, x, y);
        int id = y;
        root = merge(merge(x, y), z);
        return id;
    }
    void insert(int k, data v)
    {
        int l, r;
        split(root, k - 1, l, r);
        int tp = new_node(v);
        root = merge(merge(l, tp), r);
    }
    void erase(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        remove(y);
        root = merge(x, z);
    }
    void range_add(int l, int r, data v)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        add(y, v);
        root = merge(merge(x, y), z);
    }
    T getsum(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        T ret = nodes[y].sum;
        root = merge(merge(x, y), z);
        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是个支持区间加、区间删和区间求和的模板。除了LCT，都交给这个数据结构解决吧。&lt;/p&gt;

&lt;h2 id=&#34;其它问题&#34;&gt;其它问题&lt;/h2&gt;

&lt;p&gt;如果你要问为什么不一开始就介绍这个，而先解释其它的树结构，那是因为那是基础啊，基础搞好了，那再搞这个就很简单了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>平衡树与序列维护</title>
      <link>/post/20191213-tree-sequence/</link>
      <pubDate>Fri, 13 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191213-tree-sequence/</guid>
      <description>&lt;p&gt;平衡树除了用来对存在偏序关系的数据进行维护，还能用于对序列维护，相当于一个数组。阅读本文你需要先看完上一篇关于&lt;a href=&#34;../20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;的文章。&lt;/p&gt;

&lt;h2 id=&#34;序列维护&#34;&gt;序列维护&lt;/h2&gt;

&lt;p&gt;在之前的文章，我们介绍过使用树状数组，以及线段树来维护一个序列，可以做区间操作及区间求和，但它们都存在一个缺点，不能动态插入数据。那我们怎么样才能通过平衡树来维护序列呢，之前我们有一个size字段能快速找第k大（或树的中序遍历第k个元素），而旋转操作并不会改变元素之间的相对顺序，那么我们就通过它直接插入到第k个元素的前面，这样我们插入的时候就不再通过要插入的值本身的大小关系，而需要多加一个参数k决定插入的位置。当平衡树用于维护序列的时候，就不用考虑元素相等的问题了。这样我们把元素相等处理的代码删除并修改基本操作的代码就能得到第一个能维护序列的基本模板，以下模板使用Treap修改得来。&lt;/p&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;以下模板我实现成真·模板，就几乎可以作为数组使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        node(int z = 1) :sz(z), k(rnd()) { d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { if (size() &amp;gt;= reserve_size) nodes.reserve((reserve_size *= 2) + 1); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;动态版本线段树&#34;&gt;动态版本线段树&lt;/h2&gt;

&lt;p&gt;有了这个，我们就可以把它改成动态版本的线段树，就是每个根节点多维护一个sum字段，再加一个懒惰标记，就能实现区间加和区间求和。不过和线段树不同的是，线段树的子树的根只维护区间的结果，而平衡树的根本身就是一个元素，所以代码和线段树略有差别。以下我们实现一个支持区间加和区间求和且能动态增减数据的平衡树，实测与前面讲线段树文章的普通线段树模板，在解决同一问题的执行时间非常接近&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        data sum;
        data lz_add;
        node(int z = 1) :sz(z), k(rnd()) { sum = lz_add = d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; sum = n.sum; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void _add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            _add(n.ch[0], n.lz_add);
            _add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            nodes[tp].sum = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int s = n.ch[r];
        pushdown(s);
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    data getsum(int&amp;amp; tp, int l, int r)
    {
        if (tp == 0 || l &amp;gt;= r) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            return n.sum;
        }
        else
        {
            pushdown(tp);
            data sum = 0;
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                sum = nodes[tp].d;
            }
            sum = sum + getsum(n.ch[0], l, min(sz, r));
            sum = sum + getsum(n.ch[1], max(1, l - sz), r - sz);
            return sum;
        }
    }
    void range_add(int&amp;amp; tp, int l, int r, const data&amp;amp; d)
    {
        if (tp == 0 || l &amp;gt;= r) return;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            _add(tp, d);
        }
        else
        {
            //pushdown(tp);
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                nodes[tp].d = nodes[tp].d + d;
            }
            nodes[tp].sum = nodes[tp].sum + d * (r - l);
            range_add(n.ch[0], l, min(sz, r), d);
            range_add(n.ch[1], max(1, l - sz), r - sz, d);
        }
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { reserve(); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
    T getsum(int l, int r) { return getsum(root, l, r + 1); }
    void range_add(int l, int r, data v) { range_add(root, l, r + 1, v); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;splay-tree&#34;&gt;Splay tree&lt;/h2&gt;

&lt;p&gt;使用以上这个Treap的自由度还是不够好，有些操作还是不容易做，例如区间翻转，或者区间删除。所以我们需要一个功能更为强大的树，因为那个随机数的限制，不能任意节点都能当树根，而没有那个随机数字段的树，就是伸展树Splay tree，区别主要是三个地方，一是需要父节点字段，维护关系时常数更大，二是旋转，使用双旋，三是splay操作，作用是把节点提升到树根。这个splay操作就是神器，能把很多区间操作写得非常简单，代码也确实是目前介绍的树里面代码最少的。不过伸展树的缺点是编码理解难度稍大。&lt;/p&gt;

&lt;p&gt;和其它树的不同点是，为了保证区间操作代码简短，初始化的时候直接插入两个元素作为序列的一头一尾，于是实际操作区间是2到n+1，这个细节要注意，有了这两个元素可以减少很多特判操作。例如说，要找区间&lt;code&gt;[l,r]&lt;/code&gt;，那么只要让位置r+1的元素splay到根，然后再让位置l-1的元素splay到根的左边，那么l-1位的元素的右子树就是整个操作区间了，而为了让这个总是能做，所以才要预先加两个元素。这个技巧用在了几乎所有操作里面，包括插入，删除，所有的区间操作。splay操作的时间复杂度 $O(logn)$&lt;/p&gt;

&lt;p&gt;以下是序列维护用的基本splaytree模板，要改成支持区间求和什么的就自己改吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct splaytree_seq
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], fa, sz;
        data d;
        node(int z = 1) :sz(z) { ch[0] = ch[1] = fa = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    inline int&amp;amp; fa(int tp) { return nodes[tp].fa; }
    inline int rch(int tp) { return ch(fa(tp), 1) == tp; }
    int new_node()
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            fa(recyc) = 0;
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.d = n.d + d;
    }
    void rotate(int s)
    {
        int f1 = fa(s), f2 = fa(f1);
        int d1 = rch(s), d2 = rch(f1);
        ch(f2, d2) = s; fa(s) = f2;
        fa(ch(s, d1 ^ 1)) = f1; ch(f1, d1) = ch(s, d1 ^ 1);
        fa(f1) = s; ch(s, d1 ^ 1) = f1;
        update(f1); update(s);
    }
    void splay(int tp, int goal = 0)
    {
        for (int f; (f = fa(tp)) != goal; rotate(tp))
            if (fa(f) != goal) rotate(rch(tp) == rch(f) ? f : tp);
        if (!goal) root = tp;
    }
    int find_m(int tp, int r)
    {
        int p = tp;
        while (ch(p, r)) p = ch(p, r);
        if (p != tp) splay(p, tp);
        return p;
    }
    int merge(int tl, int tr)
    {
        if (!tl) { fa(tr) = 0; return tr; }
        if (!tr) { fa(tl) = 0; return tl; }
        int p = find_m(tl, 1);
        ch(p, 1) = tr; fa(tr) = p;
        return tl;
    }
    void insert(int k, const data&amp;amp; d)
    {
        int tp = new_node();
        splay(kth(root, k + 1)); splay(kth(root, k), root);
        int c = ch(root, 0);
        nodes[c].ch[1] = tp;
        nodes[tp].fa = c;
        nodes[tp].d = d;
        update(c); update(root);
    }
    void remove(int&amp;amp; tp)
    {
        fa(tp) = 0;
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    int kth(int tp, int k)
    {
        if (tp == 0) return tp;
        node&amp;amp; n = nodes[tp];
        //pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz &amp;gt; k) return kth(n.ch[0], k);
        if (sz &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        nodes.push_back(node()); nodes.push_back(node());
        nodes[1].ch[0] = 2; nodes[1].sz = 2; nodes[2].fa = 1;
        root = 1; // be the bound
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz - 2; }
    int kth(int k) { int id = kth(root, k + 1); splay(id); return id; }
    void erase(int l, int r)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        remove(ch(ch(root, 0), 1));
        update(ch(root, 0)); update(root);
    }
    void range_add(int l, int r, data v)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        add(ch(ch(root, 0), 1), v);
        update(ch(root, 0)); update(root);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上已经直接写好了区间删除，对于区间反转等操作，可以模仿线段树加懒惰标记即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Treap与SBT</title>
      <link>/post/20191211-treap-sbt/</link>
      <pubDate>Wed, 11 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191211-treap-sbt/</guid>
      <description>&lt;p&gt;这里之所以把这两个放在一起讲，是因为它们实在是相似度很高（至少在竞赛领域），都需要求kth和指定元素的rank（Treap的话可有可无，但通常会需要）。不过如果你没有写过树，强烈建议你自己通过理解来写一遍。&lt;/p&gt;

&lt;h2 id=&#34;bst&#34;&gt;BST&lt;/h2&gt;

&lt;p&gt;首先，Treap和SBT都属于BST的一种，BST就是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&#34; target=&#34;_blank&#34;&gt;二叉搜索树&lt;/a&gt;，它满足的特点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;没有两个节点的值相等&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比左子树所有节点的值要大&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比右子树所有节点的值要小&lt;/li&gt;
&lt;li&gt;任意子树均为二叉搜索树&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们实在需要支持多个相同值放在树里面，那么有两种情况，如果那些相同值是确实完全没有区别（例如int），那么只需要在每个节点多加一个字段记录这个值出现的次数就可以了，但如果这些值只有偏序关系，可能不是严格相等，存在其它非比较字段，那么我们就再在每个节点增加一个next域做成一个链表即可。&lt;/p&gt;

&lt;p&gt;基本操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插入(insert)：对比子树的根节点的值r与插入的值v，如果v与r相等，根节点重复数量+1，如果v小于r，插入到左子树，v大于r则插入到右子树&lt;/li&gt;
&lt;li&gt;查找(find)：和插入相似，值相等时返回其id&lt;/li&gt;
&lt;li&gt;删除(erase)：先查找，找到的时候，再查找它的后继（右子树的最小），用后继元素替换后再删除原后继&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;支持简单重复元素的bst模板&#34;&gt;支持简单重复元素的BST模板&lt;/h2&gt;

&lt;p&gt;这个模板还添加了size域，用于求第k小元素和元素排名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct bst
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        return ret;
    }
    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int nxt = nodes[tp].ch[1];
            while (nodes[nxt].ch[0])
                nxt = nodes[nxt].ch[0];
            int dup = nodes[nxt].dup;
            nodes[tp].d = nodes[nxt].d;
            nodes[tp].dup = nodes[nxt].dup;
            recycle.push_back(nxt);
            int* tmp = &amp;amp;nodes[tp].ch[1];
            while (nodes[*tmp].ch[0])
            {
                nodes[*tmp].sz -= dup;
                tmp = &amp;amp;nodes[*tmp].ch[0];
            }
            *tmp = nodes[*tmp].ch[1];
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;一些说明&#34;&gt;一些说明&lt;/h3&gt;

&lt;p&gt;子节点用的节段是ch数组(child的缩写)，不使用left和right的原因是为了节省代码，例如在insert函数里，通过计算&lt;code&gt;d &amp;lt; n.d&lt;/code&gt;的值是0或1决定下一步是递归调用左还是右子节点的时候，就不需要分别针对left和right写代码，后面的find和erase同理。&lt;/p&gt;

&lt;p&gt;rank函数在upper为0的时候，找到的是相同元素里面最小的排名，如果v不存在树里面，那么就是v假如要插入到树里的排名。upper为1的时候，找到的是大于v的最小的元素的排名，即v的后继。&lt;/p&gt;

&lt;p&gt;kth函数的参数如果非法，会导致无限循环，如果你想避免那么你可以在函数里添加检查，例如加一句&lt;code&gt;if (tp == 0) return 0;&lt;/code&gt;即可。&lt;/p&gt;

&lt;h2 id=&#34;优化bst&#34;&gt;优化BST&lt;/h2&gt;

&lt;p&gt;单纯的BST最大的问题是，它最坏的情况是可能成为一条链表，例如你按从小到大插入到树里面的时候，缺乏让它缩减树高的机制，所以接下来要讲两个非常重要的操作，就是树的旋转&lt;/p&gt;

&lt;p&gt;图A&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
4--&amp;gt;2
2--&amp;gt;1
2--&amp;gt;3
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图B&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
2--&amp;gt;4
4--&amp;gt;3
2--&amp;gt;1
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上两图，从A到B叫做zig，把左儿子旋转到root的位置，也叫右旋，B到A叫做zag，把右儿子旋转到root的位置，也叫左旋，旋转代码也很简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    tp = s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上参数r如果是0，就是zig，r是1就是zag。有了旋转操作，我们就可以开始看自平衡树了。&lt;/p&gt;

&lt;h2 id=&#34;treap&#34;&gt;Treap&lt;/h2&gt;

&lt;p&gt;Treap其实炒鸡简单，在BST的基础上多一个随机数生成的字段，这个字段用于决定树要怎么旋转。这个字段就是个优先级，父节点的优先级不大于两个子节点的优先级，这其实就是heap，所以，Treap就是树堆（Tree-heap）。维护Treap，我们只需要在insert的时候，检查是不是满足heap，如果不满足就旋转，相对BST只加了非常少的代码，也就加了rotate函数，rnd函数（直接用rand也行），insert加了维护，以及旋转时需要的update函数维护size字段，也就是说Treap是最经济实惠的平衡树。&lt;/p&gt;

&lt;p&gt;操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新(update): 累加左右子树的size&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除(erase): 找到要删除的元素后，对比两子树的根的优先级，把较的小旋转到原来要删除的元素的位置，使要删除的元素的深度+1，直到删除的元素没有两个子树为止&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct treap
{
struct data
{
    int v;
    data(int _v = 0) :v(_v) {}
    bool operator==(const data&amp;amp; d) const
    {
        return v == d.v;
    }
    bool operator&amp;lt;(const data&amp;amp; d) const
    {
        return v &amp;lt; d.v;
    }
};
struct node
{
    int ch[2], sz, dup;
    unsigned k;
    data d;
    node(int z = 1) :sz(z), dup(z), k(rnd()) { ch[0] = ch[1] = 0; }
    static unsigned rnd()
    {
        static unsigned r = 0x123;
        r = r * 69069 + 1;
        return r;
    }
};
vector&amp;lt;node&amp;gt; nodes;
vector&amp;lt;int&amp;gt; recycle;
int root;
int reserve_size;
void reserve()
{
    if (size() &amp;gt;= reserve_size)
        nodes.reserve((reserve_size *= 2) + 1);
}
int new_node()
{
    int id = (int)nodes.size();
    if (!recycle.empty())
    {
        id = recycle.back();
        recycle.pop_back();
        nodes[id] = node();
    }
    else nodes.push_back(node());
    return id;
}
void update(int tp)
{
    node&amp;amp; n = nodes[tp];
    n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
}
int insert(int&amp;amp; tp, const data&amp;amp; d)
{
    if (tp == 0)
    {
        tp = new_node();
        nodes[tp].d = d;
        return tp;
    }
    node&amp;amp; n = nodes[tp];
    ++n.sz;
    if (d == n.d)
    {
        ++n.dup;
        return tp;
    }
    int r = d &amp;lt; n.d;
    int&amp;amp; s = n.ch[r ^ 1];
    int ret = insert(s, d);
    if (nodes[s].k &amp;lt; n.k) rotate(tp, r ^ 1), update(tp);
    return ret;
}
void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    update(tp);
    tp = s;
}
int find(int tp, const data&amp;amp; d) // return id
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d) return tp;
    return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
}
int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d)
    {
        --nodes[tp].sz;
        if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
        return 1;
    }
    if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
    {
        --nodes[tp].sz;
        return 1;
    }
    return 0;
}
void remove(int&amp;amp; tp)
{
    if (tp == 0) return;
    if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
    {
        recycle.push_back(tp);
        tp = nodes[tp].ch[!nodes[tp].ch[0]];
    }
    else
    {
        int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
        rotate(tp, r ^ 1);
        remove(nodes[tp].ch[r]);
        update(tp);
    }
}
int kth(int tp, int k) // return id
{
    node&amp;amp; n = nodes[tp];
    int sz = nodes[n.ch[0]].sz;
    if (sz &amp;gt;= k) return kth(n.ch[0], k);
    if (sz + n.dup &amp;gt;= k) return tp;
    return kth(n.ch[1], k - sz - n.dup);
}
int rank(int tp, const data&amp;amp; d, int dup)
{
    if (tp == 0) return 1;
    node&amp;amp; n = nodes[tp];
    if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
    else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
    return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
}
// interface
void init(int size)
{
    nodes.clear();
    recycle.clear();
    nodes.reserve(size + 1);
    nodes.push_back(node(0));
    root = 0; reserve_size = size;
}
int get(int id) { return nodes[id].d.v; }
int size() { return nodes[root].sz; }
int insert(data v) { reserve(); return insert(root, v); }
int erase(data v) { return erasefind(root, v); }
int find(data v) { return find(root, v); } // return id
int kth(int k) { return kth(root, k); } // return id
// upperbound when upper = 1
int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sbt&#34;&gt;SBT&lt;/h2&gt;

&lt;p&gt;这个名字和BST特别像，但它全名是&lt;code&gt;Size Balanced Tree&lt;/code&gt;，作者是&lt;a href=&#34;https://www.zhihu.com/question/30541674&#34; target=&#34;_blank&#34;&gt;CQF&lt;/a&gt;，它通过size字段来进行树平衡。它的关键操作叫做&lt;code&gt;maintain&lt;/code&gt;，这个操作的平摊复杂度是 $O(1)$ ，这货具体解释可以看CQF的论文，SBT的时间常数比Treap更小一些，内存也更小，不过代码也稍长一些（就是因为&lt;code&gt;maintain&lt;/code&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct sbt
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        maintain(tp, r ^ 1);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    void maintain(int&amp;amp; tp, int s)
    {
        if (tp == 0) return;
        if (nodes[nodes[nodes[tp].ch[s]].ch[s]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
            rotate(tp, s);
        else if (nodes[nodes[nodes[tp].ch[s]].ch[s ^ 1]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
        {
            rotate(nodes[tp].ch[s], s ^ 1);
            rotate(tp, s);
        }
        else return;

        maintain(nodes[tp].ch[s], s);
        maintain(nodes[tp].ch[s ^ 1], s ^ 1);
        maintain(tp, s);
        maintain(tp, s ^ 1);
    }

    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].sz &amp;gt;= nodes[nodes[tp].ch[1]].sz;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;温馨提示&#34;&gt;温馨提示&lt;/h2&gt;

&lt;p&gt;别看代码长，如果你还没自己实现过，硬着头皮写一次，你就懂了，核心其实只有那么点。以上没有实现插入相等元素后用链表串起来，实在有需要时自己加一下就好了。又或者，如果你不需要处理相同元素，那么代码也有不少的简化，特别是删除元素的地方。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
