<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>模板 | Baobaobear</title>
    <link>/tags/%E6%A8%A1%E6%9D%BF/</link>
      <atom:link href="/tags/%E6%A8%A1%E6%9D%BF/index.xml" rel="self" type="application/rss+xml" />
    <description>模板</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 28 Feb 2021 00:00:00 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>模板</title>
      <link>/tags/%E6%A8%A1%E6%9D%BF/</link>
    </image>
    
    <item>
      <title>大整数高精度计算1——基础算法</title>
      <link>/post/20210228-bigint1/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0800</pubDate>
      <guid>/post/20210228-bigint1/</guid>
      <description>&lt;p&gt;最近在编写大整数库的过程中，踩到不少的坑，于是把一些有用的细节准备写成文章做整理。如果你只是想直接查找并使用一个大整数库，那直接上GMP即可，如果是用在比赛，那直接用我的&lt;a href=&#34;https://github.com/Baobaobear/MiniBigInteger&#34; target=&#34;_blank&#34;&gt;MiniBigInteger项目&lt;/a&gt;，如果你是想学习个中细节，那你可以坐下来细品。&lt;/p&gt;

&lt;p&gt;所谓大整数，又叫高精度运算，就是运算对象是上千位甚至到百万位，总之远远超过内置数据类型的表示范围，这类数字都叫大整数。而C/C++的标准库里目前并没有大整数库，于是这个轮子被反复制造了无数个，不过在github上比较有质量的轮子并没有很多。本文除了介绍基础实现，主要还是介绍优化方法。&lt;/p&gt;

&lt;h2 id=&#34;大整数的表示&#34;&gt;大整数的表示&lt;/h2&gt;

&lt;p&gt;大整数的表示方法最常见的有4种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接使用string&lt;/li&gt;
&lt;li&gt;使用定长数组(仅适用于竞赛)&lt;/li&gt;
&lt;li&gt;使用链表&lt;/li&gt;
&lt;li&gt;使用变长线性表例如vector&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;直接用string的方式适合初学者，输入输出直观，但缺点也非常明显，因为计算时需要在字符与数值之间来回转换，浪费太多不必要的时间，效率会非常差。不过如果你是初学者，先用string表示法来写未尝不是个好主意。但有个细节就是，如果想要效率高，最好把string前后倒置调整为低位在前再做运算，这样速度和实现难度都会低一些。&lt;/p&gt;

&lt;p&gt;至于使用链表，好处是变长容易，变短也不难，但性能比用string的更差还更难写，这里就不谈了，以下介绍使用数组的表示法&lt;/p&gt;

&lt;p&gt;为了在数组里表示一个大整数，如果我们采用10进制，表示&lt;code&gt;123456789&lt;/code&gt;，那很简单，例如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int a[] = {9, 8, 7, 6, 5, 4, 3, 2, 1};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即&lt;code&gt;a[0]&lt;/code&gt;表示个位，&lt;code&gt;a[1]&lt;/code&gt;表示十位，如此类推。之所以这样做，是希望同一个位置的元素的含义是固定的，这样能简化后面的算法编写。&lt;/p&gt;

&lt;p&gt;但是，对于计算机来说，这样表示实在是太浪费空间和时间，我们还可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int a[] = {6789, 2345, 1};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是说，采用10000进制，那么这个10000叫做&lt;code&gt;基数&lt;/code&gt;或&lt;code&gt;base&lt;/code&gt;。我们还可以视情况使用其它的基数，例如使用$2^{16}$或$2^{32}$等等。对于这种我们原始进制是b的情况，但通过更大的基数$b^n$来表示的方法，叫做&lt;code&gt;压位高精度&lt;/code&gt;，n就是压的位数。压位高精度的运算效率远超非压位。&lt;/p&gt;

&lt;p&gt;以下我们用万进制来做一步步的演示，首先定义出这个类，在这里我用vector来保存（没有必要采用定长数组，因为效率没啥区别，除非你的OJ就不给加&lt;code&gt;O2&lt;/code&gt;优化例如某谷或参加某些信息竞赛）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct BigIntSimple {
    static const int BIGINT_BASE = 10000;
    static const int BIGINT_DIGITS = 4;

    int sign; //1表示正数，-1表示负数
    std::vector&amp;lt;int&amp;gt; v;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是这里有一个问题，0怎么表示？在这里规定0的sign为1，且v的长度为1，这种约定可以在后期简化一些代码。当然你也可以规定v的长度为0，你怎么约定就怎么写代码即可。&lt;/p&gt;

&lt;h2 id=&#34;大整数的基本运算&#34;&gt;大整数的基本运算&lt;/h2&gt;

&lt;p&gt;实现一个功能还算得上完整的大整数，需要的基本运算有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;比较运算&lt;/li&gt;
&lt;li&gt;字符串输入&lt;/li&gt;
&lt;li&gt;字符串输出&lt;/li&gt;
&lt;li&gt;加法&lt;/li&gt;
&lt;li&gt;减法&lt;/li&gt;
&lt;li&gt;乘法&lt;/li&gt;
&lt;li&gt;除法及求余&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-比较运算&#34;&gt;1. 比较运算&lt;/h3&gt;

&lt;p&gt;大整数的比较很简单，先判断符号，符号不同再看位数，位数不同再从最高位一位一位比就行。但是我们其实更需要一个按绝对值比较的函数（后面的运算会需要它），那么先写一个无视符号的比较版本，再在运算符重载处判断符号即可。&lt;/p&gt;

&lt;h3 id=&#34;2-字符串输入输出&#34;&gt;2. 字符串输入输出&lt;/h3&gt;

&lt;p&gt;对于输入输出的字符串进制与该大整数的基相同时，输入输出直接映射转换即可，对于不同进制的输入输出在后面再做介绍，以下是实现了输入输出及一些基础功能的版本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct BigIntSimple {
    static const int BIGINT_BASE = 10000;
    static const int BIGINT_DIGITS = 4;

    int sign; //1表示正数，-1表示负数
    std::vector&amp;lt;int&amp;gt; v;

    //定义0也需要长度1
    BigIntSimple() {
        sign = 1;
        v.push_back(0);
    }
    BigIntSimple(int n) {
        *this = n;
    }
    //判断是否为0
    bool iszero() const {
        return v.size() == 1 &amp;amp;&amp;amp; v.back() == 0;
    }
    //消除前导0并修正符号
    void trim() {
        while (v.back() == 0 &amp;amp;&amp;amp; v.size() &amp;gt; 1)
            v.pop_back();
        if (iszero())
            sign = 1;
    }
    //获取pos位置上的数值，用于防越界，简化输入处理
    int get(unsigned pos) const {
        if (pos &amp;gt;= v.size())
            return 0;
        return v[pos];
    }
    //绝对值大小比较
    bool absless(const BigIntSimple &amp;amp;b) const {
        if (v.size() == b.v.size()) {
            for (size_t i = v.size() - 1; i &amp;lt; v.size(); --i)
                if (v[i] != b.v[i])
                    return v[i] &amp;lt; b.v[i];
            return false;
        } else {
            return v.size() &amp;lt; b.v.size();
        }
    }
    //字符串输入
    void set(const char *s) {
        v.clear();
        sign = 1;
        //处理负号
        while (*s == &#39;-&#39;)
            sign = -sign, ++s;
        //先按数位直接存入数组里
        for (size_t i = 0; s[i]; ++i)
            v.push_back(s[i] - &#39;0&#39;);
        std::reverse(v.begin(), v.end());
        //压位处理，e是压位后的长度
        size_t e = (v.size() + BIGINT_DIGITS - 1) / BIGINT_DIGITS;
        for (size_t i = 0, j = 0; i &amp;lt; e; ++i, j += BIGINT_DIGITS) {
            v[i] = v[j]; //设置压位的最低位
            //高位的按每一位上的数值乘以m，m是该位的权值
            for (size_t k = 1, m = 10; k &amp;lt; BIGINT_DIGITS; ++k, m *= 10)
                v[i] += get(j + k) * m;
        }
        //修正压位后的长度
        if (e) {
            v.resize(e);
            trim();
        } else {
            v.resize(1);
        }
    }
    //字符串输出
    std::string to_str() const {
        std::string s;
        for (size_t i = 0; i &amp;lt; v.size(); ++i) {
            int d = v[i];
            //拆开压位
            for (size_t k = 0; k &amp;lt; BIGINT_DIGITS; ++k) {
                s += d % 10 + &#39;0&#39;;
                d /= 10;
            }
        }
        //去除前导0
        while (s.size() &amp;gt; 1 &amp;amp;&amp;amp; s.back() == &#39;0&#39;)
            s.pop_back();
        //补符号
        if (sign &amp;lt; 0)
            s += &#39;-&#39;;
        //不要忘记要逆序
        std::reverse(s.begin(), s.end());
        return s;
    }

    BigIntSimple &amp;amp;operator=(int n) {
        v.clear();
        sign = n &amp;gt;= 0 ? 1 : -1;
        for (n = abs(n); n; n /= BIGINT_BASE)
            v.push_back(n % BIGINT_BASE);
        if (v.empty())
            v.push_back(0);
        return *this;
    }

    BigIntSimple &amp;amp;operator=(const std::string &amp;amp;s) {
        set(s.c_str());
        return *this;
    }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下文的介绍为了不重复，就不带上以上的代码了&lt;/p&gt;

&lt;h3 id=&#34;3-加法和减法&#34;&gt;3. 加法和减法&lt;/h3&gt;

&lt;p&gt;加法和减法都挺简单，核心思想就是模拟手工竖式，手工怎么算它就怎么算。要注意的点就是符号的处理。&lt;/p&gt;

&lt;p&gt;另外，还有一些小优化，加法进位的时候，这个if是可以简单省略掉的，用求模和除法运算即可。即当前位是&lt;code&gt;sum % base&lt;/code&gt;，进位是&lt;code&gt;sum / base&lt;/code&gt;。示例代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            carry += r.v[i] + b.v[i];
            r.v[i] = carry % BIGINT_BASE;
            carry /= BIGINT_BASE;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但除法就没这么简单了，这时候还可以利用位运算来区分正负，比如，我们用当前位是&lt;code&gt;sum - (sum &amp;gt;&amp;gt; 31) * base&lt;/code&gt;，因为如果sum是负数，那么&lt;code&gt;sum &amp;gt;&amp;gt; 31&lt;/code&gt;在sum是int时就等于-1，相当于&lt;code&gt;sum + base&lt;/code&gt;；而如果sum是非负数，那么&lt;code&gt;sum &amp;gt;&amp;gt; 31&lt;/code&gt;就是0，结果就相当于&lt;code&gt;sum&lt;/code&gt;，这样就成功实现了&lt;code&gt;sum&amp;lt;0 ? sum+base : sum&lt;/code&gt;的逻辑。而这种方法同样可以用在加法上。另外，在较新的CPU上除法的性能比较高的时候，加法这种改进写法就会被淘汰。&lt;/p&gt;

&lt;p&gt;其它的细节在以下代码的注释中有标注&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;    BigIntSimple operator-() const {
        BigIntSimple r = *this;
        r.sign = -r.sign;
        return r;
    }

    BigIntSimple operator+(const BigIntSimple &amp;amp;b) const {
        //符号不同时转换为减法
        if (sign != b.sign)
            return *this - -b;
        BigIntSimple r = *this;
        //填充高位
        if (r.v.size() &amp;lt; b.v.size())
            r.v.resize(b.v.size());
        int carry = 0;
        //逐位相加
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            carry += r.v[i] + b.v[i] - BIGINT_BASE;
            r.v[i] = carry - BIGINT_BASE * (carry &amp;gt;&amp;gt; 31);
            carry = (carry &amp;gt;&amp;gt; 31) + 1;
        }
        //处理进位，拆两个循环来写是避免做 i &amp;lt; b.v.size() 的判断
        for (size_t i = b.v.size(); carry &amp;amp;&amp;amp; i &amp;lt; r.v.size(); ++i) {
            carry += r.v[i] - BIGINT_BASE;
            r.v[i] = carry - BIGINT_BASE * (carry &amp;gt;&amp;gt; 31);
            carry = (carry &amp;gt;&amp;gt; 31) + 1;
        }
        //处理升位进位
        if (carry)
            r.v.push_back(carry);
        return r;
    }

    BigIntSimple &amp;amp;subtract(const BigIntSimple &amp;amp;b) {
        int borrow = 0;
        //先处理b的长度
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            borrow += v[i] - b.v[i];
            v[i] = borrow;
            v[i] -= BIGINT_BASE * (borrow &amp;gt;&amp;gt;= 31);
        }
        //如果还有借位就继续处理
        for (size_t i = b.v.size(); borrow; ++i) {
            borrow += v[i];
            v[i] = borrow;
            v[i] -= BIGINT_BASE * (borrow &amp;gt;&amp;gt;= 31);
        }
        //减法可能会出现前导0需要消去
        trim();
        return *this;
    }

    BigIntSimple operator-(const BigIntSimple &amp;amp;b) const {
        //符号不同时转换为加法
        if (sign != b.sign)
            return (*this) + -b;
        if (absless(b)) { //保证大数减小数
            BigIntSimple r = b;
            return -r.subtract(*this);
        } else {
            BigIntSimple r = *this;
            return r.subtract(b);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-乘法&#34;&gt;4. 乘法&lt;/h3&gt;

&lt;p&gt;本文不区分高精度乘以低精度，和高精度乘以高精度，下文的除法也一样，因为实在没有这个必要分开写，以下直接介绍的是高精度乘以高精度。&lt;/p&gt;

&lt;p&gt;乘法可以看成在加法外面再套一层循环，内循环相比加法多了一个偏移和一个乘法。但是由于进位的值不会只是1，所以那个位运算方法在这里不能使用，只能用求模了。以下直接上代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;    BigIntSimple operator*(const BigIntSimple &amp;amp;b) const {
        //r记录相加结果
        BigIntSimple r;
        r.v.resize(v.size() + b.v.size()); //初始化长度
        for (size_t j = 0; j &amp;lt; v.size(); ++j) {
            int carry = 0, m = v[j]; //m用来缓存乘数
            //carry可能很大，只能使用求模的办法，此循环与加法部分几乎相同，就多乘了个m
            for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
                carry += r.v[i + j] + b.v[i] * m;
                r.v[i + j] = carry % BIGINT_BASE;
                carry /= BIGINT_BASE;
            }
            r.v[j + b.v.size()] += carry;
        }
        r.trim();
        r.sign = sign * b.sign;
        return r;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-除法和求余&#34;&gt;5. 除法和求余&lt;/h3&gt;

&lt;p&gt;除法是高精度的基础算法里面变化最多的，也是基础算法里面最难的，网上也有很多不同的写法，顺带说一说一些误区，同时这里提供一个我自己的写法，不过此法有限制条件，但在限制条件内应该是模拟手工的方法里面速度较快的。&lt;/p&gt;

&lt;p&gt;第一种就是暴力整体二分，然后做乘法验证（或者利用二进制一位一位来确定，但却不使用移位减法，而使用整体相乘），这时候，设是2n位除以n位，那么二分的次数就是n，然后一次乘法是n^2，所以整体复杂度是$O(n^3)$，这是一个非常糟糕的方法，虽然写起来似乎更简单，但时间上还不如直接模拟，千万不要做整体二分。类似地还有二分开方，也是$O(n^3)$。&lt;/p&gt;

&lt;p&gt;在模拟手工除法时，最关键的就是试商的部分，试商方法有很多，最简单的方式是用减法，先判断余数是不是大于等于除数，如果是，就做一次减法。这个写法确实容易，但问题是效率低下，除非你用的基数特别小，比如不压位10进制，这样速度还能看，甚至乎你用的是$2^n$进制，直接每个位枚举。&lt;/p&gt;

&lt;p&gt;那我们来个二分呢？如果在每一位上分别二分，那在基数较大的时候比做减法好一些，但还是不够好，我们还需要更快的方案，进一步减少试商次数。&lt;/p&gt;

&lt;p&gt;假设被除数有4个位，是$a_4,a_3,a_2,a_1$，除数有3个位，是$b_3,b_2,b_1$，那么我们只要试一位的商（多个位就是一位的写法加个循环），假如我们用$\dfrac{a_4 base+a_3}{b_3}$来试商，结果一定大于等于实际的商，但同时这会有一个问题，就是假如b2等于&lt;code&gt;base-1&lt;/code&gt;，那会导致试商与实际的商误差非常大，例如&lt;code&gt;9999,0000&lt;/code&gt;除以&lt;code&gt;1,9999&lt;/code&gt;，直接用高位除得到9999，但这远超过实际商了，修正商的代价也不小。于是，我们想到，在&lt;code&gt;base&lt;/code&gt;不太大的情况下，我们可以通过增加位数来估商，这样误差就会小得多。比如说我们用$\dfrac{a_4 base^2 + a_3 base + a_2}{b_3 base + b_2}$来试商，精度确实会大为提高，而且商的误差最多只有1，但缺点是，$a_4 base^2$的结果超出int的范围了，不过我们还可以用double。注意到，上式中a2对结果并没有任何影响，所以可以变形为$\dfrac{a_4 base + a_3}{b_3 + b_2/base}$。另外，我不希望这个估商总比实际商大，我们希望是小于等于实际商，这样在试后一位的时候，这个结果能自然得到修正，就增加了试商的效率，于是可以把式子改为$\dfrac{a_4 base + a_3}{b_3 + (b_2+1)base^{-1}}$，但这个+1导致误差增大，与实际商的误差最大达到2，那解决方法很简单，我们再增加1位的精度，得到式子$\dfrac{a_4 base + a_3}{b_3 + b_2 base^{-1} + (b_1+1)base^{-2}}$，于是便得到接下来在代码中所使用的算法。由于误差不超过1，如果估小了，那在下一位的估商时候就会产生补回去的效果，于是不必重复试商。这个方法要求&lt;code&gt;base&amp;lt;=32768&lt;/code&gt;以避免各种溢出，在满足此条件下，因为每个位均只需要估一次，那么其时间常数与乘法相比，和减法与加法常数比是几乎相同的。&lt;/p&gt;

&lt;p&gt;但是，有一个非常极端的情况，既然商最大误差是1，那么相当于余数的最大误差就等于除数，那如果除数特别大呢？举个例子，求&lt;code&gt;9999,9999,9999,9999/9999,9999,9999&lt;/code&gt;，用上面的方法，高一位的试商结果是0，次一位的试商是9999（实际商是10000），相减得到余数&lt;code&gt;1,0000,0000,9998&lt;/code&gt;，结果最高位并没有减到0，于是不能继续移位，需要在同一位再一次试商。但虽然在同一位试商两次，但后一位就不用做减法了，均摊还是n次。&lt;/p&gt;

&lt;p&gt;算法有了，该处理细节了，除法需要一个减法函数，不过这个函数对借位的处理和之前的减法可不一样，因为可能一次借n个，那就产生了一个问题：对负数求模。负数求模的结果和正数很不一样，所以如果还是要避免if做判断处理，那就要再换个方法，我承认我很菜，花了很久时间才想到这个法子，实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;    //对b乘以mul再左移offset的结果相减，为除法服务
    BigIntSimple &amp;amp;sub_mul(const BigIntSimple &amp;amp;b, int mul, int offset) {
        if (mul == 0)
            return *this;
        int borrow = 0;
        //与减法不同的是，borrow可能很大，不能使用减法的写法
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            borrow += v[i + offset] - b.v[i] * mul - BIGINT_BASE + 1;
            v[i + offset] = borrow % BIGINT_BASE + BIGINT_BASE - 1;
            borrow /= BIGINT_BASE;
        }
        //如果还有借位就继续处理
        for (size_t i = b.v.size(); borrow; ++i) {
            borrow += v[i + offset] - BIGINT_BASE + 1;
            v[i + offset] = borrow % BIGINT_BASE + BIGINT_BASE - 1;
            borrow /= BIGINT_BASE;
        }
        return *this;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码关键点就是这两行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;borrow += v[i + offset] - b.v[i] * mul - BIGINT_BASE + 1;
v[i + offset] = borrow % BIGINT_BASE + BIGINT_BASE - 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心思想是通过减去base统一在负数段求模后，再加上base回来，这样也达到避免if，避免if的写法比带if的写法时间上可以节省一半，不清楚有没有性能更好的做法。以下为除法及求余的具体实现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;    BigIntSimple div_mod(const BigIntSimple &amp;amp;b, BigIntSimple &amp;amp;r) const {
        BigIntSimple d;
        r = *this;
        if (absless(b)) return d;
        d.v.resize(v.size() - b.v.size() + 1);
        //提前算好除数的最高三位+1的倒数，若最高三位是a3,a2,a1
        //那么db是a3+a2/base+(a1+1)/base^2的倒数，最后用乘法估商的每一位
        //此法在BIGINT_BASE&amp;lt;=32768时可在int32范围内用
        //但即使使用int64，那么也只有BIGINT_BASE&amp;lt;=131072时可用（受double的精度限制）
        //能保证估计结果q&#39;与实际结果q的关系满足q&#39;&amp;lt;=q&amp;lt;=q&#39;+1
        //所以每一位的试商平均只需要一次，只要后面再统一处理进位即可
        //如果要使用更大的base，那么需要更换其它试商方案
        double t = (b.get((unsigned)b.v.size() - 2) +
                    (b.get((unsigned)b.v.size() - 3) + 1.0) / BIGINT_BASE);
        double db = 1.0 / (b.v.back() + t / BIGINT_BASE);
        for (size_t i = v.size() - 1, j = d.v.size() - 1; j &amp;lt;= v.size();) {
            int rm = r.get(i + 1) * BIGINT_BASE + r.get(i);
            int m = std::max((int)(db * rm), r.get(i + 1));
            r.sub_mul(b, m, j);
            d.v[j] += m;
            if (!r.get(i + 1)) //检查最高位是否已为0，避免极端情况
                --i, --j;
        }
        r.trim();
        //修正结果的个位
        int carry = 0;
        while (!r.absless(b)) {
            r.subtract(b);
            ++carry;
        }
        //修正每一位的进位
        for (size_t i = 0; i &amp;lt; d.v.size(); ++i) {
            carry += d.v[i];
            d.v[i] = carry % BIGINT_BASE;
            carry /= BIGINT_BASE;
        }
        d.trim();
        d.sign = sign * b.sign;
        return d;
    }

    BigIntSimple operator/(const BigIntSimple &amp;amp;b) const {
        BigIntSimple r;
        return div_mod(b, r);
    }

    BigIntSimple operator%(const BigIntSimple &amp;amp;b) const {
        BigIntSimple r;
        div_mod(b, r);
        return r;
        //return *this - *this / b * b;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;求余就不说了，有求商之后代码仅一行&lt;code&gt;return *this - *this / b * b&lt;/code&gt;，而且这样写与C语言规则一致，模与被除数符号相同。当然以上代码实现的&lt;code&gt;div_mod&lt;/code&gt;函数本身就把商和余数同时求出，就可以直接调用而少了乘法和减法。&lt;/p&gt;

&lt;p&gt;但是，现在系统几乎都是64位的，于是在64位下我们就应该考虑更大的base，例如说使用亿进制，最大限度利用64位带来的性能提升。但是，如果我们使用大的base，那么考虑到double的精度，前面的试商法就失效了，甚至于连base的平方都超出double能精确表示的范围，那这时候应该怎么办呢？为了方便描述，这里我们假设用的是$2^{n}$进制，且n&amp;gt;=18，而double的尾数是53位，于是$log_2base^3=3n=54&amp;gt;53$，这就是令原问题失效的边界。但是，我们真的需要3n长度的尾数吗？确实并不需要，我们的base的精度是n位，只需要再增加k位，只要n+k到53还有一些距离就行，把这个数看成是浮点数，同样地，把被除数和除数都看成浮点数，那我们的除数如何进行+1操作呢？比如说除数表示为$b_3b_2b_1$，那我们让$b_3$右移n+k位加上去，不就相当于+1了。这个方法需要考虑到下一个数估商超过base大小的情况，所以要注意base不能超过$2^{30}$，如果你要使用$2^{32}$，那又得换一个办法了。在实际操作中，我令k=n/2，这样操作起来更为方便，具体请参阅我的&lt;a href=&#34;https://github.com/Baobaobear/MiniBigInteger&#34; target=&#34;_blank&#34;&gt;MiniBigInteger&lt;/a&gt;项目。&lt;/p&gt;

&lt;h2 id=&#34;完整模板&#34;&gt;完整模板&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct BigIntSimple {
    static const int BIGINT_BASE = 10000;
    static const int BIGINT_DIGITS = 4;

    int sign; // 1表示正数，-1表示负数
    std::vector&amp;lt;int&amp;gt; v;

    //定义0也需要长度1
    BigIntSimple() {
        sign = 1;
        v.push_back(0);
    }
    BigIntSimple(int n) { *this = n; }
    //判断是否为0
    bool iszero() const { return v.size() == 1 &amp;amp;&amp;amp; v.back() == 0; }
    //消除前导0并修正符号
    void trim() {
        while (v.back() == 0 &amp;amp;&amp;amp; v.size() &amp;gt; 1)
            v.pop_back();
        if (iszero()) sign = 1;
    }
    //获取pos位置上的数值，用于防越界，简化输入处理
    int get(unsigned pos) const {
        if (pos &amp;gt;= v.size()) return 0;
        return v[pos];
    }
    //绝对值大小比较
    bool absless(const BigIntSimple &amp;amp;b) const {
        if (v.size() == b.v.size()) {
            for (size_t i = v.size() - 1; i &amp;lt; v.size(); --i)
                if (v[i] != b.v[i]) return v[i] &amp;lt; b.v[i];
            return false;
        } else {
            return v.size() &amp;lt; b.v.size();
        }
    }
    //字符串输入
    void set(const char *s) {
        v.clear();
        sign = 1;
        //处理负号
        while (*s == &#39;-&#39;)
            sign = -sign, ++s;
        //先按数位直接存入数组里
        for (size_t i = 0; s[i]; ++i)
            v.push_back(s[i] - &#39;0&#39;);
        std::reverse(v.begin(), v.end());
        //压位处理，e是压位后的长度
        size_t e = (v.size() + BIGINT_DIGITS - 1) / BIGINT_DIGITS;
        for (size_t i = 0, j = 0; i &amp;lt; e; ++i, j += BIGINT_DIGITS) {
            v[i] = v[j]; //设置压位的最低位
            //高位的按每一位上的数值乘以m，m是该位的权值
            for (size_t k = 1, m = 10; k &amp;lt; BIGINT_DIGITS; ++k, m *= 10)
                v[i] += get(j + k) * m;
        }
        //修正压位后的长度
        if (e) {
            v.resize(e);
            trim();
        } else {
            v.resize(1);
        }
    }
    //字符串输出
    std::string to_str() const {
        std::string s;
        for (size_t i = 0; i &amp;lt; v.size(); ++i) {
            int d = v[i];
            //拆开压位
            for (size_t k = 0; k &amp;lt; BIGINT_DIGITS; ++k) {
                s += d % 10 + &#39;0&#39;;
                d /= 10;
            }
        }
        //去除前导0
        while (s.size() &amp;gt; 1 &amp;amp;&amp;amp; s.back() == &#39;0&#39;)
            s.pop_back();
        //补符号
        if (sign &amp;lt; 0) s += &#39;-&#39;;
        //不要忘记要逆序
        std::reverse(s.begin(), s.end());
        return s;
    }

    bool operator&amp;lt;(const BigIntSimple &amp;amp;b) const {
        if (sign == b.sign) {
            return sign &amp;gt; 0 ? absless(b) : b.absless(*this);
        } else {
            return sign &amp;lt; 0;
        }
    }

    BigIntSimple &amp;amp;operator=(int n) {
        v.clear();
        sign = n &amp;gt;= 0 ? 1 : -1;
        for (n = abs(n); n; n /= BIGINT_BASE)
            v.push_back(n % BIGINT_BASE);
        if (v.empty()) v.push_back(0);
        return *this;
    }

    BigIntSimple &amp;amp;operator=(const std::string &amp;amp;s) {
        set(s.c_str());
        return *this;
    }

    BigIntSimple operator-() const {
        BigIntSimple r = *this;
        r.sign = -r.sign;
        return r;
    }

    BigIntSimple operator+(const BigIntSimple &amp;amp;b) const {
        //符号不同时转换为减法
        if (sign != b.sign) return *this - -b;
        BigIntSimple r = *this;
        //填充高位
        if (r.v.size() &amp;lt; b.v.size()) r.v.resize(b.v.size());
        int carry = 0;
        //逐位相加
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            carry += r.v[i] + b.v[i] - BIGINT_BASE;
            r.v[i] = carry - BIGINT_BASE * (carry &amp;gt;&amp;gt; 31);
            carry = (carry &amp;gt;&amp;gt; 31) + 1;
        }
        //处理进位，拆两个循环来写是避免做 i &amp;lt; b.v.size() 的判断
        for (size_t i = b.v.size(); carry &amp;amp;&amp;amp; i &amp;lt; r.v.size(); ++i) {
            carry += r.v[i] - BIGINT_BASE;
            r.v[i] = carry - BIGINT_BASE * (carry &amp;gt;&amp;gt; 31);
            carry = (carry &amp;gt;&amp;gt; 31) + 1;
        }
        //处理升位进位
        if (carry) r.v.push_back(carry);
        return r;
    }

    BigIntSimple &amp;amp;subtract(const BigIntSimple &amp;amp;b) {
        int borrow = 0;
        //先处理b的长度
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            borrow += v[i] - b.v[i];
            v[i] = borrow;
            v[i] -= BIGINT_BASE * (borrow &amp;gt;&amp;gt;= 31);
        }
        //如果还有借位就继续处理
        for (size_t i = b.v.size(); borrow; ++i) {
            borrow += v[i];
            v[i] = borrow;
            v[i] -= BIGINT_BASE * (borrow &amp;gt;&amp;gt;= 31);
        }
        //减法可能会出现前导0需要消去
        trim();
        return *this;
    }

    BigIntSimple operator-(const BigIntSimple &amp;amp;b) const {
        //符号不同时转换为加法
        if (sign != b.sign) return (*this) + -b;
        if (absless(b)) { //保证大数减小数
            BigIntSimple r = b;
            return -r.subtract(*this);
        } else {
            BigIntSimple r = *this;
            return r.subtract(b);
        }
    }

    BigIntSimple operator*(const BigIntSimple &amp;amp;b) const {
        // r记录相加结果
        BigIntSimple r;
        r.v.resize(v.size() + b.v.size()); //初始化长度
        for (size_t j = 0; j &amp;lt; v.size(); ++j) {
            int carry = 0, m = v[j]; // m用来缓存乘数
            // carry可能很大，只能使用求模的办法，此循环与加法部分几乎相同，就多乘了个m
            for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
                carry += r.v[i + j] + b.v[i] * m;
                r.v[i + j] = carry % BIGINT_BASE;
                carry /= BIGINT_BASE;
            }
            r.v[j + b.v.size()] += carry;
        }
        r.trim();
        r.sign = sign * b.sign;
        return r;
    }

    //对b乘以mul再左移offset的结果相减，为除法服务
    BigIntSimple &amp;amp;sub_mul(const BigIntSimple &amp;amp;b, int mul, int offset) {
        if (mul == 0) return *this;
        int borrow = 0;
        //与减法不同的是，borrow可能很大，不能使用减法的写法
        for (size_t i = 0; i &amp;lt; b.v.size(); ++i) {
            borrow += v[i + offset] - b.v[i] * mul - BIGINT_BASE + 1;
            v[i + offset] = borrow % BIGINT_BASE + BIGINT_BASE - 1;
            borrow /= BIGINT_BASE;
        }
        //如果还有借位就继续处理
        for (size_t i = b.v.size(); borrow; ++i) {
            borrow += v[i + offset] - BIGINT_BASE + 1;
            v[i + offset] = borrow % BIGINT_BASE + BIGINT_BASE - 1;
            borrow /= BIGINT_BASE;
        }
        return *this;
    }

    BigIntSimple div_mod(const BigIntSimple &amp;amp;b, BigIntSimple &amp;amp;r) const {
        BigIntSimple d;
        r = *this;
        if (absless(b)) return d;
        d.v.resize(v.size() - b.v.size() + 1);
        //提前算好除数的最高三位+1的倒数，若最高三位是a3,a2,a1
        //那么db是a3+a2/base+(a1+1)/base^2的倒数，最后用乘法估商的每一位
        //此法在BIGINT_BASE&amp;lt;=32768时可在int32范围内用
        //但即使使用int64，那么也只有BIGINT_BASE&amp;lt;=131072时可用（受double的精度限制）
        //能保证估计结果q&#39;与实际结果q的关系满足q&#39;&amp;lt;=q&amp;lt;=q&#39;+1
        //所以每一位的试商平均只需要一次，只要后面再统一处理进位即可
        //如果要使用更大的base，那么需要更换其它试商方案
        double t = (b.get((unsigned)b.v.size() - 2) +
                   (b.get((unsigned)b.v.size() - 3) + 1.0) / BIGINT_BASE);
        double db = 1.0 / (b.v.back() + t / BIGINT_BASE);
        for (size_t i = v.size() - 1, j = d.v.size() - 1; j &amp;lt;= v.size();) {
            int rm = r.get(i + 1) * BIGINT_BASE + r.get(i);
            int m = std::max((int)(db * rm), r.get(i + 1));
            r.sub_mul(b, m, j);
            d.v[j] += m;
            if (!r.get(i + 1)) //检查最高位是否已为0，避免极端情况
                --i, --j;
        }
        r.trim();
        //修正结果的个位
        int carry = 0;
        while (!r.absless(b)) {
            r.subtract(b);
            ++carry;
        }
        //修正每一位的进位
        for (size_t i = 0; i &amp;lt; d.v.size(); ++i) {
            carry += d.v[i];
            d.v[i] = carry % BIGINT_BASE;
            carry /= BIGINT_BASE;
        }
        d.trim();
        d.sign = sign * b.sign;
        return d;
    }

    BigIntSimple operator/(const BigIntSimple &amp;amp;b) const {
        BigIntSimple r;
        return div_mod(b, r);
    }

    BigIntSimple operator%(const BigIntSimple &amp;amp;b) const {
        return *this - *this / b * b;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;经测试，这个实现在1秒内可以计算出30000阶乘，而计算10000阶乘不到0.1秒，附上求阶乘的实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BigIntSimple fac(int start, int n) {
    if (n &amp;lt; 16) {
        BigIntSimple s = 1;
        for (int i = start; i &amp;lt; start + n; ++i)
            s = BigIntSimple(i) * s;
        return s;
    }
    int m = (n + 1) / 2;
    return fac(start, m) * fac(start + m, n - m);
}

int main() {
    int n;
    while (cin &amp;gt;&amp;gt; n) {
        cout &amp;lt;&amp;lt; fac(1, n).to_str() &amp;lt;&amp;lt; endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在hdu oj 1042上，&lt;a href=&#34;https://vjudge.net/solution/29867142&#34; target=&#34;_blank&#34;&gt;以171ms通过&lt;/a&gt;，在提交记录里面，超过了大部分其它提交。当然这还不是极限。&lt;/p&gt;

&lt;p&gt;对于除法，2n/n所需要时间与n*n所需时间比大约是1.5（n是位数），不同编译器这个比值稍有不同。&lt;/p&gt;

&lt;p&gt;本基础篇就介绍到这里，后文将介绍乘法和除法的优化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>回文树</title>
      <link>/post/20200416-pam/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0800</pubDate>
      <guid>/post/20200416-pam/</guid>
      <description>&lt;p&gt;回文树（EER Tree，Palindromic Tree），有点类似Trie，但它并不是匹配字符串的，很多人称之为回文自动机，但它一点也不像自动机，不过我还是按习惯的来，使用PAM为简称。为了表示一个回文，我们只表示一边的一个单链即可，这时就类似Trie。但不同之处是，回文区分奇数长度和偶数长度，所以这里我们使用两个根，分别来表示奇数长度和偶数长度。所以，在奇数根里，链ba表示aba，而在偶数根里的ba表示abba。&lt;/p&gt;

&lt;p&gt;首先我们来直观地看看PAM的图形化，以下是字符串&lt;code&gt;abcbbc&lt;/code&gt;的PAM&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
linkStyle default interpolate basis
subgraph root
0-.-&amp;gt;1[-1]
end
subgraph node0
0--&amp;gt;6((bb))
6--&amp;gt;7((cbbc))
end
subgraph node1
1--&amp;gt;2((a))
1--&amp;gt;3((b))
1--&amp;gt;4((c))
4--&amp;gt;5((bcb))
end
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;0
6-.-&amp;gt;3
5-.-&amp;gt;3
7-.-&amp;gt;4
style 0 fill:#f9f
style 1 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实线方向就是子节点方向，虚线是fail指针，指向这个节点最长的回文后缀节点。图有点乱，但又不希望画得过于简单导致说不清楚，将就一下吧。&lt;/p&gt;

&lt;p&gt;为了能顺利构造，每个节点上面要存储以下必要数据：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;next: 类似Trie，表示子结点的指针，即图上实线&lt;/li&gt;
&lt;li&gt;fail: fail指针，即图上虚线&lt;/li&gt;
&lt;li&gt;len: 这个节点所表示的回文串的长度&lt;/li&gt;
&lt;li&gt;cnt: 这个节点所表示的回文串在原串中出现的次数&lt;/li&gt;
&lt;li&gt;num: 这个节点所表示的回文串中，有多少个后缀也是回文&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;构造方法有点类似AC自动机或SAM，它用增量式构造，假设前k个字符已经构造好，最后构造的节点假设是&lt;code&gt;aba&lt;/code&gt;，新加的字符是&lt;code&gt;c&lt;/code&gt;，那么我们通过那个节点，获取长度是3，于是判断一下原字符串在&lt;code&gt;aba&lt;/code&gt;的前面的字符看是不是和新字符一样，如果是，就在它下面新加入节点，否则，就跳到它的fail节点再做相同的判断，其实这个比SAM简单多了。&lt;/p&gt;

&lt;h2 id=&#34;pam构造过程模拟&#34;&gt;PAM构造过程模拟&lt;/h2&gt;

&lt;p&gt;我们使用字符串&lt;code&gt;abcbbc&lt;/code&gt;作为开始，首先先把abc都插入&lt;/p&gt;

&lt;h3 id=&#34;1-插入abc&#34;&gt;1 插入abc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
linkStyle default interpolate basis
subgraph root
0-.-&amp;gt;1[-1]
end
subgraph node1
1--&amp;gt;2((a))
1--&amp;gt;3((b))
1--&amp;gt;4((c))
end
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;0
style 0 fill:#f9f
style 1 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-再插入b&#34;&gt;2 再插入b&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
linkStyle default interpolate basis
subgraph root
0-.-&amp;gt;1[-1]
end
subgraph node1
1--&amp;gt;2((a))
1--&amp;gt;3((b))
1--&amp;gt;4((c))
4--&amp;gt;5((bcb))
end
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;0
5-.-&amp;gt;3
style 0 fill:#f9f
style 1 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新增加的b构成bcb回文，于是加在c后面，而fail指针的查找，就是从c的fail节点开始，判断那个节点对称的位置是不是新增加的字符b，是的话连上，不是的话再向上一层的fail节点继续找。&lt;/p&gt;

&lt;h3 id=&#34;3-再插入b&#34;&gt;3 再插入b&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
linkStyle default interpolate basis
subgraph root
0-.-&amp;gt;1[-1]
end
subgraph node0
0--&amp;gt;6((bb))
end
subgraph node1
1--&amp;gt;2((a))
1--&amp;gt;3((b))
1--&amp;gt;4((c))
4--&amp;gt;5((bcb))
end
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;0
6-.-&amp;gt;3
5-.-&amp;gt;3
style 0 fill:#f9f
style 1 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而最后插入a后的结果和开头的图是相同的，这里不重复了&lt;/p&gt;

&lt;h2 id=&#34;关于节点计数&#34;&gt;关于节点计数&lt;/h2&gt;

&lt;p&gt;这个节点计数，就是前面所说的cnt，即此节点所表示的回文在整个串中出现次数，但这个并不是一次性统计好的，要分两步。首先，在创建回文树过程中的节点计数，然后就是从叶子开始，把自己的cnt数值加到它的fail节点上，为什么是做加法呢，例如节点&lt;code&gt;ababa&lt;/code&gt;，它的fail节点表示的必然是&lt;code&gt;aba&lt;/code&gt;，那么在构建的过程中，每次遇到&lt;code&gt;ababa&lt;/code&gt;的左侧三个字母的时候，就会把cnt加到&lt;code&gt;aba&lt;/code&gt;节点上，而缺少的另一半，正是节点&lt;code&gt;ababa&lt;/code&gt;的出现次数。另外有的博客说cnt是本质不同的回文字符串数量，这是不正确的。&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct PAM
{
    struct node
    {
        map&amp;lt;char, int&amp;gt; next;
        int fail, len, cnt, num;
        node(int l = 0) : len(l), fail(0), cnt(0), num(0) {}
    };
    vector&amp;lt;char&amp;gt; s;
    vector&amp;lt;node&amp;gt; nodes;
    int match_p;
    void init(int size)
    {
        s.clear();
        s.reserve(size + 1);
        s.push_back(&#39;\200&#39;);
        nodes.push_back(node());
        nodes.push_back(node(-1));
        nodes[0].fail = 1;
        match_p = 0;
    }
    int getfail(int x)
    {
        while (s[s.size() - nodes[x].len - 2] != s.back())
            x = nodes[x].fail;
        return x;
    }
    void extend(char c)
    {
        s.push_back(c);
        int p = getfail(match_p);
        if (!nodes[p].next.count(c))
        {
            int ch = nodes.size();
            nodes.push_back(node(nodes[p].len + 2));
            nodes[ch].fail = nodes[getfail(nodes[p].fail)].next[c];
            nodes[p].next[c] = ch;
            nodes[ch].num = nodes[nodes[ch].fail].num + 1;
        }
        match_p = nodes[p].next[c];
        nodes[match_p].cnt++;
    }
    void done()
    {
        for (int i = nodes.size() - 1; i &amp;gt; 0; i--)
            nodes[nodes[i].fail].cnt += nodes[i].cnt;
    }
    void build(const char* s)
    {
        init(strlen(s));
        for (;*s;++s) extend(*s);
        done();
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接调用build即可，得到的nodes就是回文树&lt;/p&gt;

&lt;h2 id=&#34;pam应用&#34;&gt;PAM应用&lt;/h2&gt;

&lt;h3 id=&#34;1-求字符串中所有本质不同的回文子串的数量&#34;&gt;1 求字符串中所有本质不同的回文子串的数量&lt;/h3&gt;

&lt;p&gt;生成PAM统计非根的节点数量即可&lt;/p&gt;

&lt;h3 id=&#34;2-求字符串中所有回文子串的数量&#34;&gt;2 求字符串中所有回文子串的数量&lt;/h3&gt;

&lt;p&gt;生成PAM后，对除了根外的所有节点的cnt累加就行了&lt;/p&gt;

&lt;h3 id=&#34;3-求公共回文子串数量&#34;&gt;3 求公共回文子串数量&lt;/h3&gt;

&lt;p&gt;对两个字符串都生成PAM后，同时dfs遍历其相同的节点，累加两边节点的cnt的乘积即可&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后缀自动机SAM</title>
      <link>/post/20200220-sam/</link>
      <pubDate>Thu, 20 Feb 2020 20:00:00 +0800</pubDate>
      <guid>/post/20200220-sam/</guid>
      <description>&lt;p&gt;后缀自动机（SAM），可以结合前文的AC自动机一起理解，所谓后缀自动机，就是把一个字符串的所有后缀构造AC自动机，即只匹配其后缀的自动机。但是作为一个字符串的所有后缀，与一般的AC自动机有些不一样的性质，直接构造AC自动机，节点数是 $O(n^2)$，而SAM则对重复的节点合并了，可以让节点数大幅下降到 $O(n)$。&lt;/p&gt;

&lt;p&gt;首先我们来直观地看看SAM的图形化，以下是字符串&lt;code&gt;abcac&lt;/code&gt;的SAM&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3
3--a--&amp;gt;4
4--c--&amp;gt;5((5))
0--c--&amp;gt;6(1)

0--b--&amp;gt;2
1--c--&amp;gt;5
6--a--&amp;gt;4

4-.-&amp;gt;1
5-.-&amp;gt;6
3-.-&amp;gt;6

1-.-&amp;gt;0
2-.-&amp;gt;0
6-.-&amp;gt;0
style 0 fill:#f9f
style 5 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实线方向就是匹配方向，虚线与AC自动机中的失败指针非常像，在SAM里称为link指针。&lt;/p&gt;

&lt;p&gt;咱们这里就不从理论上做解释，把构造过程简单模拟一遍，如果你需要证明，那么可以在oiwiki上找到。&lt;/p&gt;

&lt;h2 id=&#34;sam构造过程模拟&#34;&gt;SAM构造过程模拟&lt;/h2&gt;

&lt;p&gt;我们使用字符串&lt;code&gt;abcac&lt;/code&gt;作为开始，SAM的构造是一个在线算法，可以一个个字符添加构造。另一点说明，节点编号等于与从根开始出发到该节点的最大深度。&lt;/p&gt;

&lt;h3 id=&#34;1-插入a&#34;&gt;1 插入a&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1((1))

1-.-&amp;gt;0
style 0 fill:#f9f
style 1 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-插入b&#34;&gt;2 插入b&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2((2))

0--b--&amp;gt;2

1-.-&amp;gt;0
2-.-&amp;gt;0
style 0 fill:#f9f
style 2 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在b添加到主链后，要找2的父节点1的link指针指的节点，命名为p，1. 如果它的下一个不存在字符&lt;code&gt;b&lt;/code&gt;，那么再令&lt;code&gt;p = p-&amp;gt;link&lt;/code&gt;，并再次判断本情况，2. 如果某个p的next存在当前的字符，那就让节点2的link指向&lt;code&gt;p-&amp;gt;next[char]&lt;/code&gt;节点，3. 如果p已经到达根，那么从根连接一条实边到节点2，同时节点2的link指向根。这里就属于情况3。&lt;/p&gt;

&lt;h3 id=&#34;3-插入c&#34;&gt;3 插入c&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3

0--b--&amp;gt;2
0--c--&amp;gt;3((3))

1-.-&amp;gt;0
2-.-&amp;gt;0
3-.-&amp;gt;0
style 0 fill:#f9f
style 3 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-插入a&#34;&gt;4 插入a&lt;/h3&gt;

&lt;p&gt;这个步骤稍微多一点，先添加到主链，即在&lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code&gt;上，得到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3
3--a--&amp;gt;4((4))

0--b--&amp;gt;2
0--c--&amp;gt;3

1-.-&amp;gt;0
2-.-&amp;gt;0
3-.-&amp;gt;0
style 0 fill:#f9f
style 4 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后找4的父节点3的link指针指的节点，它的下一个存在字符&lt;code&gt;a&lt;/code&gt;，那么指向它，属于前面说的情况2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3
3--a--&amp;gt;4((4))

0--b--&amp;gt;2
0--c--&amp;gt;3

1-.-&amp;gt;0
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;1
style 0 fill:#f9f
style 4 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-插入c&#34;&gt;5 插入c&lt;/h3&gt;

&lt;p&gt;此步更为复杂 ，首先还是先加入主链&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3
3--a--&amp;gt;4
4--c--&amp;gt;5((5))

0--b--&amp;gt;2
0--c--&amp;gt;3

1-.-&amp;gt;0
2-.-&amp;gt;0
3-.-&amp;gt;0
4-.-&amp;gt;1
style 0 fill:#f9f
style 5 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从节点4开始找到节点1，它的next没有当前字符，再找到节点0，节点0的next存在当前字符，即找到节点3，但我们不能直接让节点5的link连接到节点3，因为连接到3的父节点0，它们的的深度不是连续的关系，这时候我们需要做拆点，把原来的节点3复制一个，即next是一样的，link也是一样，然后再让节点0直接连向它（如果不是节点0，那除了它之外，还有它的link节点的next有包含当前字符的，都要指向复制节点），节点3和新插入的节点5的link都指向这个复制节点。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--a--&amp;gt;1
1--b--&amp;gt;2
2--c--&amp;gt;3
3--a--&amp;gt;4
4--c--&amp;gt;5((5))
0--c--&amp;gt;6(1)

0--b--&amp;gt;2
1--c--&amp;gt;5
6--a--&amp;gt;4

4-.-&amp;gt;1
5-.-&amp;gt;6
3-.-&amp;gt;6

1-.-&amp;gt;0
2-.-&amp;gt;0
6-.-&amp;gt;0
style 0 fill:#f9f
style 5 fill:#f9f
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;构造步骤总结&#34;&gt;构造步骤总结&lt;/h2&gt;

&lt;p&gt;一些说明，节点p有数据&lt;code&gt;next&lt;/code&gt;、&lt;code&gt;link&lt;/code&gt;、&lt;code&gt;maxlen&lt;/code&gt;，&lt;code&gt;next&lt;/code&gt;就是匹配的转移表，&lt;code&gt;link&lt;/code&gt;连接到p所表示的字符串的最长后缀，可以当成fail指针理解，而&lt;code&gt;maxlen&lt;/code&gt;表示从根到节点p的最大深度&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;上一次插入主链的节点命名为&lt;code&gt;last&lt;/code&gt;，新插入节点到主链，命名为&lt;code&gt;cur&lt;/code&gt;，当前要插入的字符命名为&lt;code&gt;c&lt;/code&gt;，进入步骤2&lt;/li&gt;
&lt;li&gt;令&lt;code&gt;p = last&lt;/code&gt;看看&lt;code&gt;p-&amp;gt;link-&amp;gt;next&lt;/code&gt;有没有&lt;code&gt;c&lt;/code&gt;，没有的话再令&lt;code&gt;p = p-&amp;gt;link&lt;/code&gt;直到&lt;code&gt;p-&amp;gt;link-&amp;gt;next&lt;/code&gt;有&lt;code&gt;c&lt;/code&gt;跳到步骤3。如果p到根仍然找不到，那么令&lt;code&gt;cur-&amp;gt;link = root&lt;/code&gt;结束&lt;/li&gt;
&lt;li&gt;令节点&lt;code&gt;p-&amp;gt;next[c]&lt;/code&gt;为&lt;code&gt;ch&lt;/code&gt;，判断&lt;code&gt;ch-&amp;gt;maxlen&lt;/code&gt;和&lt;code&gt;p-&amp;gt;maxlen+1&lt;/code&gt;是不是相等，如果是，令&lt;code&gt;cur-&amp;gt;link = p-&amp;gt;next[c]&lt;/code&gt;，结束。如果不是，到第4步&lt;/li&gt;
&lt;li&gt;对节点&lt;code&gt;ch&lt;/code&gt;进行分拆操作，先复制，复制节点命名为&lt;code&gt;p2&lt;/code&gt;，更新&lt;code&gt;p2&lt;/code&gt;的最大深度，再判断如果满足&lt;code&gt;p-&amp;gt;next[c] == ch&lt;/code&gt;，则令&lt;code&gt;p-&amp;gt;next[c] = p2&lt;/code&gt;，再令&lt;code&gt;p = p-&amp;gt;link&lt;/code&gt;重复前一步&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于节点p的&lt;code&gt;minlen&lt;/code&gt;，可以通过 &lt;code&gt;p-&amp;gt;link-&amp;gt;maxlen + 1&lt;/code&gt; 得到&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SAM
{
    struct node
    {
        map&amp;lt;char, int&amp;gt; next;
        int link;
        int len_max;
        node() : link(0), len_max(0) { }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int last;
    void init(int size = 1024)
    {
        nodes.clear();
        nodes.reserve(size);
        nodes.push_back(node());
        last = 0;
        nodes[0].link = -1;
    }
    int size() const
    {
        return (int)nodes.size();
    }
    int len_max(int p)
    {
        return nodes[p].len_max;
    }
    int len_min(int p)
    {
        if (p == 0) return 0;
        return nodes[nodes[p].link].len_max + 1;
    }
    void extend(char c)
    {
        int cur = (int)nodes.size();
        nodes.push_back(node());
        nodes[cur].len_max = nodes[last].len_max + 1;
        int p = last; last = cur;

        while (p != -1 &amp;amp;&amp;amp; !nodes[p].next.count(c))
        {
            nodes[p].next[c] = cur;
            p = nodes[p].link;
        }

        if (p == -1)
        {
            nodes[cur].link = 0;
        }
        else
        {
            int ch = nodes[p].next[c];
            if (nodes[p].len_max + 1 == nodes[ch].len_max)
            {
                nodes[cur].link = ch;
            }
            else // split ch
            {
                int p2 = (int)nodes.size();
                nodes.push_back(nodes[ch]);
                nodes[p2].len_max = nodes[p].len_max + 1;
                while (p != -1 &amp;amp;&amp;amp; nodes[p].next[c] == ch)
                {
                    nodes[p].next[c] = p2;
                    p = nodes[p].link;
                }
                nodes[ch].link = nodes[cur].link = p2;
            }
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sam应用&#34;&gt;SAM应用&lt;/h2&gt;

&lt;h3 id=&#34;1-多模式匹配&#34;&gt;1 多模式匹配&lt;/h3&gt;

&lt;p&gt;给你一个字符串集S以及字符串T，判断T有哪些子串属于S&lt;/p&gt;

&lt;p&gt;先对T求SAM，然后对S的每一个字符串走一遍，如果能走到底，那么这个串在T中出现了&lt;/p&gt;

&lt;h3 id=&#34;2-不同的子串数量&#34;&gt;2 不同的子串数量&lt;/h3&gt;

&lt;p&gt;因为对于SAM任何一个节点u，从根到这个节点的路线有 $maxlen(u) - minlen(u) + 1$ 条，而这条路线则表示原字符串的一个子串，且各不相同，所以对所有的节点求和，即 $\sum{(maxlen(u) - minlen(u) + 1)}$&lt;/p&gt;

&lt;h3 id=&#34;3-字符串的最小表示&#34;&gt;3 字符串的最小表示&lt;/h3&gt;

&lt;p&gt;这个很简单，对于原串s，长度为k，生成关于&lt;code&gt;s+s&lt;/code&gt;串的SAM后，找最小的next节点走k步即可&lt;/p&gt;

&lt;h3 id=&#34;4-最长公共子串&#34;&gt;4 最长公共子串&lt;/h3&gt;

&lt;p&gt;给出串A和B，对B求SAM，然后把这个SAM仿照KMP给A做匹配，令&lt;code&gt;l&lt;/code&gt;表示最大匹配长度，如果next有对应字符就转移，且&lt;code&gt;l++&lt;/code&gt;，如果没有则跳转到link所指的节点u，令&lt;code&gt;l = maxlen(u)&lt;/code&gt;并再次匹配，l的最大值就是答案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AC自动机</title>
      <link>/post/20200210-ac/</link>
      <pubDate>Mon, 10 Feb 2020 22:00:00 +0800</pubDate>
      <guid>/post/20200210-ac/</guid>
      <description>&lt;p&gt;听到AC自动机很多人第一次听到的反应往往是很兴奋的。但其实并不是你们想的那种东西。它的全称是Aho-Corasick algorithm，另外，自动机的英文是Automaton，所以AC自动机即 AC Automaton。为了解释这个算法，首先我们来回顾KMP，你需要很理解KMP的原理，不然看后面的内容就会变得&lt;del&gt;妙不可读&lt;/del&gt;。&lt;/p&gt;

&lt;h2 id=&#34;kmp自动机&#34;&gt;KMP自动机&lt;/h2&gt;

&lt;p&gt;本质上KMP其实就是一种自动机。这次我们改用自动机的形式来理解。所谓自动机，一般指的是确定有限状态自动机，你可以看作一个黑箱，每次输入一个数据，它就会改变它的内部状态，并有相应的输出。如果你知道Trie，那么它其实就是一个典型的自动机。我们还是拿字符串&lt;code&gt;abacabab&lt;/code&gt;作为例子，如果是生成next数组，结果如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;为了方便变成自动机的方式理解，我们把这个改成有向图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0[Start]--a--&amp;gt;00[1]
00--b--&amp;gt;1[2]
1--a--&amp;gt;2[3]
2--c--&amp;gt;3[4]
3--a--&amp;gt;4[5]
4--b--&amp;gt;5[6]
5--a--&amp;gt;6[7]
6--b--&amp;gt;7[8]
00-.-&amp;gt;0
1-.-&amp;gt;0
2-.-&amp;gt;00
3-.-&amp;gt;0
4-.-&amp;gt;00
5-.-&amp;gt;1
6-.-&amp;gt;2
%%7[b]-.-&amp;gt;3[c]
style 0 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图中，实箭头表示匹配，虚箭头表示不匹配要返回的前面的节点，紫色节点表示起止节点。首先我们的状态只要一个指针，先指向start，在匹配的时候，如果与它的下一个字符匹配，那么指针就沿实箭头移动；如果与下一个字符不匹配，在有虚线的情况下，那就沿虚线走一步，然后再尝试一次匹配。以下我们模拟一下匹配&amp;rdquo;ababa&amp;rdquo;的过程。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;初始化指向start，start的下一个是&lt;code&gt;a&lt;/code&gt;，匹配第1个字符，指针移动到节点1&lt;/li&gt;
&lt;li&gt;节点1的下一个是&lt;code&gt;b&lt;/code&gt;，匹配第2个字符，指针移动到节点2&lt;/li&gt;
&lt;li&gt;节点2的下一个是&lt;code&gt;a&lt;/code&gt;，匹配第3个字符，指针移动到节点3&lt;/li&gt;
&lt;li&gt;节点3的下一个是&lt;code&gt;c&lt;/code&gt;，不匹配第4个字符，回退到节点1，这时候匹配，指针移动到节点2&lt;/li&gt;
&lt;li&gt;节点2的下一个是&lt;code&gt;a&lt;/code&gt;，匹配第5个字符，指针移动到节点3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上的虚线箭头就是fail指针的指向&lt;/p&gt;

&lt;h2 id=&#34;kmp自动机的生成&#34;&gt;KMP自动机的生成&lt;/h2&gt;

&lt;p&gt;这个的生成规则其实非常简单，首先建立start，然后向右添加字符，用实箭头连接，第一个节点就虚箭头直接指回start&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0[Start]--a--&amp;gt;00[1]
00-.-&amp;gt;0
style 0 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后插入第二个字符，第二个字符的虚箭头看它的父节点的虚箭头所指向的节点的子节点是不是与第二个字符相等，这个描述有点绕，假设当前节点是c，父节点是p，其虚箭头所指节点是&lt;code&gt;fail[x]&lt;/code&gt;，那么看的是&lt;code&gt;fail[p]&lt;/code&gt;的子节点是否等于c的值，如果等于，那么&lt;code&gt;fail[c] = fail[p]-&amp;gt;next&lt;/code&gt;，如果不等于，那么令&lt;code&gt;p=fail[p]&lt;/code&gt;再次判断其子节点，直到&lt;code&gt;p=start&lt;/code&gt;，于是加入第二节点时，它的fail指针指向start&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0[Start]--a--&amp;gt;00[1]
00--b--&amp;gt;1[2]
00-.-&amp;gt;0
1-.-&amp;gt;0
style 0 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到第3个字符a的时候，它的父节点的fail指向start，而start的子节点也是a，所以它的a就指向第1个字符&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0[Start]--a--&amp;gt;00[1]
00--b--&amp;gt;1[2]
1--a--&amp;gt;2[3]
00-.-&amp;gt;0
1-.-&amp;gt;0
2-.-&amp;gt;00
style 0 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后讲一下插入最后的字符b的时候，首先它的父节点的fail指向第3个节点a，但那个节点的下一个字符并不是b，所以用它的父节点的fail替代，然后再看第3个节点的fail，指向第1个节点，而第1个节点的下一个字符是b，所以要指向第2个节点，得到下图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0[Start]--a--&amp;gt;00[1]
00--b--&amp;gt;1[2]
1--a--&amp;gt;2[3]
2--c--&amp;gt;3[4]
3--a--&amp;gt;4[5]
4--b--&amp;gt;5[6]
5--a--&amp;gt;6[7]
6--b--&amp;gt;7[8]
00-.-&amp;gt;0
1-.-&amp;gt;0
2-.-&amp;gt;00
3-.-&amp;gt;0
4-.-&amp;gt;00
5-.-&amp;gt;1
6-.-&amp;gt;2
7-.-&amp;gt;1
style 0 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在弄懂以上过程后，我们来正式介绍AC自动机&lt;/p&gt;

&lt;h2 id=&#34;ac自动机与trie&#34;&gt;AC自动机与Trie&lt;/h2&gt;

&lt;p&gt;AC自动机的本质，就是在Trie上套KMP，就这一句话。我们怎么理解呢，其实Trie能匹配字符串的前缀，但如果我们需要匹配任意位置，又不希望回溯，那就依照KMP的方法，在匹配失败的时候，跳转到&lt;strong&gt;假如回溯能匹配到的Trie的位置&lt;/strong&gt;。为了更好说明，这里我们使用&lt;code&gt;he&lt;/code&gt;,&lt;code&gt;she&lt;/code&gt;,&lt;code&gt;the&lt;/code&gt;,&lt;code&gt;there&lt;/code&gt;,&lt;code&gt;here&lt;/code&gt;来演示生成过程。&lt;/p&gt;

&lt;p&gt;先生成Trie&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--h--&amp;gt;1
1--e--&amp;gt;2((2))
2--r--&amp;gt;3
3--e--&amp;gt;4((4))
0--s--&amp;gt;5
5--h--&amp;gt;6
6--e--&amp;gt;7((7))
0--t--&amp;gt;8
8--h--&amp;gt;9
9--e--&amp;gt;10((10))
10--r--&amp;gt;11
11--e--&amp;gt;12((12))
style 0 fill:#f9f,stroke-dasharray: 5, 5
style 2 fill:#f9f,stroke-dasharray: 5, 5
style 4 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
style 10 fill:#f9f,stroke-dasharray: 5, 5
style 12 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后做BFS，第一层的fail都指向0&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--h--&amp;gt;1
1--e--&amp;gt;2((2))
2--r--&amp;gt;3
3--e--&amp;gt;4((4))
0--s--&amp;gt;5
5--h--&amp;gt;6
6--e--&amp;gt;7((7))
0--t--&amp;gt;8
8--h--&amp;gt;9
9--e--&amp;gt;10((10))
10--r--&amp;gt;11
11--e--&amp;gt;12((12))
1-.-&amp;gt;0
5-.-&amp;gt;0
8-.-&amp;gt;0
style 0 fill:#f9f,stroke-dasharray: 5, 5
style 2 fill:#f9f,stroke-dasharray: 5, 5
style 4 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
style 10 fill:#f9f,stroke-dasharray: 5, 5
style 12 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，第二层，与KMP自动机的建立规则相同，另外为了让图形上的线不那么乱，虚线指向start的省略&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--h--&amp;gt;1
subgraph here
1--e--&amp;gt;2((2))
2--r--&amp;gt;3
3--e--&amp;gt;4((4))
end
0--s--&amp;gt;5
subgraph she
5--h--&amp;gt;6
6--e--&amp;gt;7((7))
end
0--t--&amp;gt;8
subgraph there
8--h--&amp;gt;9
9--e--&amp;gt;10((10))
10--r--&amp;gt;11
11--e--&amp;gt;12((12))
end
6-.-&amp;gt;1
9-.-&amp;gt;1
style 0 fill:#f9f,stroke-dasharray: 5, 5
style 2 fill:#f9f,stroke-dasharray: 5, 5
style 4 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
style 10 fill:#f9f,stroke-dasharray: 5, 5
style 12 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，第三层&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--h--&amp;gt;1
subgraph here
1--e--&amp;gt;2((2))
2--r--&amp;gt;3
3--e--&amp;gt;4((4))
end
0--s--&amp;gt;5
subgraph she
5--h--&amp;gt;6
6--e--&amp;gt;7((7))
end
0--t--&amp;gt;8
subgraph there
8--h--&amp;gt;9
9--e--&amp;gt;10((10))
10--r--&amp;gt;11
11--e--&amp;gt;12((12))
end
6-.-&amp;gt;1
9-.-&amp;gt;1
7-.-&amp;gt;2
10-.-&amp;gt;2

style 0 fill:#f9f,stroke-dasharray: 5, 5
style 2 fill:#f9f,stroke-dasharray: 5, 5
style 4 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
style 10 fill:#f9f,stroke-dasharray: 5, 5
style 12 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建完毕的图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
linkStyle default interpolate basis
0((0))--h--&amp;gt;1
subgraph here
1--e--&amp;gt;2((2))
2--r--&amp;gt;3
3--e--&amp;gt;4((4))
end
0--s--&amp;gt;5
subgraph she
5--h--&amp;gt;6
6--e--&amp;gt;7((7))
end
0--t--&amp;gt;8
subgraph there
8--h--&amp;gt;9
9--e--&amp;gt;10((10))
10--r--&amp;gt;11
11--e--&amp;gt;12((12))
end
6-.-&amp;gt;1
9-.-&amp;gt;1
7-.-&amp;gt;2
10-.-&amp;gt;2
11-.-&amp;gt;3
12-.-&amp;gt;4

style 0 fill:#f9f,stroke-dasharray: 5, 5
style 2 fill:#f9f,stroke-dasharray: 5, 5
style 4 fill:#f9f,stroke-dasharray: 5, 5
style 7 fill:#f9f,stroke-dasharray: 5, 5
style 10 fill:#f9f,stroke-dasharray: 5, 5
style 12 fill:#f9f,stroke-dasharray: 5, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上就是一个最简单的AC自动机，由于只能通过fail指针在失配时做转移，所以遇到匹配失败的时候不能一步到位，需要一个循环来找下一个位置，但在不少场合已足够使用。习题：&lt;a href=&#34;https://vjudge.net/problem/HDU-2896&#34; target=&#34;_blank&#34;&gt;HDU-2896&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;字典图&#34;&gt;字典图&lt;/h2&gt;

&lt;p&gt;前面刚说过，由于fail指针只有一个，所以遇到匹配失败的时候不能一步到位，那我们如果想一步到位呢？那事实上就成为了一个有向图，我们在跳转时不使用fail指针，而直接用next指针替代，每遇到一个字符就按next来跳转，这样状态转移时间非常稳定且速度更快，而且成为有向图有一个额外的好处，就是能变成图论问题来解，这个后面再来讨论。&lt;/p&gt;

&lt;p&gt;要实现字典图，fail指针还是需要的，但在构建的时候代码写起来反而更简单，因为fail的指向不再需要写循环，可以利用前面的结果一步到位，假设当前节点是c，要更新的字符是i，那分两种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果c的&lt;code&gt;next[i]&lt;/code&gt;非空，那么c的&lt;code&gt;next[i]&lt;/code&gt;节点的fail指针就指向 c的fail指针节点的&lt;code&gt;next[i]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果c的&lt;code&gt;next[i]&lt;/code&gt;为空，那么c的&lt;code&gt;next[i]&lt;/code&gt;节点就指向 c的fail指针节点的&lt;code&gt;next[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;也就是说，不管哪种，都是指向c的fail的&lt;code&gt;next[i]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;p&gt;应用以下模板时，你很可能需要做的调整包括&lt;code&gt;charset&lt;/code&gt;的大小，以及&lt;code&gt;getindex&lt;/code&gt;函数的实现，这两部分你也可以通过template改写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;const int charset = 26;
struct TrieGraph
{
    struct trie_node
    {
        int next[charset];
        int fail;
        int cnt;
        int end;
        trie_node() : end(0), fail(0), cnt(0) {}
        void init() { memset(next, 0, sizeof(next)); }
    };
    vector&amp;lt;trie_node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; bfs_q;
    vector&amp;lt;int&amp;gt; match_cnt;
    map&amp;lt;int, int&amp;gt; id2node;
    map&amp;lt;int, int&amp;gt; str_size;
    int match_p;
    void init(int size)
    {
        nodes.clear();
        nodes.reserve(size);
        nodes.push_back(trie_node());
        nodes.back().init();
        match_p = 0;
    }
    static inline int getindex(char c) { return c - &#39;a&#39;; }
    void insert(const char* s, int id)
    {
        const char* s0 = s;
        int p = 0;
        for (;*s; ++s)
        {
            if (nodes[p].next[getindex(*s)])
            {
                p = nodes[p].next[getindex(*s)];
            }
            else
            {
                int np = nodes.size();
                nodes[p].next[getindex(*s)] = np;
                nodes.push_back(trie_node());
                nodes.back().init();
                p = np;
            }
        }
        ++nodes[p].cnt;
        id2node[id] = p;
        str_size[id] = s - s0;
    }
    void build()
    {
        bfs_q.clear();
        bfs_q.reserve(nodes.size());
        queue&amp;lt;int&amp;gt; q;
        for (int i = 0; i &amp;lt; charset; ++i)
            if (nodes[0].next[i]) q.push(nodes[0].next[i]);
        while (!q.empty())
        {
            int p = q.front();
            q.pop();
            bfs_q.push_back(p);
            for (int i = 0; i &amp;lt; charset; ++i)
            {
                if (nodes[p].next[i])
                {
                    nodes[nodes[p].next[i]].fail = nodes[nodes[p].fail].next[i];
                    q.push(nodes[p].next[i]);
                }
                else nodes[p].next[i] = nodes[nodes[p].fail].next[i];
            }
        }
    }
    int match(char c)
    {
        match_p = nodes[match_p].next[getindex(c)];
        return match_p;
    }
    int query(const char* s) // 有多少个出现
    {
        int ret = 0;
        match_cnt.resize(nodes.size());
        for (int i = match_cnt.size() - 1; i &amp;gt;= 0; --i)
        {
            match_cnt[i] = nodes[i].cnt;
        }
        for (const char* ps = s; *ps; ps++)
        {
            for (int p = match(*ps); p &amp;amp;&amp;amp; ~match_cnt[p]; p = nodes[p].fail)
                ret += match_cnt[p], match_cnt[p] = -1;
        }
        return ret;
    }
    ll query_sum(const char* s, int wc[]) // 每个分别出现多少
    {
        vector&amp;lt;int&amp;gt; sum;
        sum.resize(nodes.size());
        match_p = 0;
        for (const char* ps = s; *ps; ps++)
        {
            for (int p = match(*ps); p; p = nodes[p].fail)
            {
                sum[p] += nodes[p].cnt;
            }
        }
        ll ret = 0;
        for (map&amp;lt;int, int&amp;gt;::iterator it = id2node.begin(); it != id2node.end(); ++it)
        {
            wc[it-&amp;gt;first] = sum[it-&amp;gt;second];
            ret += sum[it-&amp;gt;second];
        }
        return ret;
    }
    const char* find(const char* s, int&amp;amp; match_id)
    {
        match_p = 0;
        for (const char* ps = s; *ps; ps++)
        {
            for (int p = match(*ps); p; p = nodes[p].fail)
            {
                if (nodes[p].cnt == 0) continue;
                for (map&amp;lt;int, int&amp;gt;::iterator it = id2node.begin(); it != id2node.end(); ++it)
                {
                    if (it-&amp;gt;second == p)
                    {
                        match_id = it-&amp;gt;first;
                        break;
                    }
                }
                return ps - str_size[match_id] + 1;
            }
        }
        return 0;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用方式，先调用&lt;code&gt;init&lt;/code&gt;预分配空间，然后调用&lt;code&gt;insert&lt;/code&gt;插入所有用到的字符串，注意字符串的id必须从1开始，再调用&lt;code&gt;build&lt;/code&gt;生成字典树，最后调用&lt;code&gt;query&lt;/code&gt;匹配目标字符串，如果只需要知道有多少个串在目标中出现，那么调用单个参数的，如果需要知道每个分别出现多少次，那么使用有wc参数的版本，通过参数wc返回的是原始字符串每一个的匹配数量，而如果只需要找最初匹配的位置，那用find函数。习题 &lt;a href=&#34;https://vjudge.net/problem/HYSBZ-3172&#34; target=&#34;_blank&#34;&gt;HYSBZ-3172&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;扩展-字符串生成的可能数量&#34;&gt;扩展：字符串生成的可能数量&lt;/h2&gt;

&lt;p&gt;典型题目为&lt;a href=&#34;https://vjudge.net/problem/POJ-2778&#34; target=&#34;_blank&#34;&gt;POJ-2778&lt;/a&gt;，即生成长度为n的字符串，且不包含给定的m个子串。这时候就要用上前面所构造的字典图，我们要先转成邻接矩阵，例如&lt;code&gt;m[i][j][c]&lt;/code&gt;如果为1，表示节点i能通过字符c连接到节点j，为0则不通。不过实际计算的时候，我们并不关心i和j之间通过什么连接，只关心连接数量，那累加&lt;code&gt;m[i][j][c]&lt;/code&gt;，c取字符集的范围，累加值写到矩阵&lt;code&gt;M = matrix[i][j]&lt;/code&gt;，然后我们只要计算$M&amp;rsquo; = M ^ n$，在矩阵&lt;code&gt;M&#39;&lt;/code&gt;中，&lt;code&gt;M&#39;[i][j]&lt;/code&gt;的值就表示从i到j恰好n步共有多少种走法。回到上面的题目，因为部分节点不能走，所以我们只要在生成矩阵的时候删除那些不能走的节点，求出&lt;code&gt;M&#39;&lt;/code&gt;后，累加&lt;code&gt;M&#39;[0][j]&lt;/code&gt;的结果就是答案，所以算法复杂度是 $O(Mlogn)$ ，其中M是一次矩阵乘法的时间复杂度，这个也是有向图里面求k步到达指定节点的路线数量所用的算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>伪随机数生成算法</title>
      <link>/post/20200104-xoshiro/</link>
      <pubDate>Sat, 04 Jan 2020 08:26:00 +0800</pubDate>
      <guid>/post/20200104-xoshiro/</guid>
      <description>&lt;p&gt;这次主要介绍伪随机数生成算法，顺便介绍一个在2018-2019年的伪随机数研究成果，就是 xoshiro/xoroshiro 随机数生成算法。&lt;/p&gt;

&lt;h2 id=&#34;历史&#34;&gt;历史&lt;/h2&gt;

&lt;p&gt;在较早的时候，甚至到现在，伪随机数的生成元老级别算法“线性同余伪随机数生成算法”可谓无处不在，像现在的C/C++的rand函数就是使用线性同余实现的伪随机数生成。所谓的线性同余法，就是这个迭代方程 $S_n = (aS_{n-1} + c)\mod m$，其中，$S_0$ 称为这个随机序列的种子，a,c,m是三个常数，不过这三个数不能随意选，m的大小决定随机数的周期，最大周期等于m，为了便于在计算机里实现，通常m选取$2^{32}$或$2^{64}$。在m已经确定为这两的时候，为了让周期尽可能大，常数a,c还至少要满足以下条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;若 c 非 0，那么 c 与 m 互质；若 c 为 0，那么 a 与 m 互质&lt;/li&gt;
&lt;li&gt;m 所有的素因子均能整除 a-1&lt;/li&gt;
&lt;li&gt;若 m 是4的倍数，那么 a-1 也是 4 的倍数&lt;/li&gt;
&lt;li&gt;a 和 c 都是正整数且小于 m&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些典型的常数取值可以参见wiki上的&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_congruential_generator&#34; target=&#34;_blank&#34;&gt;线性同余&lt;/a&gt;条目。&lt;/p&gt;

&lt;h2 id=&#34;更高的需求&#34;&gt;更高的需求&lt;/h2&gt;

&lt;p&gt;我们之所以使用线性同余，就是因为它实现简单，在对随机数质量要求较低的时候，例如用来作为treap的随机数，那么线性同余完全够用，但建议不要使用rand，因为在windows下不少编译器的最大值太小了，导致效果下降，自己写一个用参数&lt;code&gt;a=69069,c=1,m=2^32&lt;/code&gt;比rand好，我在那篇关于treap的文章就是用了这组参数。线性同余法最大的缺陷是低位随机性特别差，如果使用类似&lt;code&gt;next() % k&lt;/code&gt;的方式来获得区间在$[0,k-1]$的随机数，那么当线性同余迭代方程的m是2的幂且k也是2的幂的时候，灾难就发生了，特别地当k是2的时候，你将得到一个0101的循环序列。为了避免这种情况，通常会取线性同余结果的高位，而且低位去掉得越多，&lt;code&gt;%2&lt;/code&gt;的周期就越长。例如结果是64位，取高32位作为最终结果，那么&lt;code&gt;%2&lt;/code&gt;的周期就是 $2^{33}$ ，但这样会导致有效位减少，而且问题也没有根本地解决。另一种解决办法是选取一个素数作为m，例如2147483647正是一个素数，但如此一来，线性同余的计算速度就会慢不少，周期也没有前一个的长。两种基本实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint32_t s;
    static inline uint16_t rotl(const uint16_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (16 - k));
    }
    LCG32() { seed(); }
    LCG32(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        s = s * 214013UL + 2531011UL;
        return s;
    }
};

struct MCG : public RNG_base&amp;lt;uint32_t, 0x7FFFFFFEULL&amp;gt;
{
    uint64_t s;
    MCG() { seed(); }
    MCG(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        s = s * 48271 % 0x7FFFFFFF;
        return (result_type)s;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中基类&lt;code&gt;RNG_base&lt;/code&gt;的定义在下文代码中有。第一个是32位的实现，所以叫做LCG32，如果是64位里面取高32位，那么就叫做&lt;code&gt;LCG64/32&lt;/code&gt;。第二个实现没有加法操作，即c=0，这种特例叫做MCG。&lt;/p&gt;

&lt;h2 id=&#34;随机数的质量和周期&#34;&gt;随机数的质量和周期&lt;/h2&gt;

&lt;p&gt;如果对生成的随机数质量要求高，例如写一个扑克游戏，如果是52张牌，所有的排列就是 $52!$ （约为$2^{225.5}$），那么我们需要周期比排列数多得多的随机数生成算法以期望所有可能的排列都有机会出现，那到底需要多大呢？这里我们假设平均每16位生成一个8位有效的随机数，我们需要d个随机数得到的排列，即16d个位的所有可能性，都要有可能出现，若满周期的随机数生成器的周期是 $2^{n}$，输出长度为m位，那么我们只要知道$n/m$个输出就能唯一确定生成器的状态，同时这$n/m$个输出的所有可能都会一一出现，即长度为$n$的二进制必定在序列中出现。所以在这种情况下只要$n\geq16d$就能保证所需排列必定会出现。而在前面提到的扑克游戏里，d=52，那么需要的最小周期就是$2^{832}$，总之，只要生成器的周期的$2^{n}$中的n，比你需要生成的排列所需要的二进制流长度要大，那就保证能得到任意一个排列。这时候就最佳选择之一就是&lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_Twister&#34; target=&#34;_blank&#34;&gt;梅森旋转&lt;/a&gt;，在C++11里的随机数实现默认就是使用它，而且我们一般特指MT19937，即它的周期是 $2^{19937}-1$，如果输出为64位，那么任意长度小于19904位的数据都会在其生成序列中出现（之所以不是19937只是因为它不是输出长度的整数倍），但你要是用这个算法大量生成随机数那是会稍慢一些的，而且这个算法也并没有通过BigCrush的所有测试。我们还存在一种情况，就是需要大量生成随机数，同时质量也有一定要求，速度如果比线性同余还快就更好。&lt;/p&gt;

&lt;h2 id=&#34;线性同余的改进&#34;&gt;线性同余的改进&lt;/h2&gt;

&lt;h3 id=&#34;输出质量&#34;&gt;输出质量&lt;/h3&gt;

&lt;p&gt;线性同余法的均匀性非常好，算法也简单，可惜分布性差，有多差呢，咱们用LCG16(0x43FD,0x9EC3)的输出画黑底白点图，相邻两次输出的高9位作为左半图的坐标，低9位作为右半图的坐标，连续采样524288个点，同一坐标出现次数越多亮度越高，于是得到下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;左边与右边的都有明显的斜线模式。与以下专业的PCG32生成器做个比较，关注点是亮度比较平均，基本没有特别亮的点，也没有比较多暗点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/pcg32.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是也就有不少人想方设法去改进。首先的改进，便是前面所提及的截取高位作为输出，那么内部数据为64位，输出是32位的，就叫做&lt;code&gt;LCG64/32&lt;/code&gt;，同理内部数据为32位，输出是16位的，就叫做&lt;code&gt;LCG32/16&lt;/code&gt;，这样一来，随机数质量大幅度提升。基于此实现的版本如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32_16 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint32_t s;
    LCG32_16() { seed(); }
    LCG32_16(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        s = s * 214013UL + 2531011UL;
        return s &amp;gt;&amp;gt; 16;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码得到的图形如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg32_16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样生成的随机数质量就有了一个很大的飞跃。另外，LCG结果的低位，周期性特别短，而LCG结果的高位，对下一个数的影响又特别小，那能不能对这个特性加以利用呢？既然高位对下一个数的影响特别小，我们就创造影响，让高位单独参与计算；既然低位的结果差，那就直接舍弃，同时当高位作为下一个数的位旋转参数，这样避免了最低位的固定 $2^{16}$ 周期的问题。所以可以改写如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG32_16ro : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint32_t s;
    LCG32_16ro() { seed(); }
    LCG32_16ro(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint32_t x = s;
        s = s * 214013UL + 2531011UL;
        return rotl16((uint16_t)(x &amp;gt;&amp;gt; 16u), x &amp;gt;&amp;gt; 28u);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg32_16ro.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;结果反而明显变差了，原因是作为参数的高4位也是输出的一部分，导致那高4位在最终出现的位置是固定的16种情况，解决方法1是不取那4位，取4到11位，方法2是把高16位与低16位做异或运算后再做旋转，两种方案均可解决这个问题，后面的测试使用的是第二种方案，具体代码就不重复了。&lt;/p&gt;

&lt;h3 id=&#34;输出周期&#34;&gt;输出周期&lt;/h3&gt;

&lt;p&gt;然后再来看周期，单独一个LCG周期只有 $2^{32}$ 或 $2^{64}$ ，那我们有没有可能通过两个或以上的随机数生成器构造出周期是它们周期之积的的生成器呢？也许一时半会不容易想出来，我们先考虑怎么让一个LCG生成器周期变长。&lt;/p&gt;

&lt;p&gt;要注意的是我们不能瞎改，必须是一个满周期的生成器，乱改的话在绝大多数情况下都达不到满周期从而导致返回值的分布不均匀。假如我们手上有一个LCG，周期是p，如果单纯只要周期变长，那我们有一个足够简单的方法，我们增加一个参数x，在原本的LCG输出的结果基础上 xor x 再输出，然后当原来的LCG生成了p次，就让参数x自增1，于是又能生成p个整体与原来不重叠的数，如此循环，于是x的自增周期是p2的话，总周期便是 $p\times{p_2}$ 。可是这明显能感觉到质量可能很糟糕，那解决办法就是，那个x改成另一个LCG来生成即可。这样我们便得到把两个LCG合并得到更大周期的办法。不过，问题是我们为了记录生成次数，似乎还要多定义一个变量来记录生成的次数，这个变量是会影响生成器的状态的，为了避免增加新的变量，在这里我们换个办法，不必生成p次，只要生成结果是某个设定值例如0，就更新第二个LCG，这样就节省了一个变量，于是可以写出以下的代码，为了方便说明，使用的是&lt;code&gt;LCG16&lt;/code&gt;，周期是65536。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_1 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_1() { seed(); }
    LCG16_1(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ s;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样把两个 $2^{16}$ 周期的LCG组合起来，确实得到了 $2^{32}$ 周期的LCG，不过之所以用周期这么小的，是为了能发现问题，我们能穷举这个LCG的生成序列，我们能轻易找出多处大段大段的随机数完全相同，有多大段呢，1千到3万个不等，即之前生成的数千个随机数，后面某处又重现了这个序列，而且在 $2^{32}$ 周期内发生。这说明单纯这样组合，结果是糟糕的。具体图形如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们加上前面的位旋转，以期望减少这种情况的出现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_2 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_2() { seed(); }
    LCG16_2(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(x, x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出现这个情况的原因前面有解释，正是高4位导致的。对此，为了把高4位的模式抹除，改为&lt;code&gt;rotl16(x ^ (x &amp;lt;&amp;lt; k), x &amp;gt;&amp;gt; 12)&lt;/code&gt;，只要k大于等于4，这个模式就迅速消失。取k为7得到代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_3 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_3() { seed(); }
    LCG16_3(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(x ^ (x &amp;lt;&amp;lt; 7), x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们还可以再考虑一个问题，之前都是用高位的旋转参数对自己旋转，那可不可以错开，改为旋转下一个数呢？答案是可以的，生成的结果仍然是满周期的，也不存在高4位位置固定的问题，得到的代码和图形是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct LCG16_4 : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    uint16_t s, a;
    LCG16_4() { seed(); }
    LCG16_4(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) a = a * (uint16_t)0x101 + (uint16_t)0x9527;
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return a ^ rotl16(s, x &amp;gt;&amp;gt; 12);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是我们确实得到了一个看起来更随机的生成器，但3和4的图仔细观察仍然能发现左边的图有规律的线条模式，和专业算法比较还是能看出差距，不过这个问题之后再去解决。那如果我们需要任意加大周期要怎么做呢，如果单纯按这个思路，那么增加了n级，就会导致输出要异或n次，代码也难写。这里要换一个思路，我们把扩展状态做成一个数组，每次只与数组中其中一个元素来异或运算，而选择的方法利用LCG的低位是循环的特性，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG16s : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    static const uint16_t ext_size = 1 &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    uint16_t s, a[ext_size];
    LCG16s() { seed(); }
    LCG16s(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a[0] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        if (ext_size &amp;gt; 1) a[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 2) a[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 48);
        for (uint16_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl16(a[i - 1] * (uint16_t)0x43FD + (uint16_t)0x9EC3, a[i-3] &amp;amp; 15) ^ a[i - 2];
        }
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) {
            for (uint16_t i = 0; i &amp;lt; ext_size; ++i) {
                a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527);
                if (a[i]) break;
            }
        }
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return rotl16(s, x &amp;gt;&amp;gt; 12) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从图上就能直观看出这东西有问题，问题在哪呢？以上这个生成器的周期在模板参数假设是n，那么其周期为 $ 2^{16 \times (2^n + 1)}$，可以任意加大周期。可是就在这个时候就出现问题了，我们假设参数是8，那么数组大小为256，那当s为0的时候，大多数情况下只有&lt;code&gt;a[0]&lt;/code&gt;发生改变，那导致的结果就是在下一个短周期里，每256个数有255个与前一个短周期完全一样，所以我们要做修改，每次s为0的时候，a数组每一个数都得至少更新一次，且如果&lt;code&gt;a[i]&lt;/code&gt;为0，那&lt;code&gt;a[i+1]&lt;/code&gt;就更新两遍，这样可以改写如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG16_ext : public RNG_base&amp;lt;uint16_t&amp;gt;
{
    static const uint16_t ext_size = 1 &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    uint16_t s, a[ext_size];
    LCG16_ext() { seed(); }
    LCG16_ext(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = (uint16_t)seed1;
        a[0] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        if (ext_size &amp;gt; 1) a[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 2) a[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 48);
        for (uint16_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl16(a[i - 1] * (uint16_t)0x43FD + (uint16_t)0x9EC3, a[i-3] &amp;amp; 15) ^ a[i - 2];
        }
    }
    result_type operator()() {
        uint16_t x = s;
        if (s == 0) {
            for (uint16_t i = 0, carry = 0; i &amp;lt; ext_size; ++i) {
                if (carry) carry = (a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527)) == 0;
                carry |= (a[i] = (a[i] * (uint16_t)0x101 + (uint16_t)0x9527)) == 0;
            }
        }
        s = s * (uint16_t)0x43FD + (uint16_t)0x9EC3;
        return rotl16(s, x &amp;gt;&amp;gt; 12) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg16_ext.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上这个版本经过一些简单的测试，符合满周期且概率均等。当然这个uint16有点太小，于是仍然能从图里看出分布有点问题，左边的图存在明暗间隔的竖条和横条，即问题存在于高位。所以本节的最后提供一个&lt;code&gt;LCG64_32_ext&lt;/code&gt;的完整实现，参数ext_bit为n，那么其周期为 $ 2^{32 \times (2^n + 2)}$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;uint16_t ext_bit = 2&amp;gt;
struct LCG64_32_ext : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    static const uint64_t ext_size = 1ULL &amp;lt;&amp;lt; ext_bit, ext_mask = ext_size - 1;
    const int init_iter = 256 * 256;
    uint64_t s;
    uint32_t a[ext_size];
    LCG64_32_ext() { seed(); }
    LCG64_32_ext(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s = seed1;
        a[0] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        if (ext_size &amp;gt; 1) a[1] = (uint32_t)seed2;
        if (ext_size &amp;gt; 2) a[2] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        for (uint32_t i = 3; i &amp;lt; ext_size; ++i) {
            a[i] = rotl32((uint32_t)(a[i - 1] * seed_mul + 1), a[i - 2] &amp;amp; 15) ^ a[i - 2];
        }
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint64_t x = s;
        if (s == 0) {
            for (uint64_t i = 0, carry = 0; i &amp;lt; ext_size; ++i) {
                if (carry) carry = (a[i] = (a[i] * 2891336453u + 887987685u)) == 0;
                carry |= (a[i] = (a[i] * 2891336453u + 887987685u)) == 0;
            }
        }
        s = s * 3935559000370003845ULL + 1442695040888963407ULL;
        return rotr32((uint32_t)(s &amp;gt;&amp;gt; 32), x &amp;gt;&amp;gt; 59) ^ a[x &amp;amp; ext_mask];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/rnd/lcg64_32_ext.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个图已经能与PCG的图看不出明显的差异，而且能通过BigCrash测试。当然，这样的实现还没有经过严格的随机性测试，这里只是给大家思路，以上代码建议不要用于实际使用场景。另外，以上思路参考自&lt;a href=&#34;http://www.pcg-random.org/&#34; target=&#34;_blank&#34;&gt;PCG&lt;/a&gt;算法。&lt;/p&gt;

&lt;h2 id=&#34;lua的修改&#34;&gt;lua的修改&lt;/h2&gt;

&lt;p&gt;通过参阅lua的源代码，最早的时候，它还是直接使用的C语言内置的rand，后来被诟病随机数范围太小、生成的质量太差。所以后来做了一番改进，在2018年之前，使用的是TausWorthe的一个随机数算法，周期为 $2^{223}-1$ ，所以又叫做 TausWorthe 223 或 TW223，代码参见后文的&lt;code&gt;taus_worthe223&lt;/code&gt;。这里要介绍的是lua在2018年之后更换的新随机数算法。&lt;/p&gt;

&lt;h2 id=&#34;xoshiro-xoroshiro&#34;&gt;xoshiro/xoroshiro&lt;/h2&gt;

&lt;p&gt;而在2018年，新出现的&lt;a href=&#34;http://prng.di.unimi.it/&#34; target=&#34;_blank&#34;&gt;xoshiro/xoroshiro&lt;/a&gt;算法以其周期更大、质量更高、速度更快的特性，很快lua的&lt;a href=&#34;http://lua-users.org/lists/lua-l/2018-05/msg00109.html&#34; target=&#34;_blank&#34;&gt;实现&lt;/a&gt;便改用它，而且官方还提供了不同的实现，你可以自行在周期长度、随机数质量、运行速度间自行取舍，这个算法改进自Xorshift，同样属于&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear-feedback_shift_register&#34; target=&#34;_blank&#34;&gt;LFSR&lt;/a&gt;。不过xoshiro/xoroshiro提供的版本实在是太多了，怎么取舍呢？我通过阅读paper，选出了三个建议的版本，分别是&lt;code&gt;xoroshiro128++&lt;/code&gt;，&lt;code&gt;xoshiro256**&lt;/code&gt;，&lt;code&gt;xoroshiro1024**&lt;/code&gt;，名字后面的数字表示周期，例如&lt;code&gt;xoshiro256**&lt;/code&gt;的周期是 $2^{256}-1$，而后面的加号和乘号表示生成时所用的运算符，所对应的类名分别是&lt;code&gt;xoroshiro128pp&lt;/code&gt;，&lt;code&gt;xoshiro256ss&lt;/code&gt;，&lt;code&gt;xoroshiro1024ss&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其生成速度之快超越线性同余法（限64位平台）。而&lt;code&gt;xoshiro256**&lt;/code&gt;大多数场合足够使用，且lua&lt;a href=&#34;https://github.com/lua/lua/blob/d7bb8df8414f71a290c8a4b1c9f7c6fe839a94df/lmathlib.c#L307&#34; target=&#34;_blank&#34;&gt;所选择的实现&lt;/a&gt;也是它，除非你特别看它不爽非要特别大的周期，那就上&lt;code&gt;xoroshiro1024**&lt;/code&gt;吧。而在需要快速产生大量浮点数的场合，官方建议使用&lt;code&gt;xoroshiro128+&lt;/code&gt;或&lt;code&gt;xoroshiro256+&lt;/code&gt;，但如果生成整数，那请不要选择只有一个&lt;code&gt;+&lt;/code&gt;的版本，要选择&lt;code&gt;++&lt;/code&gt;或&lt;code&gt;**&lt;/code&gt;的版本。&lt;/p&gt;

&lt;p&gt;xoshiro/xoroshiro还有一个非常特别的功能，它有个jump和long jump功能，例如对于&lt;code&gt;xoshiro256**&lt;/code&gt;，一次jump调用相当于迭代了 $2^{128}$ 次，这样生成的新状态与原来的状态距离非常大，然后用于两个线程，这样就能保证生成的序列不产生重叠，而long jump则相当于迭代 $2^{192}$ 次，这样能生成出4个状态用于4线程，这个特色功能是其它随机数生成器所不具备的。不过以下模板并不包含这部分，有需要的话自己上官网那把代码复制过来用就行。&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;p&gt;这里的实现除了以上所提及的，还包括常见的&lt;code&gt;rand48&lt;/code&gt;，&lt;code&gt;taus88&lt;/code&gt;，&lt;code&gt;PCG32&lt;/code&gt;，&lt;code&gt;well512&lt;/code&gt;等等。编译以下代码需要C++11支持，如果要在不支持的编译器上编译就稍微改改就行。&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename _res_type, uint64_t ret_max = 0xFFFFFFFFFFFFFFFFULL&amp;gt;
struct RNG_base
{
    typedef _res_type result_type;
    static constexpr result_type min() { return 0; }
    static constexpr result_type max() { return (result_type)ret_max; }
    const uint64_t seed_mul = 6364136223846793005ULL;
    const int init_iter = 16;
    uint64_t new_seed() {
        std::random_device rd;
        return ((uint64_t)rd() &amp;lt;&amp;lt; 32) | rd();
    }
    uint64_t def_seed() {
        static uint64_t seed = new_seed();
        seed *= 3935559000370003845ULL;
        return ++seed;
    }
    static inline uint64_t rotl64(const uint64_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (64 - k));
    }
    static inline uint64_t rotr64(const uint64_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (64 - k));
    }
    static inline uint32_t rotl32(const uint32_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (32 - k));
    }
    static inline uint32_t rotr32(const uint32_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (32 - k));
    }
    static inline uint16_t rotl16(const uint16_t x, int k) {
        return (x &amp;lt;&amp;lt; k) | (x &amp;gt;&amp;gt; (16 - k));
    }
    static inline uint16_t rotr16(const uint16_t x, int k) {
        return (x &amp;gt;&amp;gt; k) | (x &amp;lt;&amp;lt; (16 - k));
    }
};

struct PCG32 : public RNG_base&amp;lt;uint32_t&amp;gt; // XSH RR
{
    const int init_iter = 1; // min 1
    uint64_t s;
    PCG32() { seed(); }
    PCG32(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint64_t x = s;
        s = s * 6364136223846793005ULL + 1442695040888963407ULL;
        return rotr32((uint32_t)((x ^ (x &amp;gt;&amp;gt; 18)) &amp;gt;&amp;gt; 27), x &amp;gt;&amp;gt; 59);
    }
};

struct rand48 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint16_t s[3];
    static const uint16_t RAND48_A0 = 0xE66D;
    static const uint16_t RAND48_A1 = 0xDEEC;
    static const uint16_t RAND48_A2 = 0x0005;
    static const uint16_t RAND48_C0 = 0x000B;
    rand48() { seed(); }
    rand48(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s[0] = (uint16_t)seed1;
        s[1] = (uint16_t)(seed1 &amp;gt;&amp;gt; 16);
        s[2] = (uint16_t)(seed1 &amp;gt;&amp;gt; 32);
    }
    inline void do_rand48() {
        const uint32_t x0 = s[0];
        const uint32_t x1 = s[1];
        const uint32_t x2 = s[2];

        uint32_t a = RAND48_A0 * x0 + RAND48_C0;
        s[0] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);

        a &amp;gt;&amp;gt;= 16;

        a += RAND48_A0 * x1 + RAND48_A1 * x0;
        s[1] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);

        a &amp;gt;&amp;gt;= 16;
        a += RAND48_A0 * x2 + RAND48_A1 * x1 + RAND48_A2 * x0;
        s[2] = static_cast&amp;lt;uint16_t&amp;gt;(a &amp;amp; 0xFFFF);
    }
    result_type operator()() {
        do_rand48();
        return ((uint32_t)s[2] &amp;lt;&amp;lt; 16) + s[1];
    }
};

struct taus88 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    uint32_t s[3];
    const int init_iter = 0;
    taus88() { seed(); }
    taus88(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = (uint32_t)seed1;
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        s[2] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    inline uint32_t tausworthe(uint32_t arg, uint32_t stage1, uint32_t stage2, uint32_t stage3, uint32_t limit) {
        return ((arg &amp;amp; limit) &amp;lt;&amp;lt; stage1) ^ (((arg &amp;lt;&amp;lt; stage2) ^ arg) &amp;gt;&amp;gt; stage3);
    }
    result_type operator()() {
        s[0] = tausworthe(s[0], 12, 13, 19, 4294967294UL);
        s[1] = tausworthe(s[1], 4, 2, 25, 4294967288UL);
        s[2] = tausworthe(s[2], 17, 3, 11, 4294967280UL);
        return (s[0] ^ s[1] ^ s[2]);
    }
};

struct taus_worthe223 : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t gen[4];
    taus_worthe223() { seed(); }
    taus_worthe223(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        gen[0] = seed1;
        gen[1] = seed2;
        gen[2] = seed3;
        gen[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
#define taus_worthe(i,k,q,s) z = gen[i]; \
    z = (((z &amp;lt;&amp;lt; q) ^ z) &amp;gt;&amp;gt; (k - s)) ^ ((z&amp;amp;((uint64_t)(int64_t)-1 &amp;lt;&amp;lt; (64 - k))) &amp;lt;&amp;lt; s); \
    r ^= z; gen[i] = z
    result_type operator()() {
        uint64_t r = 0, z;
        taus_worthe(0, 63, 31, 18);
        taus_worthe(1, 58, 19, 28);
        taus_worthe(2, 55, 24, 7);
        taus_worthe(3, 47, 21, 8);
        return r;
    }
#undef taus_worthe
};

struct well512 : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    // http://lomont.org/papers/2008/Lomont_PRNG_2008.pdf
    // const int init_iter = 0; // min 0
    const uint64_t seed_mul = 134775813;
    uint32_t s[16];
    uint32_t index;
    well512() { seed(); }
    well512(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = (uint32_t)(seed1);
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        s[2] = (uint32_t)(seed2);
        s[3] = (uint32_t)(seed2 &amp;gt;&amp;gt; 32);
        s[4] = (uint32_t)(seed3);
        s[5] = (uint32_t)(seed3 &amp;gt;&amp;gt; 32);
        s[6] = (uint32_t)(seed4);
        s[7] = (uint32_t)(seed4 &amp;gt;&amp;gt; 32);
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 64; ++i, ++j) {
            if (i % 4 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * (uint32_t)seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        index = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        uint32_t a, b, c, d;
        a = s[index];
        c = s[(index + 13) &amp;amp; 15];
        b = a ^ c ^ (a &amp;lt;&amp;lt; 16) ^ (c &amp;lt;&amp;lt; 15);
        c = s[(index + 9) &amp;amp; 15];
        c ^= (c &amp;gt;&amp;gt; 11);
        a = s[index] = b ^ c;
        d = a ^ ((a &amp;lt;&amp;lt; 5) &amp;amp; 0xDA442D24);
        index = (index + 15) &amp;amp; 15;
        a = s[index];
        s[index] = a ^ b ^ d ^ (a &amp;lt;&amp;lt; 2) ^ (b &amp;lt;&amp;lt; 18) ^ (c &amp;lt;&amp;lt; 28);
        return s[index];
    }
};

struct splitmix64 : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s;
    splitmix64() { seed(); }
    splitmix64(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s = seed1;
    }
    result_type operator()() {
        uint64_t z = (s += 0x9e3779b97f4a7c15);
        z = (z ^ (z &amp;gt;&amp;gt; 30)) * 0xbf58476d1ce4e5b9;
        z = (z ^ (z &amp;gt;&amp;gt; 27)) * 0x94d049bb133111eb;
        return z ^ (z &amp;gt;&amp;gt; 31);
    }
};

struct xoshiro64ss : public RNG_base&amp;lt;uint32_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint32_t s[2];
    xoshiro64ss() { seed(); }
    xoshiro64ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) {
        s[0] = (uint32_t)seed1;
        s[1] = (uint32_t)(seed1 &amp;gt;&amp;gt; 32);
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint32_t s0 = s[0];
        uint32_t s1 = s[1];
        const uint32_t result = rotl32(s0 * 0x9E3779BB, 5) * 5;
        s1 ^= s0;
        s[0] = rotl32(s0, 26) ^ s1 ^ (s1 &amp;lt;&amp;lt; 9);
        s[1] = rotl32(s1, 13);
        return result;
    }
};

struct xoroshiro128p : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128p() { seed(); }
    xoroshiro128p(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = s0 + s1;
        s1 ^= s0;
        s[0] = rotl64(s0, 24) ^ s1 ^ (s1 &amp;lt;&amp;lt; 16);
        s[1] = rotl64(s1, 37);
        return result;
    }
};

struct xoroshiro128pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128pp() { seed(); }
    xoroshiro128pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = rotl64(s0 + s1, 17) + s0;
        s1 ^= s0;
        s[0] = rotl64(s0, 49) ^ s1 ^ (s1 &amp;lt;&amp;lt; 21);
        s[1] = rotl64(s1, 28);
        return result;
    }
};

struct xoroshiro128ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 1; // min 1
    uint64_t s[2];
    xoroshiro128ss() { seed(); }
    xoroshiro128ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) {
        s[0] = seed1;
        s[1] = seed2;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t s0 = s[0];
        uint64_t s1 = s[1];
        const uint64_t result = rotl64(s0 * 5, 7) * 9;
        s1 ^= s0;
        s[0] = rotl64(s0, 24) ^ s1 ^ (s1 &amp;lt;&amp;lt; 16);
        s[1] = rotl64(s1, 37);
        return result;
    }
};

struct xoshiro256p : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256p() { seed(); }
    xoshiro256p(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = s[0] + s[3];
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro256pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256pp() { seed(); }
    xoshiro256pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = rotl64(s[0] + s[3], 23) + s[0];
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro256ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[4];
    xoshiro256ss() { seed(); }
    xoshiro256ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const uint64_t result = rotl64(s[1] * 5, 7) * 9;
        const uint64_t t = s[1] &amp;lt;&amp;lt; 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl64(s[3], 45);
        return result;
    }
};

struct xoshiro1024ss : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[16];
    int p;
    xoshiro1024ss() { seed(); }
    xoshiro1024ss(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    void seed(uint8_t seed[], int size) {
        uint8_t* t = (uint8_t*)s;
        if (size &amp;gt; 128) size = 128;
        for (int i = 0; i &amp;lt; size; ++i) {
            t[i] = ((uint8_t*)seed)[i];
        }
        if (size == 0) {
            size = 8; s[0] = 0x931197d8e3177f17ULL;
        }
        for (int i = size, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const int q = p;
        const uint64_t s0 = s[p = (p + 1) &amp;amp; 15];
        uint64_t s15 = s[q];
        const uint64_t result = rotl64(s0 * 5, 7) * 9;

        s15 ^= s0;
        s[q] = rotl64(s0, 25) ^ s15 ^ (s15 &amp;lt;&amp;lt; 27);
        s[p] = rotl64(s15, 36);

        return result;
    }
};

struct xoshiro1024pp : public RNG_base&amp;lt;uint64_t&amp;gt;
{
    //const int init_iter = 0; // min 0
    uint64_t s[16];
    int p;
    xoshiro1024pp() { seed(); }
    xoshiro1024pp(uint64_t seed1) { seed(seed1); }
    void seed() { seed(def_seed()); }
    void seed(uint64_t seed1) { seed(seed1, seed1 * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2) { seed(seed1, seed2, seed2 * seed_mul + 1, (seed1 ^ seed2) * seed_mul + 1); }
    void seed(uint64_t seed1, uint64_t seed2, uint64_t seed3, uint64_t seed4) {
        s[0] = seed1;
        s[1] = seed2;
        s[2] = seed3;
        s[3] = seed4;
        uint8_t* t = (uint8_t*)s;
        for (int i = 32, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    void seed(uint8_t seed[], int size) {
        uint8_t* t = (uint8_t*)s;
        if (size &amp;gt; 128) size = 128;
        for (int i = 0; i &amp;lt; size; ++i) {
            t[i] = ((uint8_t*)seed)[i];
        }
        if (size == 0) {
            size = 8; s[0] = 0x931197d8e3177f17ULL;
        }
        for (int i = size, j = 0; i &amp;lt; 128; ++i, ++j) {
            if (i % 8 == 0) {
                for (int k = i / 8; k &amp;lt; 16; ++k)
                    s[k] = s[k - 1] * seed_mul + 1;
                break;
            }
            t[i] = t[j] * (uint8_t)5 + ~t[i - 1];
        }
        p = 0;
        for (int i = 0; i &amp;lt; init_iter; ++i) (*this)();
    }
    result_type operator()() {
        const int q = p;
        const uint64_t s0 = s[p = (p + 1) &amp;amp; 15];
        uint64_t s15 = s[q];
        const uint64_t result = rotl64(s0 + s15, 23) + s15;

        s15 ^= s0;
        s[q] = rotl64(s0, 25) ^ s15 ^ (s15 &amp;lt;&amp;lt; 27);
        s[p] = rotl64(s15, 36);

        return result;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;效率测试&#34;&gt;效率测试&lt;/h2&gt;

&lt;p&gt;我们当然不能全信官方的数据，具体表现不同机器不同编译器也可能不相同，所以我们就来测试一下。测试所用的实现均为我个人实现的版本，不代表官方版本的运行效率，PCG32使用的是XSH-RR，PCG64使用的是XSL-RR&lt;/p&gt;

&lt;p&gt;在x86下测试标准是生成2亿个64位随机数的运行时间，如生成器生成的是32位，那么生成4亿个32位整数，即以相同输出位数的时间来做比较&lt;/p&gt;

&lt;h3 id=&#34;x86&#34;&gt;x86&lt;/h3&gt;

&lt;p&gt;在VS2015上以x86编译的运行时间&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;394&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2034&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2579&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1819&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6705&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2581&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2221&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1232&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1844&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1794&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2118&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;605&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;882&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;534&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1194&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1382&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1279&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1856&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1513&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1472&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1585&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1651&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在mingw32 gcc5.1.0 以&lt;code&gt;-O2&lt;/code&gt;参数编译的结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;398&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1219&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1008&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;877&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1384&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3141&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1439&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;705&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1757&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1173&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1267&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;663&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;919&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;951&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1036&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;845&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1094&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1205&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1067&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1074&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;x64&#34;&gt;x64&lt;/h3&gt;

&lt;p&gt;在VS2015上以x64编译的运行时间&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;396&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;399&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1207&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;609&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;407&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;670&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;988&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1147&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;759&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;212&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;516&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;328&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;515&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;215&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;267&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;232&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;151&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;182&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;193&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;492&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;462&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在centos7x64 gcc8.3.1 以&lt;code&gt;-O2&lt;/code&gt;参数编译的结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;毫秒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;426&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;413&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1115&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;505&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;434&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;392&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;511&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;839&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;707&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;448&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1009&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;186&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;525&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;229&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;476&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;237&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;191&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;182&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;292&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2112&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从以上数据来看，首先要区分架构，如果是32位的，&lt;code&gt;++&lt;/code&gt;的更快，而在64位上则大多&lt;code&gt;**&lt;/code&gt;稍快，而现在大多数系统都支持64位的情况下，优先考虑&lt;code&gt;**&lt;/code&gt;的版本。而256与128的差距很小，不建议使用128，除非你确实要省这么点内存。综合最佳的是&lt;code&gt;xoshiro256**&lt;/code&gt;，即表格里的xoshiro256ss，64位架构下比线性同余快，而且质量好得多，推荐使用它。而如果你需要同时考虑32位和64位，那选择&lt;code&gt;xoshiro256++&lt;/code&gt;也是不错的。再者，如果你只需要生成浮点随机数，那么xoroshiro128p是速度最快的。不过老实说，大多数场合都没有必要对这么点差别纠结，选择一个合适的就行了，而且VS测试结果很迷，优化得让人猜不透，我认为以gcc的结果优先作为参考。以上数据仅供参考。&lt;/p&gt;

&lt;h2 id=&#34;随机性测试&#34;&gt;随机性测试&lt;/h2&gt;

&lt;p&gt;使用 TestU01 1.2.3 版的 SmallCrash, Crash 和 BigCrash 进行测试（如SmallCrash未通过则不测试Crash，Crash未通过则不测试BigCrash），横线&lt;code&gt;-&lt;/code&gt;表示通过测试，&lt;code&gt;/&lt;/code&gt;表示不进行测试，&lt;code&gt;?&lt;/code&gt;表示未测试&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法实现&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;状态空间(bits)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;状态周期&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;SmallCrash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Crash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;BigCrash&lt;br/&gt;未通过项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LCG32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CollisionOver&lt;br/&gt;BirthdaySpacings&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16ro&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{48}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SerialOver&lt;br/&gt;&amp;hellip;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG32_16_ext,4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{288}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LCG64_32_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{32}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SerialOver&lt;br/&gt;MaxOft&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCG32_ext,0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{96}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rand48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{48}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SimpPoker&lt;br/&gt;&amp;hellip;.&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus88&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{88}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;taus_worthe223&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{223}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;br/&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;well512&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;512&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{512}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;br/&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;splitmix64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift64s&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MatrixRank&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MaxOft&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xorshift128p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro64ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{64}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A.S.&lt;sup&gt;[6]&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoroshiro128ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{128}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro256ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{256}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024pp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1056&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{1024}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xoshiro1024ss&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1056&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{1024}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;std::mt19937&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;20032&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$2^{19937}-1$&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LinearComp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注解：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LCG32未通过的项：BirthdaySpacings, Collision, Gap, SimpPoker, CouponCollector, MaxOft, WeightDistrib, MatrixRank, HammingIndep, RandomWalk1&lt;/li&gt;
&lt;li&gt;LCG32_16ro的实现代码并不是本文中描述的有问题的版本，它是列表里唯一一个32位能通过SmallCrash和Crash测试的实现。BigCrash未通过的项：CouponCollector, Gap, MaxOft, WeightDistrib, SumCollector, LongestHeadRun, PeriodsInStrings&lt;/li&gt;
&lt;li&gt;LCG32_16ext,0在BigCrash未通过的项：SerialOver, CouponCollector, WeightDistrib, PeriodsInStrings&lt;/li&gt;
&lt;li&gt;rand48未通过的项：BirthdaySpacings, Gap, SimpPoker, WeightDistrib, CouponCollector&lt;/li&gt;
&lt;li&gt;据wiki，xorshift128p输出reversed的情况下不能通过BigCrash测试&lt;/li&gt;
&lt;li&gt;xoshiro64ss未通过的项：AppearanceSpacings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;随机性测试的部分结果也会带有一定的随机性，多次测试的结果可能不同，测试结果仅供参考&lt;/p&gt;

&lt;h2 id=&#34;生成-0-1-0-范围的均匀分布浮点数&#34;&gt;生成 $[0, 1.0)$ 范围的均匀分布浮点数&lt;/h2&gt;

&lt;p&gt;以上模板生成的都是无符号整数，如果要生成浮点数的话，以上的模板里除了&lt;code&gt;MCG&lt;/code&gt;不能直接用以下函数外，其它的都可以直接使用（速度快），用来把生成的整数转换成对应的浮点数。又或者，你可以直接用STL的&lt;code&gt;uniform_real_distribution&lt;/code&gt;（通用性好），以上全部模板支持STL的distribution系列。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;float rand_float(uint32_t rnd)
{
    union {
        float f;
        uint32_t u;
    }x;
    x.u = ((rnd &amp;gt;&amp;gt; 9) | 0x3F800000UL);
    return x.f - 1.0f;
}

double rand_float(uint64_t rnd)
{
    union {
        double d;
        uint64_t u;
    } x;
    x.u = ((rnd &amp;gt;&amp;gt; 12) | 0x3FF0000000000000UL);
    return x.d - 1.0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;生成-0-n-范围的均匀分布随机整数&#34;&gt;生成 $[0, n]$ 范围的均匀分布随机整数&lt;/h2&gt;

&lt;p&gt;很多人第一个方案就是 &lt;code&gt;rnd % (n + 1)&lt;/code&gt; ，其实这是错误的，在你对随机数分布要求不高的时候可以这么用，否则只要n+1不是2的整数次幂，获得的随机数就不是均匀分布的，除了直接使用STL的&lt;code&gt;uniform_int_distribution&lt;/code&gt;，自己写的话，除了&lt;code&gt;MCG&lt;/code&gt;不能直接用以下函数外，其它的大多可以直接使用（条件是参数eg的随机引擎生成的随机数最大值必须大于等于n）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;class _Eg&amp;gt;
static uint64_t i64_distribution(_Eg&amp;amp; eg, uint64_t n)
{
    ++n;
    if ((n &amp;amp; -n) == n)
        return (int64_t)eg() &amp;amp; (n-1);
    uint64_t m = n;
    while (m &amp;amp; (m - 1)) m += m &amp;amp; -m;
    --m;
    for (;;)
    {
        uint64_t r = (uint64_t)eg() &amp;amp; m;
        if (r &amp;lt; n)
            return r;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样的缺点是如果n比较小，那随机数据的大部分都浪费了，为了能更大地利用随机数据，可以做如下的改进，按n的大小分为1，2，4，8字节，每次从随机数据里取1，2，4，8个字节，多余的部分留下次使用，这样既照顾了速度也照顾了数据利用率。如果你需要能生成任意大小，那么你需要把随机数引擎作为二进制流数据生成，然后再从二进制流读取 $log_2n$ 个bit来做以上操作，这样代码较为复杂，但在n较小的时候能最大限度的利用生成的数据，这里就不具体展开了，有这个需求的话直接使用 &lt;code&gt;uniform_int_distribution&lt;/code&gt; 就足够了。以上全部模板支持直接调用。&lt;/p&gt;

&lt;p&gt;网上还有很多其它的错误生成方法，以下给大家带来一个视频，我觉得讲解得不错&lt;/p&gt;

&lt;iframe src=&#34;https://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful/player&#34; width=&#34;960&#34; height=&#34;540&#34; allowFullScreen frameBorder=&#34;0&#34; title=&#34;rand() Considered Harmful - Microsoft Channel 9 Video&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;随机数生成是一个大坑，以上只是做个简单得不能再简单的介绍，我只是碰巧看到lua更新了这个顺便更新一波，写个普及文，要是自己去创造一个随机数算法，我觉得比写别的算法还困难不少，绝大多数的实现都经不起数学推敲。之后有时间再收集收集资料再做介绍。&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_congruential_generator&#34; target=&#34;_blank&#34;&gt;线性同余&lt;/a&gt; LCG&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;MCG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_Twister&#34; target=&#34;_blank&#34;&gt;梅森旋转&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear-feedback_shift_register&#34; target=&#34;_blank&#34;&gt;LFSR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://prng.di.unimi.it/&#34; target=&#34;_blank&#34;&gt;xoshiro/xoroshiro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pcg-random.org/&#34; target=&#34;_blank&#34;&gt;PCG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pcg-random.org/pdf/toms-oneill-pcg-family-v1.02.pdf&#34; target=&#34;_blank&#34;&gt;PCG pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sprng.org/Version5.0/parameters.html&#34; target=&#34;_blank&#34;&gt;LCG Generator Parameters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_random_number_generators&#34; target=&#34;_blank&#34;&gt;List of random number generators&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>可持久化线段树</title>
      <link>/post/20191231-persistent_segtree/</link>
      <pubDate>Tue, 31 Dec 2019 08:26:00 +0800</pubDate>
      <guid>/post/20191231-persistent_segtree/</guid>
      <description>&lt;p&gt;可持久化权值线段树，wiki上指出引入者名字叫黃嘉泰，名字缩写正好是某位主席名字，所以又叫做主席树。而本篇先介绍可持久化线段树，阅读本篇前你需要先了解&lt;a href=&#34;/post/20191208-segtree/&#34;&gt;线段树&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;

&lt;p&gt;所谓的可持久化，意思是你能得到所有的历史版本，为了达到这个效果，当然可以每次修改的时候，先整体复制再修改，结果自然就是会爆内存。而事实上，由于每次修改最多改一条链，而其它分支可以重用。我们先拿链表做例子，如果有个链表内容是 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 ，现在我们把3修改成6，得到 1-&amp;gt;2-&amp;gt;6-&amp;gt;4-&amp;gt;5 ，但是后面的元素没有改动，所以我们可以把后面的元素直接重叠在一起使用，如下图：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;
1--&amp;gt;2
2--&amp;gt;3
3--&amp;gt;4
4--&amp;gt;5
1&#39;--&amp;gt;2&#39;
2&#39;--&amp;gt;6
6--&amp;gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，完全可以当成两条不同的链表使用，同时节省空间。而可持久化线段树做法与这一样，就是没变的部分还使用原来节点，所以这个实现不能使用之前介绍的堆式储存，要和平衡树一样动态开节点。&lt;/p&gt;

&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;假设我们的数据是以下这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;构建线段树后结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒号前面的两个数表示一条线段，冒号后表示的是数据，这个数据表示的是这个区间的和。&lt;/p&gt;

&lt;p&gt;然后我们要把第3个元素从5改为1，构造第二棵线段树，首先复制一个root，包括儿子的指向也复制，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:8--&amp;gt;1,2:1
1,4&#39;:8--&amp;gt;3,4:7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，要更新的节点在右儿子那，所以把右儿子复制出来，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:8--&amp;gt;1,2:1
1,4&#39;:8--&amp;gt;3,4&#39;:7
3,4&#39;:7--&amp;gt;3,3:5
3,4&#39;:7--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，在区间$[3,4]$要更新的节点在左儿子那，所以把左儿子复制出来，同时由于这是最后的节点，再从底向上更新sum，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
1,4&#39;:4--&amp;gt;1,2:1
1,4&#39;:4--&amp;gt;3,4&#39;:3
3,4&#39;:3--&amp;gt;L3,3&#39;:1
3,4&#39;:3--&amp;gt;4,4:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图中&lt;code&gt;L3,3&#39;:1&lt;/code&gt;是&lt;code&gt;3,4&#39;:3&lt;/code&gt;的左儿子。这样就是可持久化线段树的构造过程&lt;/p&gt;

&lt;h2 id=&#34;静态区间范围查询&#34;&gt;静态区间范围查询&lt;/h2&gt;

&lt;p&gt;现在给出区间$[L,R]$和范围$[a,b]$，求数组中在区间$[L,R]$里有多少个元素在范围$[a,b]$里。这种查询普通的线段树并不好办，那可持久化线段树有什么方法来解呢，首先我们先构造一棵空线段树，然后对数组元素做离散化，按大小映射到$[0,n-1]$，然后对离散化后的数组，按下标次序，一个一个加入到可持久化线段树里，例如数字2，那么我们就要在线段树里对2号元素+1，所以这就是可持久化权值线段树，即主席树。如此这般加入后，由于我们是按下标次序加入的，所以我们非常容易地得到表示区间$[0,R]$的线段树，那么在范围$[a,b]$里的元素数量，正好就是$[a,b]$区间和。但如果要求的是区间$[L,R]$里有多少个元素在范围$[a,b]$里，那我们除了要求出区间$[0,R]$，还要求出区间$[0,L-1]$，然后两者的$[a,b]$区间和的差，就是我们所要的答案&lt;/p&gt;

&lt;h2 id=&#34;基础模板&#34;&gt;基础模板&lt;/h2&gt;

&lt;p&gt;以下基础模板只支持区间求和，即求区间$[0,R]$里有多少个元素在范围$[a,b]$里&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct persistent_seg_tree
{
    struct data
    {
        int sum;
        data() :sum(0) {}
    };
    struct node
    {
        int l, r;
        data d;
        node() :l(0), r(0) {}
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; roots;
    int sz;

    void up(int id)
    {
        nodes[id].d.sum = nodes[nodes[id].l].d.sum + nodes[nodes[id].r].d.sum;
    }
    int newnode(int cpy)
    {
        int id = (int)nodes.size();
        node tmp = nodes[cpy];
        nodes.push_back(tmp);
        return id;
    }
    int add(int tp, int tl, int tr, int i, int v)
    {
        int id = newnode(tp);
        if (tl + 1 &amp;gt;= tr)
        {
            nodes[id].d.sum += v;
            return id;
        }
        int tmid = (tl + tr) / 2;
        if (i &amp;lt; tmid)
        {
            int nid = add(nodes[id].l, tl, tmid, i, v);
            nodes[id].l = nid;
        }
        else
        {
            int nid = add(nodes[id].r, tmid, tr, i, v);
            nodes[id].r = nid;
        }
        up(id);
        return id;
    }
    int getsum(int tp, int tl, int tr, int l, int r)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return nodes[tp].d.sum;
        }
        int tmid = (tl + tr) / 2;
        int sum = 0;
        if (l &amp;lt; tmid)
        {
            sum += getsum(nodes[tp].l, tl, tmid, l, r);
        }
        if (r &amp;gt; tmid)
        {
            sum += getsum(nodes[tp].r, tmid, tr, l, r);
        }
        return sum;
    }
    // interface
    void init(int range, int root_size) // 数组大小[0, range)，操作次数
    {
        sz = range;
        nodes.clear();
        roots.clear();
        nodes.reserve(root_size * (int)(log(sz * 2.0) / log(2.0) + 1.01));
        nodes.push_back(node());
        roots.reserve(root_size + 1);
        roots.push_back(0);
    }
    void add(int pos, int v)
    {
        int last = roots.back();
        roots.push_back(add(last, 0, sz, pos, v));
    }
    int getsum(int t, int l, int r)
    {
        if (t &amp;lt;= 0) return 0;
        if (r &amp;lt; l) return 0;
        if (t &amp;gt;= (int)roots.size()) t = (int)roots.size() - 1;
        return getsum(roots[t], 0, sz, l, r + 1);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用说明，先调用init，参数分别是离散化后的值域大小，和数组大小（对应的就是操作完后根的个数，所以名字是&lt;code&gt;root_size&lt;/code&gt;），然后循环 &lt;code&gt;add(pos, 1)&lt;/code&gt;，最后查询时，调用&lt;code&gt;getsum(R, a, b) - getsum(L - 1, a, b)&lt;/code&gt;，LR就是区间，ab就是值域范围。&lt;/p&gt;

&lt;h2 id=&#34;静态区间第k大&#34;&gt;静态区间第k大&lt;/h2&gt;

&lt;p&gt;此问题解法较多，本篇主要介绍使用主席树的解法，同样也是先建立一棵可持久化权值线段树，对于查询区间为$[0,R]$的第k大，这个问题很简单，就是找出前缀和大于等于k的区间$[0,m]$所对应的最小的m值，所以只要对$[0,R]$所对应的线段树做查找，如果左子树的sum小于等于k，那么进入左子树查询k，否则进入右子树查询k-sum即可。但对于查询区间$[L,R]$，我们需要找出$[0,R]$和$[0,L-1]$这两棵线段树，它们的$[a,b]$区间和表示在$[L,R]$里有多少个数的值域在$[a,b]$之间，所以我们就同时对这两棵线段树做查找，设 $[0,R]$左子树的sum 减去 $[0,L-1]$左子树的sum 为S，那么如果S小于等于k，那么进入左子树查询k，否则进入右子树查询k-S，实现代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int kth(int tpl, int tpr, int tl, int tr, int k)
{
    if (tl + 1 &amp;gt;= tr) return tl;
    int tmid = (tl + tr) / 2;
    int num = nodes[nodes[tpr].l].d.sum - nodes[nodes[tpl].l].d.sum;
    if (k &amp;lt;= num) return kth(nodes[tpl].l, nodes[tpr].l, tl, tmid, k);
    else return kth(nodes[tpl].r, nodes[tpr].r, tmid, tr, k - num);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;区间第k大模板&#34;&gt;区间第k大模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct persistent_seg_tree
{
    struct data
    {
        int sum;
        data() :sum(0) {}
    };
    struct node
    {
        int l, r;
        data d;
        node() :l(0), r(0) {}
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; roots;
    int sz;

    void up(int id)
    {
        nodes[id].d.sum = nodes[nodes[id].l].d.sum + nodes[nodes[id].r].d.sum;
    }
    int newnode(int cpy)
    {
        int id = (int)nodes.size();
        node tmp = nodes[cpy];
        nodes.push_back(tmp);
        return id;
    }
    int add(int tp, int tl, int tr, int i, int v)
    {
        int id = newnode(tp);
        if (tl + 1 &amp;gt;= tr)
        {
            nodes[id].d.sum += v;
            return id;
        }
        int tmid = (tl + tr) / 2;
        if (i &amp;lt; tmid)
        {
            int nid = add(nodes[id].l, tl, tmid, i, v);
            nodes[id].l = nid;
        }
        else
        {
            int nid = add(nodes[id].r, tmid, tr, i, v);
            nodes[id].r = nid;
        }
        up(id);
        return id;
    }
    int kth(int tpl, int tpr, int tl, int tr, int k)
    {
        if (tl + 1 &amp;gt;= tr) return tl;
        int tmid = (tl + tr) / 2;
        int num = nodes[nodes[tpr].l].d.sum - nodes[nodes[tpl].l].d.sum;
        if (k &amp;lt;= num) return kth(nodes[tpl].l, nodes[tpr].l, tl, tmid, k);
        else return kth(nodes[tpl].r, nodes[tpr].r, tmid, tr, k - num);
    }
    // interface
    void init(int range, int root_size) // 数组大小[0, range)，操作次数
    {
        sz = range;
        nodes.clear();
        roots.clear();
        nodes.reserve(root_size * (int)(log(sz * 2.0) / log(2.0) + 1.01));
        nodes.push_back(node());
        roots.reserve(root_size + 1);
        roots.push_back(0);
    }
    void add(int i, int v)
    {
        int last = roots.back();
        roots.push_back(add(last, 0, sz, i, v));
    }
    int kth(int tpl, int tpr, int k)
    {
        return kth(roots[tpl - 1], roots[tpr], 0, sz, k);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它说明&#34;&gt;其它说明&lt;/h2&gt;

&lt;p&gt;其它的可持久化数据结构大同小异，如可持久化的trie，构造方法也是一样的&lt;/p&gt;

&lt;p&gt;以上只介绍了静态区间的范围查询和第k大查询，还不支持动态修改并查询，这个会在之后再做介绍。&lt;/p&gt;

&lt;p&gt;习题：静态区间范围查询&lt;a href=&#34;https://vjudge.net/problem/HDU-4417&#34; target=&#34;_blank&#34;&gt;hdu 4417&lt;/a&gt;，静态区间第k大&lt;a href=&#34;https://vjudge.net/problem/POJ-2104&#34; target=&#34;_blank&#34;&gt;POJ 2104&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>扩展KMP与Manacher</title>
      <link>/post/20191216-kmp-manacher/</link>
      <pubDate>Mon, 16 Dec 2019 18:23:00 +0800</pubDate>
      <guid>/post/20191216-kmp-manacher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;/post/20191028-kmp/&#34;&gt;KMP&lt;/a&gt;已经介绍过了，这次主要介绍的是Manacher&lt;/p&gt;

&lt;h2 id=&#34;最长回文子串&#34;&gt;最长回文子串&lt;/h2&gt;

&lt;p&gt;Manacher算法要解决的问题就是求最长回文子串，用到的思维和扩展KMP实在是像，不过理解起来比扩展KMP简单。&lt;/p&gt;

&lt;p&gt;先定义数组v，&lt;code&gt;v[i]&lt;/code&gt;表示以第i个字符为中心，到回文串一端的距离，我们以字符串&lt;code&gt;&amp;quot;acabacab&amp;quot;&lt;/code&gt;为例，如下表（index是下标）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;i是当前要计算的指针，m是上次计算的指针，e是下一个要比较的位置的指针&lt;/p&gt;

&lt;p&gt;然后++i，注意这时候，由于以字符b两边是对称的，所以在求&lt;code&gt;v[4]&lt;/code&gt;的值的时候，可以先查&lt;code&gt;v[2]&lt;/code&gt;的值，是1，所以&lt;code&gt;v[4]&lt;/code&gt;也是1&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;再继续++i，同样的，在求&lt;code&gt;v[5]&lt;/code&gt;的值的时候，可以先查&lt;code&gt;v[1]&lt;/code&gt;的值，是2，但是，这个长度达到了e指针的位置，即&lt;code&gt;i+2&amp;gt;=e&lt;/code&gt;，这时候就更新指针m，并扩展e的位置，即比较&lt;code&gt;str[7]&lt;/code&gt;与&lt;code&gt;str[3]&lt;/code&gt;，找到以下标5为中心的回文串边界。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后，&lt;code&gt;v[5]&lt;/code&gt;的值就是&lt;code&gt;e-i&lt;/code&gt;，再接着，求&lt;code&gt;v[6]&lt;/code&gt;的值就查&lt;code&gt;v[4]&lt;/code&gt;的&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;再接着，求&lt;code&gt;v[7]&lt;/code&gt;的值就查&lt;code&gt;v[3]&lt;/code&gt;的，不过&lt;code&gt;v[3]&lt;/code&gt;的值是4，而&lt;code&gt;i+4&amp;gt;=e&lt;/code&gt;又满足了，就再次更新指针m，并扩展e&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后得到的v数组最大值乘以2减1就是答案，以上指针在算法里只增不减，所以时间复杂度是 $O(n)$ 。但问题是，这只能求出奇数长度的回文串，所以，这里用到一个技巧，把原来的字符串&lt;code&gt;&amp;quot;acabacab&amp;quot;&lt;/code&gt;转成&lt;code&gt;&amp;quot;a#c#a#b#a#c#a#b&amp;quot;&lt;/code&gt;，其中#号是任意一个在原字符串中不会出现的字符，这样一来，任意原串的回文串都存在中心字符了。&lt;/p&gt;

&lt;p&gt;还有一个细节，如果要计算的串是&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;，那么回文串的长度应该是1，但是，在这个算法里，会产生越界访问，因为要判断字符a后面的&lt;code&gt;&#39;\0&#39;&lt;/code&gt;是不是与a前面的字符相同，如果正好都是&lt;code&gt;&#39;\0&#39;&lt;/code&gt;，就会导致计算错误。所以，计算的时候还要对原来的字符串在最前面添加第二个在原字符串中不会出现的字符，例如转成&lt;code&gt;&amp;quot;$a#c#a#b#a#c#a#b&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;扩展kmp模板和manacher模板对比&#34;&gt;扩展KMP模板和Manacher模板对比&lt;/h2&gt;

&lt;p&gt;代码高度相似，你看看就知道了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void extkmp_z(const char* str, int z[])
{
    int s_len = strlen(str);
    z[0] = s_len;
    for (int i = 1, p = 1, e = 1; i &amp;lt; s_len; ++i)
    {
        if (i + z[i - p] &amp;gt;= e)
        {
            e = std::max(i, e);
            p = i;

            while (e &amp;lt; s_len &amp;amp;&amp;amp; str[e] == str[e - i])
                ++e;

            z[i] = e - i;
        }
        else
            z[i] = z[i - p];
    }
}

void extkmp_ext(const char* str, int ext[], const char* pattern, int z[])
{
    int s_len = strlen(str);
    extkmp_z(pattern, z);
    for (int i = 0, p = 0, e = 0; i &amp;lt; s_len; ++i)
    {
        if (i + z[i - p] &amp;gt;= e)
        {
            e = std::max(i, e);
            p = i;

            while (e &amp;lt; s_len &amp;amp;&amp;amp; str[e] == pattern[e - i])
                ++e;

            ext[i] = e - i;
        }
        else
            ext[i] = z[i - p];
    }
}

void init_str(const char* str, char* t)
{
    int len = strlen(str);
    t[0] = &#39;$&#39;;
    t[1] = &#39;#&#39;;
    for (int i = 0; str[i]; ++i)
    {
        t[(i + 1) &amp;lt;&amp;lt; 1] = str[i];
        t[((i + 1) &amp;lt;&amp;lt; 1) + 1] = &#39;#&#39;;
    }
    t[(len + 1) &amp;lt;&amp;lt; 1] = 0;
}

int manacher(const char* s, int v[])
{
    int len = strlen(s);
    int max_len = 0;
    v[0] = 1;
    v[1] = 1;
    for (int i = 1, m = 1, e = 1; i &amp;lt; len; ++i)
    {
        if (i + v[m - (i - m)] &amp;gt;= e)
        {
            e = std::max(i, e);
            m = i;

            while (e &amp;lt; len &amp;amp;&amp;amp; s[e] == s[i - (e - i)])
                ++e;

            v[i] = e - i;
        }
        else
            v[i] = v[m - (i - m)];
        max_len = std::max(max_len, v[i]);
    }
    return max_len - 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是第一种写法的模板，再对比写法二&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;
void extkmp_ext(const char* str, int ext[], const char* pattern, int z[])
{
    int s_len = strlen(str);
    extkmp_z(pattern, z);
    for (int i = 0, l = 0, r = 0; i &amp;lt; s_len; ++i)
    {
        if (i &amp;lt; r)
        {
            ext[i] = std::min(r - i, z[i - l]);
        }
        else
        {
            ext[i] = 0;
        }
        while (i + ext[i] &amp;lt; s_len &amp;amp;&amp;amp; str[i + ext[i]] == pattern[ext[i]])
        {
            ++ext[i];
        }
        if (i + ext[i] &amp;gt; r)
        {
            r = i + ext[i];
            l = i;
        }
    }
}

int manacher(const char* s, int v[])
{
    int len = strlen(s);
    int max_len = 0;
    for (int i = 1, m = 1, r = 1; i &amp;lt; len; ++i)
    {
        if (i &amp;lt; r)
        {
            v[i] = std::min(v[m - (i - m)], r - i);
        }
        else
        {
            v[i] = 1;
        }
        while (s[i + v[i]] == s[i - v[i]])
        {
            ++v[i];
        }
        if (i + v[i] &amp;gt; r)
        {
            r = i + v[i];
            m = i;
        }
        max_len = std::max(max_len, v[i]);
    }
    return max_len - 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它解法&#34;&gt;其它解法&lt;/h2&gt;

&lt;p&gt;用后缀数组来解回文串也是可以的，原串是s的话，把s反向，得到s1，然后构造&lt;code&gt;S = s + &#39;#&#39; + s1&lt;/code&gt;，对S求后缀数组后，要注意的是并不是只找height的最大值即可，网上很多文章在这里的算法是错误的，反例是&lt;code&gt;abcdefba&lt;/code&gt;，&lt;strong&gt;单纯枚举相邻的sa是不正确的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;正确做法是枚举i从1到len(s)/2，分别针对奇数长度和偶数长度要分别计算LCP（最长公共前缀），奇数长度时它的对称位置就是&lt;code&gt;j=len-i+1&lt;/code&gt;，偶数长度时对称位置是&lt;code&gt;j=len-i&lt;/code&gt;或&lt;code&gt;j=len-i+2&lt;/code&gt;，然后对height数组求从&lt;code&gt;rank[i]+1&lt;/code&gt;到&lt;code&gt;rank[j]&lt;/code&gt;的最小值。最小值维护用ST表，由于ST表的构造是 $O(nlogn)$ ，而查询是 $O(1)$ ，所以生成后缀数组后的计算的总时间复杂度是 $O(nlogn)$&lt;/p&gt;

&lt;p&gt;示例代码&lt;a href=&#34;https://vjudge.net/problem/URAL-1297&#34; target=&#34;_blank&#34;&gt;URAL 1297&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int st[12][2048];

void init_st(int a[], int n)
{
    for (int i = 0; i &amp;lt; n; i++)
        st[0][i] = a[i];
    for (int k = 1; (1 &amp;lt;&amp;lt; k) &amp;lt; n; k++)
        for (int i = 0, m = 1 &amp;lt;&amp;lt; (k - 1); i &amp;lt; n; i++)
            if (i + m &amp;lt; n) st[k][i] = min(st[k - 1][i], st[k - 1][i + m]);
}

int st_query(int l, int r) // [l, r)
{
    if (l &amp;gt; r)swap(l, r);
    int k = (int)(log(r - l - 0.1) / log(2));
    return min(st[k][l], st[k][r - (1 &amp;lt;&amp;lt; k)]);
}

int main()
{
    int n, t;
    char s[2100], s1[1010];
    scanf(&amp;quot;%s&amp;quot;, s1);
    strcpy(s, s1);
    strcat(s, &amp;quot;#&amp;quot;);
    strcat(s, strrev(s1));
    SA_2_sort sa;
    sa.init(s);
    int len = sa.size();
    int maxh = 0, spos = 0;
    init_st(&amp;amp;*sa.ht.begin(), len + 1);
    for(int i = 1; i &amp;lt;= len / 2; ++i)
    {
        int j = len - i + 1;
        int lcp = st_query(sa.rk[i] + 1, sa.rk[j] + 1);
        if (lcp * 2 - 1 &amp;gt; maxh)
        {
            spos = i - lcp;
            maxh = lcp * 2 - 1;
        }
        if (i &amp;gt; 1)
        {
            j = len - i + 2;
            lcp = st_query(sa.rk[i] + 1, sa.rk[j] + 1);
            if (lcp * 2 &amp;gt; maxh)
            {
                spos = i - lcp - 1;
                maxh = lcp * 2;
            }
        }
    }
    strncpy(s1, s + spos, maxh);
    s1[maxh] = 0;
    puts(s1);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：后缀数组模板请从&lt;a href=&#34;/post/20191113-suffixarray/&#34;&gt;之前的文章&lt;/a&gt;里复制；函数st_query是左闭右开区间，即求的是&lt;code&gt;[l, r-1]&lt;/code&gt;的最小值，采用半开半闭区间目的是为了能直接swap&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FHQ Treap</title>
      <link>/post/20191215-fhq-treap/</link>
      <pubDate>Sun, 15 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191215-fhq-treap/</guid>
      <description>&lt;p&gt;讲完了&lt;a href=&#34;/post/20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;和&lt;a href=&#34;/post/20191213-tree-sequence/&#34;&gt;splaytree&lt;/a&gt;，接下来讲把这两的思想混合在一起的 FHQ Treap，据说作者是范浩强。&lt;/p&gt;

&lt;p&gt;splay其实还有两个操作split和merge没有介绍，我打算把这两放在这里一并介绍&lt;/p&gt;

&lt;h2 id=&#34;split和merge&#34;&gt;Split和Merge&lt;/h2&gt;

&lt;p&gt;Split就是把树按某个条件划分成两棵子树，如果是查找树，就按某个值划分为小于它的以及大于等于它的（等于号取哪边怎么好写怎么来就是），如果是序列维护，那就按照rank来划分。而merge操作则正好相反，把两棵子树合并成为一棵。所以，如果我们需要对某个区间做操作，那么我们就把那个区间Split出来，操作好了后（打懒惰标记，或取出结果）再Merge回去就行了，与splay操作的思路是差不多的。不过为了在split再merge后能间接对树的平衡性优化，我们不能简单地merge，要套用Treap的随机数法，我们先来看怎么split。&lt;/p&gt;

&lt;p&gt;先定义好接口&lt;code&gt;void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)&lt;/code&gt;，x是返回的左子树，y是返回的右子树，接着我们需要递归split，如果划分点在左子树，那么y一定是根，反之划分点在右子树，那么x一定是根。确定了其中一个，在递归调用的时候，假如y确定了，于是还没确定的，就是x以及根节点的左子树的指向，所以把这两传参就行了，时间复杂度 $O(logn)$ ，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 维护序列的实现
void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
{
    if (!tp) { x = y = 0; return; }
    pushdown(tp);
    if (k &amp;lt;= nodes[ch(tp, 0)].sz)
    {
        y = tp;
        split(ch(tp, 0), k, x, ch(tp, 0));
        update(y);
    }
    else
    {
        x = tp;
        split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
        update(x);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来讲讲merge，我们不能直接把右子树直接接在左子树的最后一个元素后，这样会导致树高度太大。在Treap里面，引入了一个随机值，来决定谁来做根节点，所以，我们就对比这个值，如果左子树的小，那么就让左子树的右儿子与右子树merge，否则就让右子树的左儿子与左子树merge，递归调用就是了，时间复杂度 $O(logn)$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int merge(int tl, int tr)
{
    if (!tl) return tr;
    else if (!tr) return tl;
    if (nodes[tl].k &amp;lt; nodes[tr].k)
    {
        pushdown(tl);
        ch(tl, 1) = merge(ch(tl, 1), tr);
        return update(tl);
    }
    else
    {
        pushdown(tr);
        ch(tr, 0) = merge(tl, ch(tr, 0));
        return update(tr);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;这么快就给模板了？没错，你在理解了Treap以后，再去学习&lt;code&gt;FHQ-Treap&lt;/code&gt;那是相当简单的，最复杂的两个操作已经讲完了，相比Treap，它不需要旋转操作，而通过merge操作来让树平衡，而且这组操作让其它的操作相比Treap都来得简单，最不容易写出BUG，代码也是最短的一个，常数也比splaytree小，所有操作的期望时间复杂度都是 $O(logn)$ 。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct FHQ_Treap
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d, sum, lz_add;
        node(int z = 1) :sz(z), k(rnd()) { ch[0] = ch[1] = 0; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    int new_node(const data&amp;amp; d)
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            nodes[id] = node();
        }
        else nodes.push_back(node());
        nodes[id].d = d;
        nodes[id].sum = d;
        return id;
    }
    int update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
        return tp;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            add(n.ch[0], n.lz_add); add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    int merge(int tl, int tr)
    {
        if (!tl) return tr;
        else if (!tr) return tl;
        if (nodes[tl].k &amp;lt; nodes[tr].k)
        {
            pushdown(tl);
            ch(tl, 1) = merge(ch(tl, 1), tr);
            return update(tl);
        }
        else
        {
            pushdown(tr);
            ch(tr, 0) = merge(tl, ch(tr, 0));
            return update(tr);
        }
    }
    void split(int tp, int k, int &amp;amp;x, int &amp;amp;y)
    {
        if (!tp) { x = y = 0; return; }
        pushdown(tp);
        if (k &amp;lt;= nodes[ch(tp, 0)].sz)
        {
            y = tp;
            split(ch(tp, 0), k, x, ch(tp, 0));
            update(y);
        }
        else
        {
            x = tp;
            split(ch(tp, 1), k - nodes[ch(tp, 0)].sz - 1, ch(tp, 1), y);
            update(x);
        }
    }
    void remove(int&amp;amp; tp)
    {
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        root = 0;
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int kth(int k)
    {
        int x, y, z;
        split(root, k, y, z); split(y, k - 1, x, y);
        int id = y;
        root = merge(merge(x, y), z);
        return id;
    }
    void insert(int k, data v)
    {
        int l, r;
        split(root, k - 1, l, r);
        int tp = new_node(v);
        root = merge(merge(l, tp), r);
    }
    void erase(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        remove(y);
        root = merge(x, z);
    }
    void range_add(int l, int r, data v)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        add(y, v);
        root = merge(merge(x, y), z);
    }
    T getsum(int l, int r)
    {
        int x, y, z;
        split(root, r, y, z); split(y, l - 1, x, y);
        T ret = nodes[y].sum;
        root = merge(merge(x, y), z);
        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是个支持区间加、区间删和区间求和的模板。除了LCT，都交给这个数据结构解决吧。&lt;/p&gt;

&lt;h2 id=&#34;其它问题&#34;&gt;其它问题&lt;/h2&gt;

&lt;p&gt;如果你要问为什么不一开始就介绍这个，而先解释其它的树结构，那是因为那是基础啊，基础搞好了，那再搞这个就很简单了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>平衡树与序列维护</title>
      <link>/post/20191213-tree-sequence/</link>
      <pubDate>Fri, 13 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191213-tree-sequence/</guid>
      <description>&lt;p&gt;平衡树除了用来对存在偏序关系的数据进行维护，还能用于对序列维护，相当于一个数组。阅读本文你需要先看完上一篇关于&lt;a href=&#34;/post/20191211-treap-sbt/&#34;&gt;treap&lt;/a&gt;的文章。&lt;/p&gt;

&lt;h2 id=&#34;序列维护&#34;&gt;序列维护&lt;/h2&gt;

&lt;p&gt;在之前的文章，我们介绍过使用树状数组，以及线段树来维护一个序列，可以做区间操作及区间求和，但它们都存在一个缺点，不能动态插入数据。那我们怎么样才能通过平衡树来维护序列呢，之前我们有一个size字段能快速找第k大（或树的中序遍历第k个元素），而旋转操作并不会改变元素之间的相对顺序，那么我们就通过它直接插入到第k个元素的前面，这样我们插入的时候就不再通过要插入的值本身的大小关系，而需要多加一个参数k决定插入的位置。当平衡树用于维护序列的时候，就不用考虑元素相等的问题了。这样我们把元素相等处理的代码删除并修改基本操作的代码就能得到第一个能维护序列的基本模板，以下模板使用Treap修改得来。&lt;/p&gt;

&lt;h2 id=&#34;基本模板&#34;&gt;基本模板&lt;/h2&gt;

&lt;p&gt;以下模板我实现成真·模板，就几乎可以作为数组使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        node(int z = 1) :sz(z), k(rnd()) { d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { if (size() &amp;gt;= reserve_size) nodes.reserve((reserve_size *= 2) + 1); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;动态版本线段树&#34;&gt;动态版本线段树&lt;/h2&gt;

&lt;p&gt;有了这个，我们就可以把它改成动态版本的线段树，就是每个根节点多维护一个sum字段，再加一个懒惰标记，就能实现区间加和区间求和。不过和线段树不同的是，线段树的子树的根只维护区间的结果，而平衡树的根本身就是一个元素，所以代码和线段树略有差别。以下我们实现一个支持区间加和区间求和且能动态增减数据的平衡树，实测与前面讲线段树文章的普通线段树模板，在解决同一问题的执行时间非常接近&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;typename T&amp;gt;
struct treap_seq
{
    struct data
    {
        T v;
        data(T _v = 0) :v(_v) {}
        data operator + (const data&amp;amp; d) const
        {
            data r;
            r.v = v + d.v;
            return r;
        }
        data operator * (int t) const
        {
            data r;
            r.v = v * t;
            return r;
        }
        operator bool() const { return v != 0; }
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], sz;
        unsigned k;
        data d;
        data sum;
        data lz_add;
        node(int z = 1) :sz(z), k(rnd()) { sum = lz_add = d = ch[0] = ch[1] = 0; }
        void clone(const node&amp;amp; n) { d = n.d; sum = n.sum; }
        static unsigned rnd()
        {
            static unsigned r = 0x123;
            r = r * 69069 + 1;
            return r;
        }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void _add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.lz_add = n.lz_add + d;
        n.d = n.d + d;
        n.sum = n.sum + d * n.sz;
    }
    void pushdown(int tp)
    {
        node&amp;amp; n = nodes[tp];
        if (n.lz_add)
        {
            _add(n.ch[0], n.lz_add);
            _add(n.ch[1], n.lz_add);
            n.lz_add = 0;
        }
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
        n.sum = n.d + nodes[n.ch[0]].sum + nodes[n.ch[1]].sum;
    }
    int insert(int&amp;amp; tp, int k, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            nodes[tp].sum = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = insert(s, k - sz * r, d);
        update(s);
        if (nodes[s].k &amp;lt; n.k) rotate(tp, r);
        else update(tp);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int s = n.ch[r];
        pushdown(s);
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    int erasefind(int&amp;amp; tp, int k) // return deleted
    {
        if (tp == 0) return 0;
        node&amp;amp; n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz == k)
        {
            remove(tp);
            return 1;
        }
        int r = sz &amp;lt; k;
        int&amp;amp; s = n.ch[r];
        int ret = erasefind(s, k - sz * r);
        if (ret)
        {
            update(tp);
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        if (tp == 0) return tp;
        node n = nodes[tp];
        pushdown(tp);
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + 1 &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - 1);
    }
    data getsum(int&amp;amp; tp, int l, int r)
    {
        if (tp == 0 || l &amp;gt;= r) return 0;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            return n.sum;
        }
        else
        {
            pushdown(tp);
            data sum = 0;
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                sum = nodes[tp].d;
            }
            sum = sum + getsum(n.ch[0], l, min(sz, r));
            sum = sum + getsum(n.ch[1], max(1, l - sz), r - sz);
            return sum;
        }
    }
    void range_add(int&amp;amp; tp, int l, int r, const data&amp;amp; d)
    {
        if (tp == 0 || l &amp;gt;= r) return;
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz + 1;
        if (l &amp;lt;= 1 &amp;amp;&amp;amp; r &amp;gt; n.sz)
        {
            _add(tp, d);
        }
        else
        {
            //pushdown(tp);
            if (l &amp;lt;= sz &amp;amp;&amp;amp; sz &amp;lt; r)
            {
                nodes[tp].d = nodes[tp].d + d;
            }
            nodes[tp].sum = nodes[tp].sum + d * (r - l);
            range_add(n.ch[0], l, min(sz, r), d);
            range_add(n.ch[1], max(1, l - sz), r - sz, d);
        }
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz; }
    int insert(int k, data v) { reserve(); return insert(root, k, v); }
    int erase(int k) { return erasefind(root, k); }
    int kth(int k) { return kth(root, k); } // return id
    T getsum(int l, int r) { return getsum(root, l, r + 1); }
    void range_add(int l, int r, data v) { range_add(root, l, r + 1, v); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;splay-tree&#34;&gt;Splay tree&lt;/h2&gt;

&lt;p&gt;使用以上这个Treap的自由度还是不够好，有些操作还是不容易做，例如区间翻转，或者区间删除。所以我们需要一个功能更为强大的树，因为那个随机数的限制，不能任意节点都能当树根，而没有那个随机数字段的树，就是伸展树Splay tree，区别主要是三个地方，一是需要父节点字段，维护关系时常数更大，二是旋转，使用双旋，三是splay操作，作用是把节点提升到树根。这个splay操作就是神器，能把很多区间操作写得非常简单，代码也确实是目前介绍的树里面代码最少的。不过伸展树的缺点是编码理解难度稍大。&lt;/p&gt;

&lt;p&gt;和其它树的不同点是，为了保证区间操作代码简短，初始化的时候直接插入两个元素作为序列的一头一尾，于是实际操作区间是2到n+1，这个细节要注意，有了这两个元素可以减少很多特判操作。例如说，要找区间&lt;code&gt;[l,r]&lt;/code&gt;，那么只要让位置r+1的元素splay到根，然后再让位置l-1的元素splay到根的左边，那么l-1位的元素的右子树就是整个操作区间了，而为了让这个总是能做，所以才要预先加两个元素。这个技巧用在了几乎所有操作里面，包括插入，删除，所有的区间操作。splay操作的时间复杂度 $O(logn)$&lt;/p&gt;

&lt;p&gt;以下是序列维护用的基本splaytree模板，要改成支持区间求和什么的就自己改吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt;typename T&amp;gt;
struct splaytree_seq
{
    struct data
    {
        T v;
        data(int _v = 0) :v(_v) {}
        operator T() const { return v; }
    };
    struct node
    {
        int ch[2], fa, sz;
        data d;
        node(int z = 1) :sz(z) { ch[0] = ch[1] = fa = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    int root;
    int recyc;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    inline int&amp;amp; ch(int tp, int r) { return nodes[tp].ch[r]; }
    inline int&amp;amp; fa(int tp) { return nodes[tp].fa; }
    inline int rch(int tp) { return ch(fa(tp), 1) == tp; }
    int new_node()
    {
        int id = (int)nodes.size();
        if (recyc)
        {
            id = recyc;
            if (ch(recyc, 0) &amp;amp;&amp;amp; ch(recyc, 1))
                recyc = merge(ch(recyc, 0), ch(recyc, 1));
            else
                recyc = ch(recyc, 0) ? ch(recyc, 0) : ch(recyc, 1);
            fa(recyc) = 0;
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = 1 + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    void add(int tp, const data&amp;amp; d)
    {
        node&amp;amp; n = nodes[tp];
        n.d = n.d + d;
    }
    void rotate(int s)
    {
        int f1 = fa(s), f2 = fa(f1);
        int d1 = rch(s), d2 = rch(f1);
        ch(f2, d2) = s; fa(s) = f2;
        fa(ch(s, d1 ^ 1)) = f1; ch(f1, d1) = ch(s, d1 ^ 1);
        fa(f1) = s; ch(s, d1 ^ 1) = f1;
        update(f1); update(s);
    }
    void splay(int tp, int goal = 0)
    {
        for (int f; (f = fa(tp)) != goal; rotate(tp))
            if (fa(f) != goal) rotate(rch(tp) == rch(f) ? f : tp);
        if (!goal) root = tp;
    }
    int find_m(int tp, int r)
    {
        int p = tp;
        while (ch(p, r)) p = ch(p, r);
        if (p != tp) splay(p, tp);
        return p;
    }
    int merge(int tl, int tr)
    {
        if (!tl) { fa(tr) = 0; return tr; }
        if (!tr) { fa(tl) = 0; return tl; }
        int p = find_m(tl, 1);
        ch(p, 1) = tr; fa(tr) = p;
        return tl;
    }
    void insert(int k, const data&amp;amp; d)
    {
        int tp = new_node();
        splay(kth(root, k + 1)); splay(kth(root, k), root);
        int c = ch(root, 0);
        nodes[c].ch[1] = tp;
        nodes[tp].fa = c;
        nodes[tp].d = d;
        update(c); update(root);
    }
    void remove(int&amp;amp; tp)
    {
        fa(tp) = 0;
        if (recyc == 0) recyc = tp;
        else recyc = merge(recyc, tp);
        tp = 0;
    }
    int kth(int tp, int k)
    {
        if (tp == 0) return tp;
        node&amp;amp; n = nodes[tp];
        //pushdown(tp);
        int sz = nodes[n.ch[0]].sz + 1;
        if (sz &amp;gt; k) return kth(n.ch[0], k);
        if (sz &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz);
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        nodes.reserve((size = max(size, 15)) + 1);
        nodes.push_back(node(0));
        nodes.push_back(node()); nodes.push_back(node());
        nodes[1].ch[0] = 2; nodes[1].sz = 2; nodes[2].fa = 1;
        root = 1; // be the bound
        recyc = 0; reserve_size = size + 1;
    }
    T get(int id) { return nodes[id].d; }
    int size() { return nodes[root].sz - 2; }
    int kth(int k) { int id = kth(root, k + 1); splay(id); return id; }
    void erase(int l, int r)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        remove(ch(ch(root, 0), 1));
        update(ch(root, 0)); update(root);
    }
    void range_add(int l, int r, data v)
    {
        splay(kth(root, r + 2)); splay(kth(root, l), root);
        add(ch(ch(root, 0), 1), v);
        update(ch(root, 0)); update(root);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上已经直接写好了区间删除，对于区间反转等操作，可以模仿线段树加懒惰标记即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Treap与SBT</title>
      <link>/post/20191211-treap-sbt/</link>
      <pubDate>Wed, 11 Dec 2019 13:10:00 +0800</pubDate>
      <guid>/post/20191211-treap-sbt/</guid>
      <description>&lt;p&gt;这里之所以把这两个放在一起讲，是因为它们实在是相似度很高（至少在竞赛领域），都需要求kth和指定元素的rank（Treap的话可有可无，但通常会需要）。不过如果你没有写过树，强烈建议你自己通过理解来写一遍。&lt;/p&gt;

&lt;h2 id=&#34;bst&#34;&gt;BST&lt;/h2&gt;

&lt;p&gt;首先，Treap和SBT都属于BST的一种，BST就是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&#34; target=&#34;_blank&#34;&gt;二叉搜索树&lt;/a&gt;，它满足的特点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;没有两个节点的值相等&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比左子树所有节点的值要大&lt;/li&gt;
&lt;li&gt;任意子树的根节点的值都比右子树所有节点的值要小&lt;/li&gt;
&lt;li&gt;任意子树均为二叉搜索树&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们实在需要支持多个相同值放在树里面，那么有两种情况，如果那些相同值是确实完全没有区别（例如int），那么只需要在每个节点多加一个字段记录这个值出现的次数就可以了，但如果这些值只有偏序关系，可能不是严格相等，存在其它非比较字段，那么我们就再在每个节点增加一个next域做成一个链表即可。&lt;/p&gt;

&lt;p&gt;基本操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插入(insert)：对比子树的根节点的值r与插入的值v，如果v与r相等，根节点重复数量+1，如果v小于r，插入到左子树，v大于r则插入到右子树&lt;/li&gt;
&lt;li&gt;查找(find)：和插入相似，值相等时返回其id&lt;/li&gt;
&lt;li&gt;删除(erase)：先查找，找到的时候，再查找它的后继（右子树的最小），用后继元素替换后再删除原后继&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;支持简单重复元素的bst模板&#34;&gt;支持简单重复元素的BST模板&lt;/h2&gt;

&lt;p&gt;这个模板还添加了size域，用于求第k小元素和元素排名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct bst
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        return ret;
    }
    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int nxt = nodes[tp].ch[1];
            while (nodes[nxt].ch[0])
                nxt = nodes[nxt].ch[0];
            int dup = nodes[nxt].dup;
            nodes[tp].d = nodes[nxt].d;
            nodes[tp].dup = nodes[nxt].dup;
            recycle.push_back(nxt);
            int* tmp = &amp;amp;nodes[tp].ch[1];
            while (nodes[*tmp].ch[0])
            {
                nodes[*tmp].sz -= dup;
                tmp = &amp;amp;nodes[*tmp].ch[0];
            }
            *tmp = nodes[*tmp].ch[1];
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;一些说明&#34;&gt;一些说明&lt;/h3&gt;

&lt;p&gt;子节点用的节段是ch数组(child的缩写)，不使用left和right的原因是为了节省代码，例如在insert函数里，通过计算&lt;code&gt;d &amp;lt; n.d&lt;/code&gt;的值是0或1决定下一步是递归调用左还是右子节点的时候，就不需要分别针对left和right写代码，后面的find和erase同理。&lt;/p&gt;

&lt;p&gt;rank函数在upper为0的时候，找到的是相同元素里面最小的排名，如果v不存在树里面，那么就是v假如要插入到树里的排名。upper为1的时候，找到的是大于v的最小的元素的排名，即v的后继。&lt;/p&gt;

&lt;p&gt;kth函数的参数如果非法，会导致无限循环，如果你想避免那么你可以在函数里添加检查，例如加一句&lt;code&gt;if (tp == 0) return 0;&lt;/code&gt;即可。&lt;/p&gt;

&lt;h2 id=&#34;优化bst&#34;&gt;优化BST&lt;/h2&gt;

&lt;p&gt;单纯的BST最大的问题是，它最坏的情况是可能成为一条链表，例如你按从小到大插入到树里面的时候，缺乏让它缩减树高的机制，所以接下来要讲两个非常重要的操作，就是树的旋转&lt;/p&gt;

&lt;p&gt;图A&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
4--&amp;gt;2
2--&amp;gt;1
2--&amp;gt;3
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图B&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
2--&amp;gt;4
4--&amp;gt;3
2--&amp;gt;1
4--&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上两图，从A到B叫做zig，把左儿子旋转到root的位置，也叫右旋，B到A叫做zag，把右儿子旋转到root的位置，也叫左旋，旋转代码也很简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    tp = s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上参数r如果是0，就是zig，r是1就是zag。有了旋转操作，我们就可以开始看自平衡树了。&lt;/p&gt;

&lt;h2 id=&#34;treap&#34;&gt;Treap&lt;/h2&gt;

&lt;p&gt;Treap其实炒鸡简单，在BST的基础上多一个随机数生成的字段，这个字段用于决定树要怎么旋转。这个字段就是个优先级，父节点的优先级不大于两个子节点的优先级，这其实就是heap，所以，Treap就是树堆（Tree-heap）。维护Treap，我们只需要在insert的时候，检查是不是满足heap，如果不满足就旋转，相对BST只加了非常少的代码，也就加了rotate函数，rnd函数（直接用rand也行），insert加了维护，以及旋转时需要的update函数维护size字段，也就是说Treap是最经济实惠的平衡树。&lt;/p&gt;

&lt;p&gt;操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新(update): 累加左右子树的size&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除(erase): 找到要删除的元素后，对比两子树的根的优先级，把较的小旋转到原来要删除的元素的位置，使要删除的元素的深度+1，直到删除的元素没有两个子树为止&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct treap
{
struct data
{
    int v;
    data(int _v = 0) :v(_v) {}
    bool operator==(const data&amp;amp; d) const
    {
        return v == d.v;
    }
    bool operator&amp;lt;(const data&amp;amp; d) const
    {
        return v &amp;lt; d.v;
    }
};
struct node
{
    int ch[2], sz, dup;
    unsigned k;
    data d;
    node(int z = 1) :sz(z), dup(z), k(rnd()) { ch[0] = ch[1] = 0; }
    static unsigned rnd()
    {
        static unsigned r = 0x123;
        r = r * 69069 + 1;
        return r;
    }
};
vector&amp;lt;node&amp;gt; nodes;
vector&amp;lt;int&amp;gt; recycle;
int root;
int reserve_size;
void reserve()
{
    if (size() &amp;gt;= reserve_size)
        nodes.reserve((reserve_size *= 2) + 1);
}
int new_node()
{
    int id = (int)nodes.size();
    if (!recycle.empty())
    {
        id = recycle.back();
        recycle.pop_back();
        nodes[id] = node();
    }
    else nodes.push_back(node());
    return id;
}
void update(int tp)
{
    node&amp;amp; n = nodes[tp];
    n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
}
int insert(int&amp;amp; tp, const data&amp;amp; d)
{
    if (tp == 0)
    {
        tp = new_node();
        nodes[tp].d = d;
        return tp;
    }
    node&amp;amp; n = nodes[tp];
    ++n.sz;
    if (d == n.d)
    {
        ++n.dup;
        return tp;
    }
    int r = d &amp;lt; n.d;
    int&amp;amp; s = n.ch[r ^ 1];
    int ret = insert(s, d);
    if (nodes[s].k &amp;lt; n.k) rotate(tp, r ^ 1), update(tp);
    return ret;
}
void rotate(int&amp;amp; tp, int r)
{
    node&amp;amp; n = nodes[tp];
    int s = n.ch[r];
    n.ch[r] = nodes[s].ch[r ^ 1];
    nodes[s].ch[r ^ 1] = tp;
    update(tp);
    tp = s;
}
int find(int tp, const data&amp;amp; d) // return id
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d) return tp;
    return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
}
int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
{
    if (tp == 0) return 0;
    if (d == nodes[tp].d)
    {
        --nodes[tp].sz;
        if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
        return 1;
    }
    if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
    {
        --nodes[tp].sz;
        return 1;
    }
    return 0;
}
void remove(int&amp;amp; tp)
{
    if (tp == 0) return;
    if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
    {
        recycle.push_back(tp);
        tp = nodes[tp].ch[!nodes[tp].ch[0]];
    }
    else
    {
        int r = nodes[nodes[tp].ch[0]].k &amp;lt; nodes[nodes[tp].ch[1]].k;
        rotate(tp, r ^ 1);
        remove(nodes[tp].ch[r]);
        update(tp);
    }
}
int kth(int tp, int k) // return id
{
    node&amp;amp; n = nodes[tp];
    int sz = nodes[n.ch[0]].sz;
    if (sz &amp;gt;= k) return kth(n.ch[0], k);
    if (sz + n.dup &amp;gt;= k) return tp;
    return kth(n.ch[1], k - sz - n.dup);
}
int rank(int tp, const data&amp;amp; d, int dup)
{
    if (tp == 0) return 1;
    node&amp;amp; n = nodes[tp];
    if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
    else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
    return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
}
// interface
void init(int size)
{
    nodes.clear();
    recycle.clear();
    nodes.reserve(size + 1);
    nodes.push_back(node(0));
    root = 0; reserve_size = size;
}
int get(int id) { return nodes[id].d.v; }
int size() { return nodes[root].sz; }
int insert(data v) { reserve(); return insert(root, v); }
int erase(data v) { return erasefind(root, v); }
int find(data v) { return find(root, v); } // return id
int kth(int k) { return kth(root, k); } // return id
// upperbound when upper = 1
int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sbt&#34;&gt;SBT&lt;/h2&gt;

&lt;p&gt;这个名字和BST特别像，但它全名是&lt;code&gt;Size Balanced Tree&lt;/code&gt;，作者是&lt;a href=&#34;https://www.zhihu.com/question/30541674&#34; target=&#34;_blank&#34;&gt;CQF&lt;/a&gt;，它通过size字段来进行树平衡。它的关键操作叫做&lt;code&gt;maintain&lt;/code&gt;，这个操作的平摊复杂度是 $O(1)$ ，这货具体解释可以看CQF的论文，SBT的时间常数比Treap更小一些，内存也更小，不过代码也稍长一些（就是因为&lt;code&gt;maintain&lt;/code&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct sbt
{
    struct data
    {
        int v;
        data(int _v = 0) :v(_v) {}
        bool operator==(const data&amp;amp; d) const
        {
            return v == d.v;
        }
        bool operator&amp;lt;(const data&amp;amp; d) const
        {
            return v &amp;lt; d.v;
        }
    };
    struct node
    {
        int ch[2], sz, dup;
        data d;
        node(int z = 1) :sz(z), dup(z) { ch[0] = ch[1] = 0; }
    };
    vector&amp;lt;node&amp;gt; nodes;
    vector&amp;lt;int&amp;gt; recycle;
    int root;
    int reserve_size;
    void reserve()
    {
        if (size() &amp;gt;= reserve_size)
            nodes.reserve((reserve_size *= 2) + 1);
    }
    int new_node()
    {
        int id = (int)nodes.size();
        if (!recycle.empty())
        {
            id = recycle.back();
            recycle.pop_back();
            nodes[id] = node();
        }
        else nodes.push_back(node());
        return id;
    }
    void update(int tp)
    {
        node&amp;amp; n = nodes[tp];
        n.sz = n.dup + nodes[n.ch[0]].sz + nodes[n.ch[1]].sz;
    }
    int insert(int&amp;amp; tp, const data&amp;amp; d)
    {
        if (tp == 0)
        {
            tp = new_node();
            nodes[tp].d = d;
            return tp;
        }
        node&amp;amp; n = nodes[tp];
        ++n.sz;
        if (d == n.d)
        {
            ++n.dup;
            return tp;
        }
        int r = d &amp;lt; n.d;
        int&amp;amp; s = n.ch[r ^ 1];
        int ret = insert(s, d);
        maintain(tp, r ^ 1);
        return ret;
    }
    void rotate(int&amp;amp; tp, int r)
    {
        node&amp;amp; n = nodes[tp];
        int s = n.ch[r];
        n.ch[r] = nodes[s].ch[r ^ 1];
        nodes[s].ch[r ^ 1] = tp;
        update(tp); update(s);
        tp = s;
    }
    void maintain(int&amp;amp; tp, int s)
    {
        if (tp == 0) return;
        if (nodes[nodes[nodes[tp].ch[s]].ch[s]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
            rotate(tp, s);
        else if (nodes[nodes[nodes[tp].ch[s]].ch[s ^ 1]].sz &amp;gt; nodes[nodes[tp].ch[s ^ 1]].sz)
        {
            rotate(nodes[tp].ch[s], s ^ 1);
            rotate(tp, s);
        }
        else return;

        maintain(nodes[tp].ch[s], s);
        maintain(nodes[tp].ch[s ^ 1], s ^ 1);
        maintain(tp, s);
        maintain(tp, s ^ 1);
    }

    int find(int tp, const data&amp;amp; d) // return id
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d) return tp;
        return find(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d);
    }
    int erasefind(int&amp;amp; tp, const data&amp;amp; d) // return deleted
    {
        if (tp == 0) return 0;
        if (d == nodes[tp].d)
        {
            --nodes[tp].sz;
            if (--nodes[tp].dup &amp;lt;= 0) remove(tp);
            return 1;
        }
        if (erasefind(nodes[tp].ch[(d &amp;lt; nodes[tp].d) ^ 1], d))
        {
            --nodes[tp].sz;
            return 1;
        }
        return 0;
    }
    void remove(int&amp;amp; tp)
    {
        if (tp == 0) return;
        if (!nodes[tp].ch[0] || !nodes[tp].ch[1])
        {
            recycle.push_back(tp);
            tp = nodes[tp].ch[!nodes[tp].ch[0]];
        }
        else
        {
            int r = nodes[nodes[tp].ch[0]].sz &amp;gt;= nodes[nodes[tp].ch[1]].sz;
            rotate(tp, r ^ 1);
            remove(nodes[tp].ch[r]);
            update(tp);
        }
    }
    int kth(int tp, int k) // return id
    {
        node&amp;amp; n = nodes[tp];
        int sz = nodes[n.ch[0]].sz;
        if (sz &amp;gt;= k) return kth(n.ch[0], k);
        if (sz + n.dup &amp;gt;= k) return tp;
        return kth(n.ch[1], k - sz - n.dup);
    }
    int rank(int tp, const data&amp;amp; d, int dup)
    {
        if (tp == 0) return 1;
        node&amp;amp; n = nodes[tp];
        if (d == n.d) return nodes[n.ch[0]].sz + 1 + dup * n.dup;
        else if (d &amp;lt; n.d) return rank(n.ch[0], d, dup);
        return rank(n.ch[1], d, dup) + nodes[n.ch[0]].sz + n.dup;
    }
    // interface
    void init(int size)
    {
        nodes.clear();
        recycle.clear();
        nodes.reserve(size + 1);
        nodes.push_back(node(0));
        root = 0; reserve_size = size;
    }
    int get(int id) { return nodes[id].d.v; }
    int size() { return nodes[root].sz; }
    int insert(data v) { reserve(); return insert(root, v); }
    int erase(data v) { return erasefind(root, v); }
    int find(data v) { return find(root, v); } // return id
    int kth(int k) { return kth(root, k); } // return id
    // upperbound when upper = 1
    int rank(data v, int upper = 0) { return rank(root, v, upper); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;温馨提示&#34;&gt;温馨提示&lt;/h2&gt;

&lt;p&gt;别看代码长，如果你还没自己实现过，硬着头皮写一次，你就懂了，核心其实只有那么点。以上没有实现插入相等元素后用链表串起来，实在有需要时自己加一下就好了。又或者，如果你不需要处理相同元素，那么代码也有不少的简化，特别是删除元素的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线段树</title>
      <link>/post/20191208-segtree/</link>
      <pubDate>Sun, 08 Dec 2019 18:26:00 +0800</pubDate>
      <guid>/post/20191208-segtree/</guid>
      <description>&lt;p&gt;很多人在初始接触线段树的时候，一看到别人写一大堆代码就直接弃坑了，其实不要被它的外表所欺骗，线段树其实是相当好写的树结构了，而且理解起来其实很简单。要学会这个，你不能光会抄模板就会区间修改和求个区间和，因为实际应用经常会使用它的变形，还是在于理解&lt;del&gt;（理解后背板）&lt;/del&gt;。&lt;/p&gt;

&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;首先，回想一下heap的结构，它使用一个数组，同时使用下标本身来表达父子关系，这样的方式能节省大量指针所需要的内存空间，以下也使用这种表示方法来表示一棵线段树，也就是说，这里介绍的，属于&lt;strong&gt;狭义线段树&lt;/strong&gt;。假设我们的数据是以下这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;构建线段树后结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16--&amp;gt;1,4:8
1,8:16--&amp;gt;5,8:8
1,4:8--&amp;gt;1,2:1
1,4:8--&amp;gt;3,4:7
1,2:1--&amp;gt;1,1:1
1,2:1--&amp;gt;2,2:0
3,4:7--&amp;gt;3,3:5
3,4:7--&amp;gt;4,4:2
5,8:8--&amp;gt;5,6:7
5,8:8--&amp;gt;7,8:1
5,6:7--&amp;gt;5,5:3
5,6:7--&amp;gt;6,6:4
7,8:1--&amp;gt;7,7:0
7,8:1--&amp;gt;8,8:1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒号前面的两个数表示一条线段，冒号后表示的是数据，这个数据表示的是这个区间的和。如此一来，我们查询一个区间的和，可以很快地计算出来，例如求&lt;code&gt;[1,6]&lt;/code&gt;的和，那么需要拆分为&lt;code&gt;[1,4]&lt;/code&gt;与&lt;code&gt;[5,6]&lt;/code&gt;的和，分别是8和7，所以结果是&lt;code&gt;8+7=15&lt;/code&gt;，原理就是这样而已。&lt;/p&gt;

&lt;h2 id=&#34;单点数据更新&#34;&gt;单点数据更新&lt;/h2&gt;

&lt;p&gt;单点更新时，可以参考树状数组，先更新子节点，然后向上找父节点更新即可，也可以递归实现，这不在本节讨论范围。不过如果你确实只需要单点修改，那么可以考虑ZKW线段树，ZKW线段树是先更新子节点，然后向上找父节点更新，由于少了很多递归，常数比递归的线段树要小。后文提供一个简易的模板作为参考。&lt;/p&gt;

&lt;h2 id=&#34;区间数据更新&#34;&gt;区间数据更新&lt;/h2&gt;

&lt;p&gt;例如，我们希望对区间&lt;code&gt;[3,5]&lt;/code&gt;上的数都加上2，这时候需要引入懒惰标记，其实就是把操作记录在父节点上，有必要时再向下传递。像刚才的例子，都加上懒惰标记后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:7,0
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:7,0--&amp;gt;3,3:5,0
3,4:7,0--&amp;gt;4,4:2,0
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:3,0
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后对区间&lt;code&gt;[3,5]&lt;/code&gt;上的数都加上2，那么把这个区间拆分为&lt;code&gt;[3,4]&lt;/code&gt;和&lt;code&gt;[5,5]&lt;/code&gt;，更新标记&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:11,2
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:11,2--&amp;gt;3,3:5,0
3,4:11,2--&amp;gt;4,4:2,0
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:5,2
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是说，&lt;code&gt;[3,3]&lt;/code&gt;和&lt;code&gt;[4,4]&lt;/code&gt;都没有更新，更新在&lt;code&gt;[3,4]&lt;/code&gt;上了，那么接下来需要查询&lt;code&gt;[3,3]&lt;/code&gt;的话，就把标记向下传递一层，变成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
1,8:16,0--&amp;gt;1,4:8,0
1,8:16,0--&amp;gt;5,8:8,0
1,4:8,0--&amp;gt;1,2:1,0
1,4:8,0--&amp;gt;3,4:11,0
1,2:1,0--&amp;gt;1,1:1,0
1,2:1,0--&amp;gt;2,2:0,0
3,4:11,0--&amp;gt;3,3:7,2
3,4:11,0--&amp;gt;4,4:4,2
5,8:8,0--&amp;gt;5,6:7,0
5,8:8,0--&amp;gt;7,8:1,0
5,6:7,0--&amp;gt;5,5:5,2
5,6:7,0--&amp;gt;6,6:4,0
7,8:1,0--&amp;gt;7,7:0,0
7,8:1,0--&amp;gt;8,8:1,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，再获取区间&lt;code&gt;[3,3]&lt;/code&gt;的结果7，就是所需要的答案&lt;/p&gt;

&lt;h2 id=&#34;基础模板&#34;&gt;基础模板&lt;/h2&gt;

&lt;p&gt;以下基础模板只支持区间求和，以及区间整体加上一个数的操作，和&lt;a href=&#34;/post/20191111-fenwicktree/&#34;&gt;树状数组&lt;/a&gt;后面提供的模板实现了相同的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree_add
{
    struct node
    {
        int sum;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d; // 仿heap的形式保存线段树
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    // 当前tp节点对应的线段区间为[tl,tr]，更新区间是[l,r]
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl + 1) * v;
            d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 更新左右儿子
        if (l &amp;lt;= tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 统计左右儿子
        int sum = 0;
        if (l &amp;lt;= tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid + 1, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1，如需要从1开始那么要+1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz; // 扩展为满二叉树
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r, v, 0, sz - 1, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r, 0, sz - 1, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法，调用init初始化范围（注意下标从0到size-1，下标要从1开始的话要size+1，否则如果size正好是2的k次方时操作下标为size时会出问题），然后通过&lt;code&gt;update_add&lt;/code&gt;和&lt;code&gt;get_sum&lt;/code&gt;更新数据即可。&lt;/p&gt;

&lt;p&gt;另外一点，这个模板实现没有使用左闭右开区间来写，如果改用左闭右开区间，并添加build实现，则得到如下实现（代码有少许简化且更对称更好读）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree_add
{
    struct node
    {
        int sum;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl) * v;
            d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 更新左右儿子
        if (l &amp;lt; tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        // 统计左右儿子
        int sum = 0;
        if (l &amp;lt; tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid, tr, rson(tp));
        return sum;
    }
    void build(int a[], int alen, int tl, int tr, int tp)
    {
        if (tl + 1 == tr)
        {
            if (tl &amp;lt; alen)
                d[tp].sum = a[tl];
            else
                d[tp].sum = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        build(a, alen, tl, tmid, lson(tp));
        build(a, alen, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
        d[tp].lz_add = 0;
    }
    void build(int a[], int alen)
    {
        build(a, alen, 0, sz, 0);
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r + 1, v, 0, sz, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;进阶模板&#34;&gt;进阶模板&lt;/h2&gt;

&lt;p&gt;如果你需要支持区间整体加上某个数，同时支持区间整体设置为指定数，那么就需要多重懒惰标记，模板可以改写如下（闭区间实现）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    static const int lz_mark = 0x80000000;
    struct node
    {
        int sum;
        int lz_set;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl + 1) * v;
            if (d[tp].lz_set != lz_mark) d[tp].lz_set += v;
            else d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt;= tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    void update_set(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum = (tr - tl + 1) * v; //区间和
            d[tp].lz_set = v;
            d[tp].lz_add = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt;= tmid) update_set(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_set(l, r, v, tmid + 1, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    int get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid + 1, tr, d[tp].lz_set, tmid + 1, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid + 1, tr, d[tp].lz_add, tmid + 1, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        int sum = 0;
        if (l &amp;lt;= tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid + 1, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r, v, 0, sz - 1, 0);
    }
    void update_set(int l, int r, int v)
    {
        update_set(l, r, v, 0, sz - 1, 0);
    }
    int get_sum(int l, int r)
    {
        return get_sum(l, r, 0, sz - 1, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;左闭右开区间实现（接口为闭区间）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    static const int lz_mark = 0x80000000;
    struct node
    {
        int sum;
        int lz_set;
        int lz_add;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    void update_add(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum += (tr - tl) * v;
            if (d[tp].lz_set != lz_mark) d[tp].lz_set += v;
            else d[tp].lz_add = v;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt; tmid) update_add(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_add(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    void update_set(int l, int r, int v, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            d[tp].sum = (tr - tl) * v; //区间和
            d[tp].lz_set = v;
            d[tp].lz_add = 0;
            return;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        if (l &amp;lt; tmid) update_set(l, r, v, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) update_set(l, r, v, tmid, tr, rson(tp));
        d[tp].sum = d[lson(tp)].sum + d[rson(tp)].sum;
    }
    ll get_sum(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].sum;
        }
        int tmid = (tl + tr) / 2;
        // 下发lazy标志一层
        if (d[tp].lz_set != lz_mark)
        {
            update_set(tl, tmid, d[tp].lz_set, tl, tmid, lson(tp));
            update_set(tmid, tr, d[tp].lz_set, tmid, tr, rson(tp));
            d[tp].lz_set = lz_mark;
        }
        else if (d[tp].lz_add != 0)
        {
            update_add(tl, tmid, d[tp].lz_add, tl, tmid, lson(tp));
            update_add(tmid, tr, d[tp].lz_add, tmid, tr, rson(tp));
            d[tp].lz_add = 0;
        }
        int sum = 0;
        if (l &amp;lt; tmid) sum += get_sum(l, r, tl, tmid, lson(tp));
        if (r &amp;gt; tmid) sum += get_sum(l, r, tmid, tr, rson(tp));
        return sum;
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int l, int r, int v)
    {
        update_add(l, r + 1, v, 0, sz, 0);
    }
    void update_set(int l, int r, int v)
    {
        update_set(l, r + 1, v, 0, sz, 0);
    }
    ll get_sum(int l, int r)
    {
        return get_sum(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;简易区间最值模板（就是简易得只有查询，如果要支持更新就自己加上）&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt;
  &lt;h4&gt; 点击展开 &lt;/h4&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct seg_tree
{
    struct node
    {
        int max;
        int min;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    inline int lson(int tp) { return tp * 2 + 1; }
    inline int rson(int tp) { return tp * 2 + 2; }
    int get_max(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].max;
        }
        int tmid = (tl + tr) / 2;
        int ret = INT_MIN;
        if (l &amp;lt; tmid) ret = max(ret, get_max(l, r, tl, tmid, lson(tp)));
        if (r &amp;gt; tmid) ret = max(ret, get_max(l, r, tmid, tr, rson(tp)));
        return ret;
    }
    int get_min(int l, int r, int tl, int tr, int tp)
    {
        if (l &amp;lt;= tl &amp;amp;&amp;amp; tr &amp;lt;= r)
        {
            return d[tp].min;
        }
        int tmid = (tl + tr) / 2;
        int ret = INT_MAX;
        if (l &amp;lt; tmid) ret = min(ret, get_min(l, r, tl, tmid, lson(tp)));
        if (r &amp;gt; tmid) ret = min(ret, get_min(l, r, tmid, tr, rson(tp)));
        return ret;
    }
    void build(int a[], int alen, int tl, int tr, int tp)
    {
        if (tl + 1 == tr)
        {
            if (tl &amp;lt; alen)
            {
                d[tp].max = a[tl];
                d[tp].min = a[tl];
            }
            else
            {
                d[tp].max = 0;
                d[tp].min = 0;
            }
            return;
        }
        int tmid = (tl + tr) / 2;
        build(a, alen, tl, tmid, lson(tp));
        build(a, alen, tmid, tr, rson(tp));
        d[tp].max = max(d[lson(tp)].max, d[rson(tp)].max);
        d[tp].min = min(d[lson(tp)].min, d[rson(tp)].min);
    }
    void build(int a[], int alen)
    {
        build(a, alen, 0, sz, 0);
    }
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    int get_min(int l, int r)
    {
        return get_min(l, r + 1, 0, sz, 0);
    }
    int get_max(int l, int r)
    {
        return get_max(l, r + 1, 0, sz, 0);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;zkw线段树模板&#34;&gt;ZKW线段树模板&lt;/h2&gt;

&lt;p&gt;这是单点修改求区间和的模板，求区间最值稍微改改就好了，如果需要区间修改，那么可以模仿树状数组的办法做差分，或做永久化标记，适应性比递归实现的线段树差一些，优点是常数小，以下实现比前面的大约快30%左右，代码更简单，就不额外解释了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct zkwseg_tree
{
    struct node
    {
        int sum;
    };
    int sz;
    vector&amp;lt;node&amp;gt; d;
    void init(int size) // 可操作下标范围为0~size-1
    {
        sz = size;
        while (sz &amp;amp; (sz - 1)) sz += sz&amp;amp;-sz;
        d.resize(sz * 2);
    }
    void update_add(int p, int v)
    {
        int i = sz + p;
        while (i)
        {
            d[i].sum += v;
            i &amp;gt;&amp;gt;= 1;
        }
    }
    int get_sum(int l, int r)
    {
        int sum = 0;
        l += sz;
        r += sz + 1;
        for (; l &amp;lt; r; l&amp;gt;&amp;gt;=1, r&amp;gt;&amp;gt;=1)
        {
            if (l &amp;amp; 1)
            {
                sum += d[l++].sum;
            }
            if (r &amp;amp; 1)
            {
                sum += d[--r].sum;
            }
        }
        return sum;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它说明&#34;&gt;其它说明&lt;/h2&gt;

&lt;p&gt;以上模板为了解释简单，有的实现只有&lt;code&gt;update&lt;/code&gt;和&lt;code&gt;get_sum&lt;/code&gt;操作，并没有&lt;code&gt;build&lt;/code&gt;的部分，只使用&lt;code&gt;update&lt;/code&gt;即可完成build的操作，时间复杂度也是一样的。除了维护区间和，也可以维护区间最大最小值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>后缀数组</title>
      <link>/post/20191113-suffixarray/</link>
      <pubDate>Wed, 13 Nov 2019 18:26:00 +0800</pubDate>
      <guid>/post/20191113-suffixarray/</guid>
      <description>&lt;p&gt;后缀数组其实概念很好理解，就是给出一个字符串，长度是n，对它所有的n个后缀编号从1到n进行排序，排序后，最小的那个后缀的编号假设是m1，那么&lt;code&gt;sa[1] = m1&lt;/code&gt;，类似地，第二小的是m2的话，&lt;code&gt;sa[2] = m2&lt;/code&gt;，sa这个数组就是我们所需要的后缀数组。根据这个，我们可以直接用sort算出sa，以下为最简单的实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_simple
{
    vector&amp;lt;int&amp;gt; sa;
    int s_size;
    const char* p_s;
    int size() const
    {
        return s_size;
    }
    static bool cmp(const char* x, const char* y)
    {
        return strcmp(x, y) &amp;lt; 0;
    }
    void init(char * str)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;

        sa.resize(n + 1);
        vector&amp;lt; const char* &amp;gt; rp;
        rp.resize(n + 1);

        for (int i = 1; i &amp;lt;= n; ++i)
        {
            rp[i] = p_s + i;
        }
        sort(rp.begin() + 1, rp.end(), cmp);
        for (int i = 1; i &amp;lt;= n; ++i)
        {
            sa[i] = rp[i] - p_s;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个实现的时间复杂度 $O(n^2logn)$&lt;/p&gt;

&lt;p&gt;要注意的一点是下标从1开始。有了这个，可以做点什么呢？例如给你一个串p，求出p在主串s中出现了多少次。那么在有了sa的情况下，因为sa是有序的，问题就变成了二分搜索，分别用&lt;code&gt;lower_bound&lt;/code&gt;和&lt;code&gt;upper_bound&lt;/code&gt;通过sa搜索p，两个相减便得出现次数。&lt;/p&gt;

&lt;h2 id=&#34;rank-数组&#34;&gt;rank 数组&lt;/h2&gt;

&lt;p&gt;光有sa其实还不够用，我们还需要rank数组，&lt;code&gt;rank[m]&lt;/code&gt;的值是p的话，那么表示字符串中编号m的后缀，它的排名是p，即与sa数组是互逆，所以我们可以得到 &lt;code&gt;sa[rank[i]] == rank[sa[i]] == i&lt;/code&gt; ，也就是说通过rank，可以快速判断某两个后缀的大小关系。&lt;/p&gt;

&lt;h2 id=&#34;height-数组&#34;&gt;height 数组&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;height[i]&lt;/code&gt;的值表示的是，&lt;code&gt;sa[i-1]&lt;/code&gt;与&lt;code&gt;sa[i]&lt;/code&gt;这两个后缀的相同前缀长度，特别地，&lt;code&gt;height[1] == 0&lt;/code&gt;，求解height需要用到rank数组和sa数组，以及如下引理&lt;/p&gt;

&lt;p&gt;$$height[rank[i]]\ge height[rank[i-1]]-1$$&lt;/p&gt;

&lt;p&gt;通过以上引理直接暴力实现即可，复杂度 $O(n)$ ，这里不做证明。&lt;/p&gt;

&lt;p&gt;三个数组的完整实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_simple
{
    vector&amp;lt;int&amp;gt; sa, rk, ht;
protected:
    int s_size;
    const char* p_s;
public:
    int size() const
    {
        return s_size;
    }

    static bool cmp(const char* x, const char* y)
    {
        return strcmp(x, y) &amp;lt; 0;
    }

    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;

        sa.resize(n + 1);
        rk.resize(n + 1);
        vector&amp;lt;const char*&amp;gt; rp;
        rp.resize(n + 1);

        for (int i = 1; i &amp;lt;= n; ++i)
        {
            rp[i] = p_s + i;
        }
        sort(rp.begin() + 1, rp.end(), cmp);
        for (int i = 1; i &amp;lt;= n; ++i)
        {
            sa[i] = rp[i] - p_s;
            rk[sa[i]] = i;
        }
        if (h) create_height();
    }
    void create_height()
    {
        ht.resize(s_size + 1);
        for (int i = 1, k = 0; i &amp;lt;= s_size; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[rk[i] - 1] + k])
                ++k;
            ht[rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;应用1-可重叠最长重复子串&#34;&gt;应用1 可重叠最长重复子串&lt;/h2&gt;

&lt;p&gt;这个题目在本博客讲&lt;a href=&#34;/post/20191028-kmp/&#34;&gt;kmp&lt;/a&gt;部分已经有介绍，例如&lt;code&gt;eabcaefabcabc&lt;/code&gt;，最长重复子串是&lt;code&gt;abca&lt;/code&gt;，长度是4，这里介绍用后缀数组的解法。其实所谓的最长重复子串，就是找到两个后缀，让它们的公共前缀最长，那这就简单了，我们只要在height数组里找最大值就可以了，查找时间 $O(n)$ 。&lt;/p&gt;

&lt;h2 id=&#34;应用2-不同子串的个数&#34;&gt;应用2 不同子串的个数&lt;/h2&gt;

&lt;p&gt;来看这道题 &lt;a href=&#34;https://vjudge.net/problem/SPOJ-DISUBSTR&#34; target=&#34;_blank&#34;&gt;SPOJ-DISUBSTR&lt;/a&gt; ，说的是统计一个字符串里有多少不同的子串。&lt;/p&gt;

&lt;p&gt;这里我们就需要用到height数组，由于它表示的正是和前一个后缀的相同前缀长度，那么我们对任意的后缀&lt;code&gt;sa[i]&lt;/code&gt;，取这个后缀的长度，即&lt;code&gt;len(s)-sa[i]&lt;/code&gt;，减去&lt;code&gt;height[i]&lt;/code&gt;再加上1，即表示&lt;code&gt;sa[i]&lt;/code&gt;这个后缀有多少个前缀与&lt;code&gt;sa[i-1]&lt;/code&gt;不相同，所以我们累加即可。核心代码也就这么几行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int sum_h = 0;
for (int i = 1; i &amp;lt;= sa.size(); ++i)
{
    sum_h += sa.size() - sa.sa[i] - sa.ht[i] + 1;
}
printf(&amp;quot;%d\n&amp;quot;, sum_h);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也许有人会发现问题了，这个题直接用hash实现，才 $O(n^2)$ 的复杂度，这个后缀数组的实现，光是生成就 $O(n^2logn)$ ，不是还更慢吗？单看时间复杂度的确是这样，但事实上后缀数组可以0ms通过，hash实现约400ms左右。&lt;/p&gt;

&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;

&lt;p&gt;直接排序的后缀数组确实过于暴力了，虽然不少题目已经足够AC，但我们还有更好的，这里简要介绍倍增法。假设对字符串&amp;rdquo;ababaabb&amp;rdquo;求后缀数组，那么先对每一个字符做排序，计算出它们的rank，注意相同串的rank结果要相同，结果在下表的&amp;rdquo;排序1&amp;rdquo;，然后我们对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+1&lt;/code&gt;在&amp;rdquo;排序1&amp;rdquo;上的rank组合起来，这个组合的key再做排序，如下表&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;1 1&lt;/td&gt;
&lt;td&gt;1 2&lt;/td&gt;
&lt;td&gt;2 2&lt;/td&gt;
&lt;td&gt;2 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上这样得到了所有后缀中，前缀长度为2的排名，接下来，我们步长翻倍，对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+2&lt;/code&gt;在&amp;rdquo;排序2&amp;rdquo;上的rank组合起来再排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;排序2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合2&lt;/td&gt;
&lt;td&gt;2 2&lt;/td&gt;
&lt;td&gt;4 4&lt;/td&gt;
&lt;td&gt;2 1&lt;/td&gt;
&lt;td&gt;4 2&lt;/td&gt;
&lt;td&gt;1 5&lt;/td&gt;
&lt;td&gt;2 3&lt;/td&gt;
&lt;td&gt;5 0&lt;/td&gt;
&lt;td&gt;3 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上这样得到了所有后缀中，前缀长度为4的排名，接下来，我们步长翻倍，对每个&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;i+4&lt;/code&gt;在&amp;rdquo;排序3&amp;rdquo;上的rank组合起来再排序&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;下标&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;排序3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;组合3&lt;/td&gt;
&lt;td&gt;3 1&lt;/td&gt;
&lt;td&gt;7 4&lt;/td&gt;
&lt;td&gt;2 8&lt;/td&gt;
&lt;td&gt;6 5&lt;/td&gt;
&lt;td&gt;1 0&lt;/td&gt;
&lt;td&gt;4 0&lt;/td&gt;
&lt;td&gt;8 0&lt;/td&gt;
&lt;td&gt;5 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;排序4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至此，再下一轮的步长是8，已经大于等于字符串长度的时候，rank数组便计算完成了。以下是使用此思路的实现代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_2_sort
{
    vector&amp;lt;int&amp;gt; sa, ht;
    int *rk;
protected:
    vector&amp;lt;int&amp;gt; rk1, rk2;
    int s_size;
    int *p_rk, *o_rk;
    const char* p_s;

    struct SA_2_sort_cmp
    {
        int *rk, w;
        SA_2_sort_cmp(int *_rk, int _w) :rk(_rk), w(_w) {}
        bool operator()(int x, int y) const
        {
            return rk[x] == rk[y] ? rk[x + w] &amp;lt; rk[y + w] : rk[x] &amp;lt; rk[y];
        }
    };
public:
    bool cmp(int x, int y, int w)
    {
        return o_rk[x] == o_rk[y] &amp;amp;&amp;amp; o_rk[x + w] == o_rk[y + w];
    }
    int size() const
    {
        return s_size;
    }
    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;
        sa.resize(n + 1);
        rk1.clear(); rk1.resize(n * 2 + 2);
        rk2.clear(); rk2.resize(n * 2 + 2);
        p_rk = &amp;amp;*rk1.begin();
        o_rk = &amp;amp;*rk2.begin();

        for (int i = 1; i &amp;lt;= n; ++i) p_rk[i] = p_s[i];

        for (int w = 1, i, p; w &amp;lt; n; w &amp;lt;&amp;lt;= 1)
        {
            // init sa
            for (int i = 1; i &amp;lt;= n; ++i) sa[i] = i;

            sort(sa.begin() + 1, sa.end(), SA_2_sort_cmp(p_rk, w));

            // write new rank
            for (std::swap(p_rk, o_rk), p = 0, i = 1; i &amp;lt;= n; ++i)
                p_rk[sa[i]] = cmp(sa[i], sa[i - 1], w) ? p : ++p;
        }
        rk = p_rk;
        if (n == 1) sa[1] = rk[1] = 1;
        if (h) create_height();
    }
    void create_height()
    {
        int n = s_size;
        ht.resize(n + 1);
        for (int i = 1, k = 0; i &amp;lt;= n; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[p_rk[i] - 1] + k])
                ++k;
            ht[p_rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上实现的时间复杂度是 $O(nlog^2n)$ ，如果你想要更快，那就用 $O(n)$ 的计数排序吧，便可把整体时间复杂度下降到 $O(nlogn)$&lt;/p&gt;

&lt;h2 id=&#34;再优化&#34;&gt;再优化&lt;/h2&gt;

&lt;p&gt;绝大多数情况下，使用以上方法 $O(nlogn)$ 复杂度已经够用了，但如果你是一个更有追求的人，可以继续学习 $O(n)$ 复杂度建立后缀数组的办法，名字叫做&lt;code&gt;SA-IS&lt;/code&gt;和&lt;code&gt;DC3&lt;/code&gt;，你可以通过搜索以上两个名字得到更具体的介绍，本文就只介绍到这里。&lt;/p&gt;

&lt;h2 id=&#34;o-nlogn-模板&#34;&gt;$O(nlogn)$ 模板&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct SA_2
{
    vector&amp;lt;int&amp;gt; sa, ht;
    int *rk;
protected:
    vector&amp;lt;int&amp;gt; rk1, rk2;
    int s_size;
    int *p_rk, *o_rk;
    const char* p_s;
public:
    bool cmp(int x, int y, int w)
    {
        return o_rk[x] == o_rk[y] &amp;amp;&amp;amp; o_rk[x + w] == o_rk[y + w];
    }
    int size() const
    {
        return s_size;
    }
    void init(char * str, bool h = true)
    {
        int n = strlen(str);
        s_size = n;
        p_s = str - 1;
        int cnt_size = max(256, n) + 1;
        vector&amp;lt;int&amp;gt; vid, vpx, vcnt;
        sa.resize(n + 1);
        rk1.clear(); rk1.resize(n * 2 + 2);
        rk2.clear(); rk2.resize(n * 2 + 2);
        vid.resize(n + 1); vpx.resize(n + 1);
        vcnt.resize(cnt_size);
        int* id = &amp;amp;*vid.begin();
        int* px = &amp;amp;*vpx.begin();
        int* cnt = &amp;amp;*vcnt.begin();
        p_rk = &amp;amp;*rk1.begin();
        o_rk = &amp;amp;*rk2.begin();

        int m = 128, p = 0;
        for (int i = 1; i &amp;lt;= n; ++i) ++cnt[p_rk[i] = p_s[i]];
        for (int i = 1; i &amp;lt;= m; ++i) cnt[i] += cnt[i - 1];
        for (int i = n; i &amp;gt;= 1; --i) sa[cnt[p_rk[i]]--] = i;

        for (int w = 1, i; w &amp;lt; n; w &amp;lt;&amp;lt;= 1, m = p)
        {
            // init id
            for (p = 0, i = n; i &amp;gt; n - w; --i)
                id[++p] = i;
            for (int i = 1; i &amp;lt;= n; ++i)
                if (sa[i] &amp;gt; w) id[++p] = sa[i] - w;

            sort(cnt, id, px, n, m);

            // write new rank
            for (std::swap(p_rk, o_rk), p = 0, i = 1; i &amp;lt;= n; ++i)
                p_rk[sa[i]] = cmp(sa[i], sa[i - 1], w) ? p : ++p;
        }
        rk = p_rk;
        if (n == 1) sa[1] = rk[1] = 1;
        if (h) create_height();
    }
    void sort(int* cnt, int* id, int* px, int n, int m)
    {
        memset(cnt, 0, sizeof(int) * (m + 1));
        for (int i = 1; i &amp;lt;= n; ++i)
            ++cnt[px[i] = p_rk[id[i]]];
        for (int i = 1; i &amp;lt;= m; ++i)
            cnt[i] += cnt[i - 1];
        for (int i = n; i &amp;gt;= 1; --i)
            sa[cnt[px[i]]--] = id[i];
    }
    void create_height()
    {
        int n = s_size;
        ht.resize(n + 1);
        for (int i = 1, k = 0; i &amp;lt;= n; ++i)
        {
            if (k) --k;
            while (p_s[i + k] == p_s[sa[p_rk[i] - 1] + k])
                ++k;
            ht[p_rk[i]] = k;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>树状数组</title>
      <link>/post/20191111-fenwicktree/</link>
      <pubDate>Mon, 11 Nov 2019 13:32:00 +0800</pubDate>
      <guid>/post/20191111-fenwicktree/</guid>
      <description>&lt;p&gt;树状数组，是一个用于在近似 $O(logn)$ 时间内动态修改以及查询前缀和的数据结构，以下我们先来看以下树关系表格&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里表达的是，16的子节点有8, 12, 14, 15&lt;/p&gt;

&lt;p&gt;8的子节点有4, 6, 7&lt;/p&gt;

&lt;p&gt;12的子节点有10, 11，即夹在12与它的同级节点8之间&lt;/p&gt;

&lt;p&gt;我们把数值与它的二进制一起形象化画出下图&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
2,0010--&amp;gt;1,0001
4,0100--&amp;gt;3,0011
4,0100--&amp;gt;2,0010
6,0110--&amp;gt;5,0101
8,1000--&amp;gt;7,0111
8,1000--&amp;gt;6,0110
8,1000--&amp;gt;4,0100
10,1010--&amp;gt;9,1001
12,1100--&amp;gt;11,1011
12,1100--&amp;gt;10,1010
14,1110--&amp;gt;13,1101
16,10000--&amp;gt;8,1000
16,10000--&amp;gt;12,1100
16,10000--&amp;gt;14,1110
16,10000--&amp;gt;15,1111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样构造的原理是运用到一个二进制运算技巧，假设一个节点x，那么它的父节点就是&lt;code&gt;x + (x &amp;amp; -x)&lt;/code&gt;，其中，&lt;code&gt;x &amp;amp; -x&lt;/code&gt;是去掉右起第一个1的左边的1，例如x如果是6，二进制是110，只保留最右边的1结果就是10了，所以6的父节点就是&lt;code&gt;6+2=8&lt;/code&gt;，更多的可以参考这篇&lt;a href=&#34;/post/20191012-binary-skill/&#34;&gt;二进制技巧&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;前缀和&#34;&gt;前缀和&lt;/h2&gt;

&lt;p&gt;给一个数组a，如果我们需要计算前n个元素的和 $\sum_{i=1}^n{a[i]}$ ，直接累加是很慢的，这里我们用树状数组，我们规定，每个节点保存的值，是它和它的子节点的和，我们用数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt; 画个表格，注意数组下标从1开始。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;那有了这个表，我们要是求出前4个数的和，直接看第4列是30，答案就出来了，因为它上面的数就是它和它所有子结点的和。但如果是别的数呢，例如要求前7个数的和，就不能光看第7列了，需要把第4列、第6列和第7列的3个数相加，即&lt;code&gt;30+9+3=42&lt;/code&gt;就是前7个数的和。注意到这三列其实就是三个同级节点，而且我们通过7这个数本身可以轻松计算前两列的数，计算的方法是&lt;code&gt;x - (x &amp;amp; -x)&lt;/code&gt;，把&lt;code&gt;x=7&lt;/code&gt;代入，得到6，再把6代入，得到4，再把4代入，得到0，0就结束了，而在这个迭代的过程里，就知道我们应该把4,6,7三列的数相加。&lt;/p&gt;

&lt;p&gt;再换一个数，例如11呢，把&lt;code&gt;x=11&lt;/code&gt;代入，得到10，再把10代入，得到8，再把8代入，得到0，所以我们应该把8,10,11三列的数加起来，即&lt;code&gt;44+1+6=51&lt;/code&gt;就是前11个数的和。&lt;/p&gt;

&lt;p&gt;把以上过程写成函数，就是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int sum(int fwtree[], int x)
{
    int r = 0;
    while (x &amp;gt; 0)
    {
        r += fwtree[x];
        x -= x&amp;amp;-x;
    }
    return r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，这段代码的时间复杂度近似是 $O(logx)$&lt;/p&gt;

&lt;h2 id=&#34;动态维护&#34;&gt;动态维护&lt;/h2&gt;

&lt;p&gt;还是前面的数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt; ，现在假如已经计算好了树状数组，但我们需要对第6个元素，让它减少6，怎么操作呢，其实很简单，根据定义，在子节点修改的时候，让它的所有父节点都做相同的修改，那么6的父节点分别有8,16，所以我们对第6,8,16列都一起减少6，得到以下新表格&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这样就维护完成了，所以咱们的实现代码也非常的简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void add(int fwtree[], int treesize, int x, int add)
{
    while (x &amp;lt;= treesize)
    {
        fwtree[x] += add;
        x += x&amp;amp;-x;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;区间和&#34;&gt;区间和&lt;/h2&gt;

&lt;p&gt;我们之所以需要前缀和，就是为了能快速求区间和。例如我们需要求出数组第i个到第j个元素的和，那么我们用&lt;code&gt;sum(x)&lt;/code&gt;表示前x个元素的和，那么可以转化为求&lt;code&gt;sum(j) - sum(i-1)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;区间操作-单点查询&#34;&gt;区间操作+单点查询&lt;/h2&gt;

&lt;p&gt;因为树状数组的修改是单点修改，即每次只能修改一个数，那么现在我们提出一个新问题，如果我们需要多次做区间操作（整个区间的数同时加上y），然后查询数组里面指定第k个元素是什么，例如这个题&lt;a href=&#34;https://loj.ac/problem/131&#34; target=&#34;_blank&#34;&gt;loj131&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于树状数组不能快速做区间操作，我们用到另一个技巧叫做差分法，我们对数组 &lt;code&gt;9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1&lt;/code&gt;求相邻元素的差，得到新的数组&lt;/p&gt;

&lt;p&gt;&lt;code&gt;9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样做了后，如果我们要求出原来第k个元素，那么就是求前k个元素之和，所以如果第i个元素加上a，那么相当于i后面所有元素都加上a。&lt;/p&gt;

&lt;p&gt;所以，这时候的区间操作，就会变成单点操作，例如我们要对区间&lt;code&gt;[i,j]&lt;/code&gt;所有的元素加上a，那么在差分了以后，其实就是对第i个元素加上a，再对第j+1个元素减去a。&lt;/p&gt;

&lt;h2 id=&#34;区间操作-区间和&#34;&gt;区间操作+区间和&lt;/h2&gt;

&lt;p&gt;如果我们既要做区间操作，同时还要求区间和怎么办，为了支持区间操作，我们仍然先做差分，然后接下来就是让人头痛的数学推导，假设数组a是原数组，b是a的差分数组，由前缀和的定义，我们求前n个元素的和，即&lt;/p&gt;

&lt;p&gt;$$ \sum_{i=1}^{n} a_i $$&lt;/p&gt;

&lt;p&gt;展开为b数组表达&lt;/p&gt;

&lt;p&gt;$$ = \sum_{i=1}^n{} \sum_{j=1}^i b_j $$&lt;/p&gt;

&lt;p&gt;展开，合并同类项&lt;/p&gt;

&lt;p&gt;$$ = \sum_{i=1}^n b_i\times(n-i+1) $$&lt;/p&gt;

&lt;p&gt;$$ = (n+1)\times\sum_{i=1}^n b_i - \sum_{i=1}^n b_i\times i $$&lt;/p&gt;

&lt;p&gt;那么，我们再定义一个c数组，满足&lt;code&gt;c[i] == b[i] * i&lt;/code&gt;，然后我们再分别对b和c维护一个树状数组，定义&lt;code&gt;sum(b,x)&lt;/code&gt;表示数组b前x个元素的和，&lt;code&gt;sum(c,x)&lt;/code&gt;表示数组c前x个元素的和，那么我们便可以通过计算&lt;code&gt;(x + 1) * sum(b, x) - sum(c, x)&lt;/code&gt;求出数组a的前缀和。&lt;/p&gt;

&lt;p&gt;习题：&lt;a href=&#34;https://loj.ac/problem/132&#34; target=&#34;_blank&#34;&gt;loj132&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;拓展&#34;&gt;拓展&lt;/h2&gt;

&lt;p&gt;树状数组还有一些别的技巧，一是 $O(n)$ 建立，通过已知数组a在 $O(n)$ 时间生成对应的树状数组（直接add来操作是nlogn），这个在这里不做介绍。&lt;/p&gt;

&lt;p&gt;还有权值树状数组求第k小元素。所谓权值树状数组，就是用&lt;code&gt;a[i] = v&lt;/code&gt;来表示数值i重复出现了v次，所以v是非负数，那么这个数组的前缀和就是递增的，即存在二分。然后对数组a维护的树状数组直接二分的话是 $O(lognlogn)$ ，但我们可以运用树状数组的特性优化到 $O(logn)$ ，以下是实现代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int kth(int fwtree[], int size, int k)
{
    int cnt = 0, ret = 0;
    for (int i = (int)(log(size + 0.1) / log(2)); ~i; --i)
    {
        ret += 1 &amp;lt;&amp;lt; i;
        if (ret &amp;gt;= size || cnt + fwtree[ret] &amp;gt;= k)
            ret -= 1 &amp;lt;&amp;lt; i;
        else
            cnt += fwtree[ret];
    }
    return ret + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;权值树状数组还有一个应用，就是用来求&lt;strong&gt;逆序数&lt;/strong&gt;，先对原数组排序求出每个元素的rank，转化为长度n，元素为1~n的一个排列，之后使用权值树状数组，就可以轻松求出在&lt;code&gt;a[1]&lt;/code&gt;到&lt;code&gt;a[i-1]&lt;/code&gt;有多少个元素比&lt;code&gt;a[i]&lt;/code&gt;要大，计算&lt;code&gt;sum(n) - sum(a[i])&lt;/code&gt;便知，把结果累加就是逆序数。&lt;/p&gt;

&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;

&lt;p&gt;区间修改+区间求和模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;vector&amp;gt;
typedef long long ll;


struct fwtree_range
{
    std::vector&amp;lt;int&amp;gt; ta;
    std::vector&amp;lt;ll&amp;gt; tb;
    int sz;
    void init(int size)
    {
        ta.clear(); ta.resize(size + 1);
        tb.clear(); tb.resize(size + 1);
        sz = size;
    }
    void add(int x, int a)
    {
        ll v = a * (ll)x;
        for (; x &amp;lt;= sz; x += x&amp;amp;-x)
        {
            ta[x] += a;
            tb[x] += v;
        }
    }
    template &amp;lt;class T&amp;gt;
    ll sum_t(T&amp;amp; t, int x)
    {
        ll r = 0;
        for (; x &amp;gt; 0; x -= x&amp;amp;-x)
            r += t[x];
        return r;
    }
    ll sum(int x)
    {
        return (x + 1) * sum_t(ta, x) - sum_t(tb, x);
    }
    void range_add(int l, int r, int a)
    {
        add(l, a);
        add(r + 1, -a);
    }
    ll range_sum(int l, int r)
    {
        return sum(r) - sum(l - 1);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法，调用&lt;code&gt;init&lt;/code&gt;初始化大小后，使用&lt;code&gt;range_add&lt;/code&gt;及&lt;code&gt;range_sum&lt;/code&gt;做区间修改及区间和查询就行了，当然它也支持单点修改和单点查询，你令区间&lt;code&gt;l == r&lt;/code&gt;就行了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KMP及扩展KMP</title>
      <link>/post/20191028-kmp/</link>
      <pubDate>Mon, 28 Oct 2019 13:32:00 +0800</pubDate>
      <guid>/post/20191028-kmp/</guid>
      <description>&lt;p&gt;KMP之所以在竞赛中常见，并不是因为它用来匹配字符串，而是用它的next数组，为了介绍它，我们先讲讲最长公共前缀&lt;/p&gt;

&lt;h2 id=&#34;最长公共前缀&#34;&gt;最长公共前缀&lt;/h2&gt;

&lt;p&gt;我们拿字符串&lt;code&gt;ababcab&lt;/code&gt;作为例子&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里所表达的是，例如取第3、4个字符&amp;rdquo;ab&amp;rdquo;，这个子串与前缀完全匹配，且它的长度是2，所以就记录2，而第3、4、5个字符&amp;rdquo;abc&amp;rdquo;与前缀不能完全匹配，就记作0，含义就这么简单，而且你会发现，计算b的时候，可以根据它所匹配的字符的偏移来，b如果是匹配的，就找到匹配的那个字符是数组中的第几个，它是第二个，所以填2进去。我们再来看更复杂的例子&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后那个字符不匹配的时候，1是怎么计算出来的呢，直接重新计算当然也可以，但就出现重复计算了。我们考虑一下匹配过程，在前面的字符a的时候，前后各一个指针，像这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后两个a匹配，&lt;code&gt;arr[6] = pointer1 - arr&lt;/code&gt; 得到3，然后两指针一起移动&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这时候，不匹配，那么前一个指针上一次指向的是&lt;code&gt;arr[2]&lt;/code&gt;的位置，即图上&lt;code&gt;*&lt;/code&gt;的地方，值是1，这个值如果是p，那就移动到&lt;code&gt;arr[p]&lt;/code&gt;的地方，所以就移动到&lt;code&gt;arr[1]&lt;/code&gt;的地方，本质上就是找到前一个匹配此后缀的位置，即&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后再尝试匹配，这次匹配上了，然后前一指针指向第二个元素，所以赋值2&lt;/p&gt;

&lt;h2 id=&#34;next数组&#34;&gt;next数组&lt;/h2&gt;

&lt;p&gt;以上过程你需要细细理解，在理解以上过程后，再去理解next数组就非常简单了，next数组只是把以上数组加了一偏移，如下&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这么做是为了简化代码的书写，当然你直接用公共前缀的那个数组来做也是可以的&lt;/p&gt;

&lt;p&gt;不过本文不介绍怎么做字符串匹配，这种文章到处都是，我们要讲的是竞赛中的典型应用&lt;/p&gt;

&lt;p&gt;生成next数组的算法的时间复杂度为 $O(n)$ ，n是数组长度&lt;/p&gt;

&lt;h3 id=&#34;应用1-poj2406&#34;&gt;应用1 &lt;a href=&#34;http://poj.org/problem?id=2406&#34; target=&#34;_blank&#34;&gt;poj2406&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;题目大意是给你一个字符串s，找出一个串a，使得a自己重复n次，便得到字符串s，要找到最大的n值。例如&lt;code&gt;ababab&lt;/code&gt;，可以找到&lt;code&gt;ab&lt;/code&gt;重复3次得到，所以输出3。像这种就是next数组表演的时候，它在计算自匹配方面非常合适，我们先再来理解一下next数组，它的值表示与前缀的重复长度，那么看下表，使用长度为102的&lt;code&gt;abab....abab&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;&amp;hellip;&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们发现，使用串长102减去next数组最后一个值，自然就得到了重复前缀的最短长度，既然它是最短的，那么我们用总长102除以2，就得到了重复的次数，就是我们想要的答案。当然前提是能整除，如果不能整除那么这样的前缀便不存在，输出1就行了。&lt;/p&gt;

&lt;h3 id=&#34;应用2-poj2752&#34;&gt;应用2 &lt;a href=&#34;http://poj.org/problem?id=2752&#34; target=&#34;_blank&#34;&gt;poj2752&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;题目大意是给你一个字符串s，找出所有前缀等于后缀的串长。我们先来试试算一个短点的&lt;code&gt;ababcababcabab&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以轻松看出next的最后一个值9肯定就是其中一个长度，那接着呢？我们需要回想一下，构造这个数组的时候，如果匹配失败，是怎么找到前一个匹配当前后缀的前缀的，这个值如果是p，那就移动到&lt;code&gt;arr[p]&lt;/code&gt;的地方，如果你还记得这个，那就好办了，我们取&lt;code&gt;arr[9]&lt;/code&gt;，结果是4，再取&lt;code&gt;arr[4]&lt;/code&gt;结果是2，再取&lt;code&gt;arr[2]&lt;/code&gt;，结果是0，循环结束，所以加上整个串长14就是我们所要的答案了，完整结果是&lt;code&gt;2 4 9 14&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;应用3-子串出现次数&#34;&gt;应用3 子串出现次数&lt;/h3&gt;

&lt;p&gt;给你主串s和子串t，求t在s中出现了多少次，例如&lt;code&gt;s=&amp;quot;abababa&amp;quot;&lt;/code&gt;，&lt;code&gt;t=&amp;quot;aba&amp;quot;&lt;/code&gt;，那么t在s中出现了3次。&lt;/p&gt;

&lt;p&gt;这里运用到一个技巧，我们把s和t连接成这个串&lt;code&gt;u=&amp;quot;aba#abababa&amp;quot;&lt;/code&gt;，即把t放在s的前面并中间使用&lt;code&gt;#&lt;/code&gt;分隔，这个符号在两个串中都没有出现。然后我们对u计算next数组，那么next数组中值等于t的长度的元素个数就是答案。&lt;/p&gt;

&lt;h3 id=&#34;应用4-可重叠最长重复子串&#34;&gt;应用4 可重叠最长重复子串&lt;/h3&gt;

&lt;p&gt;大意是给你一个字符串s，任意选取两个不同的起始位置i和j，这两个位置的后缀串有相同的前缀，这个前缀可以重叠，问这个相同的前缀的最大长度&lt;/p&gt;

&lt;p&gt;例如&lt;code&gt;eabcaefabcabc&lt;/code&gt;，最长重复子串是&lt;code&gt;abca&lt;/code&gt;，长度是4。&lt;/p&gt;

&lt;p&gt;KMP在生成的时候，总是以串的前缀作为匹配对象，我们要做的，就是遍历那个字符串的每一个后缀，都生成一次next数组，而在生成过程中出现的最大值就是答案，所以时间复杂度 $O(n^2)$ 。当然我们还有更好的算法，这个之后再讲。&lt;/p&gt;

&lt;h2 id=&#34;z-algorithm&#34;&gt;Z Algorithm&lt;/h2&gt;

&lt;p&gt;Z函数的定义是对于字符串s，生成数组z，定义&lt;code&gt;z[i]&lt;/code&gt;是&lt;code&gt;s.substr(i)&lt;/code&gt;与&lt;code&gt;s&lt;/code&gt;的最长相同前缀长度&lt;/p&gt;

&lt;p&gt;样例如下&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;扩展KMP需要依赖这个z数组，但是在介绍这个之前，我们先介绍下面的扩展KMP&lt;/p&gt;

&lt;h2 id=&#34;扩展kmp&#34;&gt;扩展KMP&lt;/h2&gt;

&lt;p&gt;所谓扩展KMP，即给定两个字符串s和p，需要求出数组&lt;code&gt;ext&lt;/code&gt;，其中&lt;code&gt;ext[i]&lt;/code&gt;的值表示&lt;code&gt;s.substr(i)&lt;/code&gt;与&lt;code&gt;p&lt;/code&gt;的最长相同前缀长度&lt;/p&gt;

&lt;p&gt;这个算法依赖 Z Algorithm 中生成的z数组。&lt;/p&gt;

&lt;p&gt;为了比较容易理解，我省略一堆说明，我们直接来模拟匹配过程，一边模拟一边解说，一开始数据如下，i是匹配位置指针&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上表，一开始，不匹配，不操作，移动p&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这时，p与&lt;code&gt;s[i]&lt;/code&gt;是匹配的，我们用e指针记录&lt;strong&gt;未能匹配&lt;/strong&gt;的位置，并写入&lt;code&gt;ext[i]=e-i&lt;/code&gt;得1&lt;/p&gt;

&lt;p&gt;继续移动p，并更新e，得到下表&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;得到上表这个后，令&lt;code&gt;ext[i]=e-i&lt;/code&gt;得5，这个时候，移动到下一个元素，但同时p暂时不动。这个情况出现于&lt;code&gt;p&amp;lt;e&lt;/code&gt;的时候，严格来说，应该是&lt;code&gt;z[i-p]+i &amp;lt; e&lt;/code&gt;的时候，具体原因后面解释。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上表这个时候，不看字符匹配的情况，只看i指针位置上那一列对应的Z数组的值，即&lt;code&gt;z[i-p]&lt;/code&gt;为0，如果这个数加上i小于e的话，直接令&lt;code&gt;ext[i]=z[i-p]&lt;/code&gt;得到0&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;继续以上操作，&lt;code&gt;ext[i]=z[i-p]&lt;/code&gt;得到1。之所以能这么操作，是因为p是自匹配的，在这个位置上的z值，就同时表达了i开始，字符串s与p连续多少个字符能匹配p的前缀，前提是这个串的范围必须在e的前面。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;继续以上操作，&lt;code&gt;ext[i]=z[i-p]&lt;/code&gt;得到0，注意到，下一步i将指向a，导致&lt;code&gt;z[i-p]+i &amp;gt;= e&lt;/code&gt;，这个会导致z数组的内容不能直接复制到ext数组内，所以我们要恢复之前的字符串匹配过程，令p等于i，得如下状态&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个时候，写入&lt;code&gt;ext[i]=e-i&lt;/code&gt;得1&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;\0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后一步，第一个也不匹配，写入&lt;code&gt;ext[i]=e-i&lt;/code&gt;得0，下一步i到达字符串末尾，结束。&lt;/p&gt;

&lt;p&gt;扩展kmp与经典kmp的算法的时间复杂度均为 $O(len(s)+len(p))$&lt;/p&gt;

&lt;p&gt;那么讲完了扩展KMP我们回来讲Z Algorithm，其实它们的区别，仅仅是计算对象的差异，即扩展KMP是通过字符串p求出s的ext数组，而Z Algorithm是通过自身来求，我们只需要把原来扩展KMP的代码复制一份改改名字，且起点改为1行了，详见下面模板实现代码。&lt;/p&gt;

&lt;p&gt;应用实例有：&lt;a href=&#34;http://acm.hdu.edu.cn/showproblem.php?pid=4333&#34; target=&#34;_blank&#34;&gt;hdu4333&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kmp模板&#34;&gt;KMP模板&lt;/h2&gt;

&lt;p&gt;以下是我写的模板代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void kmp_next(const char* pattern, int next[])
{
    int len = strlen(pattern);
    next[0] = -1;
    for (int i = 0, j = -1; i &amp;lt; len;)
    {
        if (j == -1 || pattern[i] == pattern[j])
            next[++i] = ++j;
        else
            j = next[j];
    }
}

const char* kmp_match(const char* str, const char* pattern, int next[])
{
    int len = strlen(pattern);
    int i = 0;
    kmp_next(pattern, next);
    while (*str &amp;amp;&amp;amp; i &amp;lt; len)
    {
        if (pattern[i] == *str)
        {
            ++i, ++str;
        }
        else
        {
            i = next[i];
            if (i == -1)
            {
                ++i, ++str;
            }
        }
    }
    return i == len ? str - i : str;
}

void extkmp_z(const char* str, int z[])
{
    int s_len = strlen(str);
    z[0] = s_len;
    for (int i = 1, p = 1, e = 1; i &amp;lt; s_len; ++i)
    {
        if (i + z[i - p] &amp;gt;= e)
        {
            e = std::max(i, e);
            p = i;

            while (e &amp;lt; s_len &amp;amp;&amp;amp; str[e] == str[e - i])
                ++e;

            z[i] = e - i;
        }
        else
            z[i] = z[i - p];
    }
}

void extkmp_ext(const char* str, int ext[], const char* pattern, int z[])
{
    int s_len = strlen(str);
    extkmp_z(pattern, z);
    for (int i = 0, p = 0, e = 0; i &amp;lt; s_len; ++i)
    {
        if (i + z[i - p] &amp;gt;= e)
        {
            e = std::max(i, e);
            p = i;

            while (e &amp;lt; s_len &amp;amp;&amp;amp; str[e] == pattern[e - i])
                ++e;

            ext[i] = e - i;
        }
        else
            ext[i] = z[i - p];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;最后总结&#34;&gt;最后总结&lt;/h2&gt;

&lt;p&gt;字符串就是一个深坑，不过KMP也许是打开你理解后缀树或后缀数组的好工具，为后者的学习做铺垫。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
