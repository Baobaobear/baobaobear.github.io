<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baobaobear</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Baobaobear</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 08 Oct 2019 13:15:36 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Baobaobear</title>
      <link>/</link>
    </image>
    
    <item>
      <title>选择和冒泡排序优化思路</title>
      <link>/post/20191008-sorting-1/</link>
      <pubDate>Tue, 08 Oct 2019 13:15:36 +0800</pubDate>
      <guid>/post/20191008-sorting-1/</guid>
      <description>&lt;p&gt;本篇针对两种最基本的排序（冒泡、选择）来讲优化思路。越是简单的东西反而可能存在你越想不到的优化点。但是在开始之前，先给不了解的人讲一个设计原则的问题，我们在设计排序接口的时候，最为常见的有&lt;br /&gt;
&lt;code&gt;void sort(type arr[], int len)&lt;/code&gt;&lt;br /&gt;
也许你也见过&lt;br /&gt;
&lt;code&gt;void sort(iter beg, iter end)&lt;/code&gt;&lt;br /&gt;
这时候问题就来了，很多人会错误地把end认为是最后一个元素，其实不然，这两接口可以相互转换，例如我们可以写 &lt;code&gt;sort(arr, arr + len)&lt;/code&gt; ，这样写很自然对不对，但如果你认为end是最后一个元素，那你就不得不改成 &lt;code&gt;sort(arr, arr + len - 1)&lt;/code&gt; 。事实上，这类的接口我们需要一个统一的原则，就是左闭右开区间原则，即beg就是首个元素，而end是最后一个元素+1，即end是作为结束标志，不应该把end算在范围内。接下来下面所有的接口写法，都是以&lt;br /&gt;
&lt;code&gt;void sort(iter beg, iter end)&lt;/code&gt;&lt;br /&gt;
这种方式写的，至于这样写有什么好处，接下来我们就看示例。&lt;/p&gt;

&lt;h2 id=&#34;选择排序&#34;&gt;选择排序&lt;/h2&gt;

&lt;h3 id=&#34;基本实现&#34;&gt;基本实现&lt;/h3&gt;

&lt;p&gt;我们先来看选择排序，因为它编写简单，而且最不容易出错，我们来看以下两种不同的接口写法，我们定义要排序的数据类型名字是&lt;code&gt;sort_element_t&lt;/code&gt;，定义交换函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void sort_element_swap(sort_element_t *x, sort_element_t *y)
{
    sort_element_t t = *x;
    *x = *y;
    *y = t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void select_sort(sort_element_t arr[], size_t len) //方式1
{
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        size_t head = i;
        for (size_t j = i + 1; j &amp;lt; len; ++j)
        {
            if (arr[j] &amp;lt; arr[head])
                head = j;
        }
        sort_element_swap(arr + i, arr + head);
    }
}

void select_sort(sort_element_t * beg, sort_element_t * end) //方式2
{
    for (; beg &amp;lt; end; ++beg)
    {
        sort_element_t* head = beg;
        for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; *head)
                head = i;
        }
        sort_element_swap(beg, head);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就这么一眼看过去，看起来还真差不多，这样，我们再细分一下，选择排序的中间那步，其实就是找一个最小的元素，我们单独提取成一个独立函数再来看看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//方式1
size_t find_min(sort_element_t arr[], size_t beg, size_t len)
{
    size_t head = beg;
    for (size_t j = beg + 1; j &amp;lt; len; ++j)
    {
        if (arr[j] &amp;lt; arr[head])
            head = j;
    }
    return head;
}

void select_sort(sort_element_t arr[], size_t len)
{
    for (size_t i = 0; i &amp;lt; len; ++i)
    {
        sort_element_swap(arr + i, arr + find_min(arr, i, len));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//方式2
sort_element_t* find_min(sort_element_t * beg, sort_element_t * end)
{
    sort_element_t* head = beg;
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        if (*i &amp;lt; *head)
            head = i;
    }
    return head;
}

void select_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; ++beg)
    {
        sort_element_swap(beg, find_min(beg, end));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仔细观察一下，是不是第二种写法函数参数统一，而且参数数量少，而且也少了很多不必要的加法运算（像方法一需要写&lt;code&gt;arr + i&lt;/code&gt;这类）。如果你说方法一的find_min参数也可以只写两个，写成&lt;code&gt;find_min(sort_element_t arr[], size_t len)&lt;/code&gt;，那么你在调用的地方将不得不写成&lt;code&gt;find_min(arr + i, len - i)&lt;/code&gt;，这种又加又减在遇到更复杂的情况的时候，更容易把你弄晕出Bug。总之结论是最好把参数写成两个指针（或两个迭代器）的形式，不建议使用数组加长度的形式，STL的接口也全使用迭代器的形式。&lt;/p&gt;

&lt;p&gt;对于这个排序要注意的一点是，有人会写成类似下面的形式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void select_sort(sort_element_t arr[], size_t len)
{
	for (size_t j = 0; j &amp;lt; len; ++j)
	{
		for (size_t i = j + 1; i &amp;lt; len; ++i)
		{
			if (arr[j] &amp;gt; arr[i])
			{
				sort_element_t t = arr[j];
				arr[j] = arr[i];
				arr[i] = t;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上这种叫做劣化版的选择排序，在大多数的情况下会比前一个方法慢，极端条件下甚至会慢1倍甚至更多&lt;/p&gt;

&lt;p&gt;那说完劣化再讲优化，选择排序的时间复杂度是O(n^2)，而且运行时间与原来的排列完全无关。以上的选择排序总是选择小的，那大小一起选呢？能不能起到优化的作用？如果你单纯的多写一个find_max变成双向选择来做，在VS2005下是没有优化效果的，我测试过了。那应该怎么样呢？确实还是双向选择，不过具体实现稍有点不同。&lt;/p&gt;

&lt;h3 id=&#34;优化1-双向选择&#34;&gt;优化1，双向选择&lt;/h3&gt;

&lt;p&gt;这里的实现是一个函数里同时把最大最小一起找，这样减少了一次遍历的过程，时间能减半之余，还有一个非常有用的优化，就是当你发现最大值等于最小值的时候能提前跳出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* find_min_max(
    sort_element_t * beg,
    sort_element_t * end,
    sort_element_t** head_max)
{
    sort_element_t* head = beg;
    *head_max = beg;
    for (sort_element_t* i = beg + 1; i &amp;lt; end; ++i)
    {
        if (*i &amp;lt; *head)
            head = i;
        else if (**head_max &amp;lt; *i)
            *head_max = i;
    }
    return head;
}

void double_select_sort(sort_element_t * beg, sort_element_t * end)
{
    while (end - beg &amp;gt; 1)
    {
        sort_element_t * head_max, * head = find_min_max(beg, end, &amp;amp;head_max);
        if (head_max != head)
        {
            if (head_max == beg)
                head_max = head;
            sort_element_swap(beg++, head);
            sort_element_swap(--end, head_max);
        }
        else
        {
            break;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与选择排序的运行时间比较如下，排序45000个int，编译环境是VS2015，用10组不同分布的数据，表格中的数字单位是毫秒，即排序用时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;834&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;981&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2213&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;合理运用双向，效果也往往不错，但是千万要注意，环境不同会导致测试结果不相同，例如你换到mingw上使用-O3编译那么将会是select比select2快，所以上面数据只供参考，具体结果请自己做测试。&lt;/p&gt;

&lt;h3 id=&#34;优化2-数据结构&#34;&gt;优化2，数据结构&lt;/h3&gt;

&lt;p&gt;选择排序的优化主要是在find_min上面，find_min的时间复杂度是O(n)，那如果我们通过一些数据结构的组织，例如二叉堆，那么找最大或最小值时间将变成O(1)，而维护这个数据结构的代价是O(logn)的话，总体时间复杂度将变为O(nlogn)，这比起选择排序的O(n^2)就是一个巨大的变化，具体内容在之后的 &lt;strong&gt;堆排序&lt;/strong&gt; 篇具体讲解。&lt;/p&gt;

&lt;h2 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h2&gt;

&lt;h3 id=&#34;基本实现-1&#34;&gt;基本实现&lt;/h3&gt;

&lt;p&gt;冒泡排序是我们课本必然介绍的一个排序，相对于选择排序，这种在编写的时候更容易出现逻辑错误，我们先来看典型的实现（双迭代器实现）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void bubble_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; --end)
    {
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
                sort_element_swap(i - 1, i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冒泡排序这种写法，铁定的O(n^2)时间没跑，不过好在冒泡排序的优化方法也不少。&lt;/p&gt;

&lt;h3 id=&#34;优化1-提前跳出&#34;&gt;优化1，提前跳出&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void bubble_sort(sort_element_t * beg, sort_element_t * end)
{
    for (; beg &amp;lt; end; --end)
    {
        int sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过sorted变量记录某一轮是不是存在交换，如果没有交换则表明数据已经是有序的，可以提前退出循环。有这个优化对于已经有序的数据，冒泡排序将运行得特别快，即最优情况时间复杂度只有O(n)&lt;/p&gt;

&lt;h3 id=&#34;优化2-鸡尾酒排序&#34;&gt;优化2，鸡尾酒排序&lt;/h3&gt;

&lt;p&gt;前面的冒泡写法是单向冒泡，把最大值向最右边移，这回我们做成双向，一边把最大值右移，一边把最小值左移，不过这种方法有另一个命名，叫做鸡尾酒排序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void cocktail_sort(sort_element_t * beg, sort_element_t * end)
{
    while (beg &amp;lt; end)
    {
        int sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
        --end;

        sorted = 1;
        for (sort_element_t * i = end - 1; i &amp;gt; beg; --i)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (sorted)
            break;
        ++beg;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那改成双向就真的有提升了吗？我们看实测，排序45000个int，用10组不同分布的数据，表格中的数字单位是毫秒，即排序用时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;761&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2329&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1459&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1052&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中第4组是乱序无重复数值的数据，最有代表性的一列。从中可以看到，cocktail比起bubble能节省30%的时间&lt;/p&gt;

&lt;p&gt;让我们再脑洞大开，除了可以双向，还有一种对CPU执行有利的优化方式&lt;/p&gt;

&lt;h3 id=&#34;优化3-奇偶排序&#34;&gt;优化3，奇偶排序&lt;/h3&gt;

&lt;p&gt;这种排序的排序方式见下表，假设有8个数，奇数轮比较(1,2), (3,4), (5,6), (7,8)，偶数轮比较(2,3), (4,5), (6,7)，如此循环，直到没有交换为止&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;轮次&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;具体实现代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void odd_even_sort(sort_element_t * beg, sort_element_t * end)
{
    int sorted = 0, last_sorted = 0;
    while (sorted == 0)
    {
        last_sorted = sorted;
        sorted = 1;
        for (sort_element_t * i = beg + 1; i &amp;lt; end; i += 2)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (last_sorted &amp;amp;&amp;amp; sorted)
            break;

        last_sorted = sorted;
        sorted = 1;
        for (sort_element_t * i = beg + 2; i &amp;lt; end; i += 2)
        {
            if (*i &amp;lt; i[-1])
            {
                sort_element_swap(i - 1, i);
                sorted = 0;
            }
        }
        if (last_sorted &amp;amp;&amp;amp; sorted)
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们再脑洞大开，除了比较方向，好像我们有一个条件没有考虑上，就是冒泡排序总是相邻元素的比较，那么如果不相邻地比较呢？&lt;/p&gt;

&lt;h3 id=&#34;优化4-梳排序&#34;&gt;优化4，梳排序&lt;/h3&gt;

&lt;p&gt;通过一开始设置较大的步长，让元素能较快移动，然后逐步减少步长，直到1变成普通的冒泡排序为止。这个方法的优点，就是快，相对前面的方法来说飞快&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void comb_sort(sort_element_t * beg, sort_element_t * end)
{
    const double shrink_factor = 0.8;
    ptrdiff_t gap = end - beg;
    int swapped = 0;
    while (gap &amp;gt; 1 || swapped)
    {
        if (gap &amp;gt; 1)
        {
            gap = (ptrdiff_t)(gap * shrink_factor);
            if (gap == 10 || gap == 9)
            {
                gap = 11;
            }
        }
        swapped = 0;
        for (sort_element_t * i = beg + gap; i &amp;lt; end; ++i)
        {
            if (*i &amp;lt; i[-gap])
            {
                sort_element_swap(i, i - gap);
                swapped = 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;完整测试&#34;&gt;完整测试&lt;/h2&gt;

&lt;p&gt;在完整测试里你会发现一些和你想象中完全不一样的情况，可不要以为你的“优化”一定就是优化&lt;/p&gt;

&lt;h3 id=&#34;vs2005下的运行时间比较-按avg平均值排序&#34;&gt;VS2005下的运行时间比较（按Avg平均值排序）&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;574&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1222&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;557&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;878&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;586&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;761&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;834&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;981&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2329&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1459&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1052&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2213&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2238&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果你只测试随机数据，那么排序应该是&lt;/p&gt;

&lt;p&gt;&lt;code&gt;combsort &amp;lt;&amp;lt; select2 &amp;lt; odd_even &amp;lt; cocktail &amp;lt; select &amp;lt; bubble&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;在mingw64-gcc8-下使用-o3-编译-最大优化-的运行时间比较&#34;&gt;在mingw64(gcc8)下使用&lt;code&gt;-O3&lt;/code&gt;编译（最大优化）的运行时间比较&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;434&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;503&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;493&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;564&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1311&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1264&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;562&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;882&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;580&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1610&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;669&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;837&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;755&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;837&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1112&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;974&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1247&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2312&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1455&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1063&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;你可以发现，找最小值过程在mingw64下被特别照顾了一下，结果它比其它的明显要快，你可以从中得知，如果你想在mingw下写出运行得快的双向选择排序，如果你的想法是再写一个&lt;code&gt;find_max&lt;/code&gt;函数，那对不起，这样是没有优化效果的。但这不是全部，还有让你更大跌眼镜的情况。&lt;/p&gt;

&lt;h3 id=&#34;在mingw64-gcc8-下使用-o1-编译-基本优化-的运行时间比较&#34;&gt;在mingw64(gcc8)下使用&lt;code&gt;-O1&lt;/code&gt;编译（基本优化）的运行时间比较&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Avg&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;combsort&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;263&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;375&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;531&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;270&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;odd_even&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;597&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1256&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1204&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;780&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;649&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cocktail&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1244&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1504&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1594&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1656&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1081&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;815&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;789&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bubble&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2091&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2115&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1247&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;949&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2231&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2229&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2232&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2230&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在双向选择不但最快，而且还比&lt;code&gt;-O3&lt;/code&gt;下的快得多。老实说，会造成这种奇怪的结果，&lt;code&gt;-O1&lt;/code&gt;比&lt;code&gt;-O3&lt;/code&gt;还快的原因还真不要问我，找开发gcc/mingw的开发者。&lt;/p&gt;

&lt;p&gt;最后还是忠告一句，千万不要在一个编译器某个编译参数上看到有优化效果，就以为是事实，优化的坑远比你想象的要来得深，并不是你以为优化了它就一定变快了，编译器和编译参数以及运行环境才是你的老大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick sort(快速排序)杂谈 1</title>
      <link>/post/20191007-qsort-talk-1/</link>
      <pubDate>Mon, 07 Oct 2019 14:18:22 +0800</pubDate>
      <guid>/post/20191007-qsort-talk-1/</guid>
      <description>&lt;p&gt;我们现在使用的排序，很大比例在使用quick sort，因为它是平均速度最快的排序，但与此同时它可能也是坑最深的排序，现在我们就来讨论讨论它，因为内容较多，我计划写多篇，本篇是第一篇。&lt;/p&gt;

&lt;h2 id=&#34;快排的思路&#34;&gt;快排的思路&lt;/h2&gt;

&lt;p&gt;我们先来介绍一下快排的思路。快排的思路其实很简单，在数组中选一个元素，我们就称呼这个元素为pivot，通过与这个元素的比较，把数组划分成不比pivot大的在一边，不比pivot小的在另一边，于是就分成了两个更小的数据，对它们分别再排序就行了。但是，这个描述特别的含糊，首先是怎么选中间元素，这里面有很多不同的做法。然后就是划分了，这个划分方法非常的多，水也特别深，这里主要介绍最为常见的划分方法。&lt;/p&gt;

&lt;h2 id=&#34;划分结果分类&#34;&gt;划分结果分类&lt;/h2&gt;

&lt;p&gt;首先，就是划分的结果，划分的结果有什么好讲的呢？其实算法的描述只说了划分成不比pivot大的在一边，不比pivot小的在另一边，并没有说等于的数怎么办。事实上，关键就在等于的数怎么处理，你既可以划在其中一边，也可以两边都有，也可以划成3分，中间那块就是等于pivot的，左边是小于等于，右边是大于等于，三种划分结果都是可以的。但是，不能容许的一种情况是划分后只有一块，例如你选的pivot正好是最小的数，于是划分后，整个数组就一块，全是大于等于pivot的，这样很可能导致无限递归，这次划分也白干了。&lt;/p&gt;

&lt;p&gt;所以很多人单凭算法思路来实现的时候，往往陷入栈溢出异常，其实就是划分结果上出了问题，并没有保证每次划分后，至少划分成两块。&lt;/p&gt;

&lt;h2 id=&#34;划分手段分类&#34;&gt;划分手段分类&lt;/h2&gt;

&lt;p&gt;划分手段的典型方法至少有5种，本篇介绍其中的4种&lt;/p&gt;

&lt;h3 id=&#34;1-lomuto-partition-scheme&#34;&gt;1. Lomuto partition scheme&lt;/h3&gt;

&lt;p&gt;首先我们来看以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t * partition(
    sort_element_t * beg,
    sort_element_t * end)
{
    sort_element_t pivot = *beg;
    sort_element_t * p = beg;
    for (sort_element_t * i = beg + 1; i &amp;lt; end; i++)
    {
        if (*i &amp;lt; pivot)
        {
            sort_element_swap(++p, i);
        }
    }
    sort_element_swap(p, beg);
    return p;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t * p = partition(beg, end);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种划分方法wiki上有描述，叫做 &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Lomuto partition scheme&lt;/code&gt;&lt;/a&gt; 它的思路挺好理解，首先p就是划分边界，一开始&lt;code&gt;p = left&lt;/code&gt;，遍历数组，发现比pivot小的，就交换到p的位置，并且p++，那么p左边的就全是比p要小的。而在最后面，把pivot交换到p的位置，所以这个方法期望把数组划分成三块，小于pivot的，等于pivot的，大于等于pivot的，而且能保证至少划分出两块（中间那块等于pivot的一定存在，不过只有一个元素）。这个方法的优点是可以通过简单的修改就变成3路划分（小于、等于、大于三块），缺点是它这种划分方法速度最慢，交换次数较多。&lt;/p&gt;

&lt;h3 id=&#34;2-不知名字的方法&#34;&gt;2. 不知名字的方法&lt;/h3&gt;

&lt;p&gt;这种方法来源不明，如果你知道请告诉我，在我看来有点像 Hoare partition scheme 的变种，来看代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* partition(
    sort_element_t * first,
    sort_element_t * last)
{
    sort_element_t pivot = *first;
    while (first &amp;lt; last)
    {
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;lt; *last)
            last--;
        *first = *last;
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;gt;= *first)
            first++;
        *last = *first;
    }
    *first = pivot;
    return first;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t* p = partition(beg, end - 1);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法通过在右边寻找应该放在左边的元素，与pivot交换，然后在左边寻找应该放在右边的元素，再次与pivot交换，这样pivot通过多数交换换到划分位置上。不过上面代码做了一个简单优化，通过赋值而不是直接交换以减少赋值的次数，这种方法在网上非常常见。&lt;/p&gt;

&lt;h3 id=&#34;3-hoare-partition-scheme&#34;&gt;3. Hoare partition scheme&lt;/h3&gt;

&lt;p&gt;后来有个叫做 C.A.R. Hoare 的人发明了这种划分方法，见代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;sort_element_t* partition(
    sort_element_t * first,
    sort_element_t * last)
{
    sort_element_t * begin = first;
    sort_element_t pivot = *first;
    while (first &amp;lt; last)
    {
        while (first &amp;lt; last &amp;amp;&amp;amp; *last &amp;gt;= pivot)
            --last;
        while (first &amp;lt; last &amp;amp;&amp;amp; pivot &amp;gt;= *first)
            ++first;
        if (first &amp;lt; last)
            sort_element_swap(first, last);
    }
    sort_element_swap(first, begin);
    return first;
}

void quick_sort_recursive(
    sort_element_t * beg,
    sort_element_t * end)
{
    if (end - beg &amp;gt; 1)
    {
        sort_element_t* p = partition(beg, end - 1);
        quick_sort_recursive(beg, p);
        quick_sort_recursive(p + 1, end);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意的是，这个写法和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&#34; target=&#34;_blank&#34;&gt;wiki&lt;/a&gt; 上的略有差别。这个方法与前一个的不同点是，通过在左边寻找应该放在右边的元素，而在右边寻找应该放在左边的元素，然后交换。这个方法是以上三种里面速度最快的，但与此同时是坑最多的。例如，原描述是左边找小于，右边找大于的交换，而上面代码的实现是左边找小于等于，右边找大于等于；原描述是先找左边再找右边，上面实现是先找右边再找左边。也就是说，取不取等于号有4种组合，再乘以先左或先右两种，共8种组合，这8种有一些要求pivot取最左边，有一些要求pivot取最右边，有些左右都行，有些pivot任意位置都行。所以当你写这种划分方法的时候，看起来没什么区别的代码，偏偏出现栈溢出各种问题，其实就隐藏在这些细节上。如果你想练习调试的本领，就把这8种组合的划分全写出来，你肯定收获不少。至于哪种组合最佳，我不知道，但我知道最差的组合，就是两边都取等于号的那两种。&lt;/p&gt;

&lt;p&gt;这个写法还有一个四路划分的变种，即先划分成以下这样&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;划分好后再把两端的相等元素交换到中间得到&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;这里不具体展开，有兴趣可以自行实现&lt;/p&gt;

&lt;h3 id=&#34;4-vs-partition-scheme&#34;&gt;4. VS partition scheme&lt;/h3&gt;

&lt;p&gt;之所以这么叫是因为我目前只看到在Visual Studio系列STL的&lt;code&gt;std::sort&lt;/code&gt;是这么写的，这个写成代码有点长，但思路和上面说的四路划分有点类似，这里简单讲讲它的思路。首先pivot选择在中间，形成这样的状态&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;&lt;/td&gt;
        &lt;td&gt;?&lt;/td&gt;
        &lt;td&gt;=&lt;/td&gt;
        &lt;td&gt;?&lt;/td&gt;
        &lt;td&gt;&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;找到等于的元素就交换到等于那块的旁边扩大它就行了，核心思想就这样，还有很多其它的细节，这里不展开。这种方法网上几乎没有人这么写，因为写起来确实挺麻烦的。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本篇先介绍到这里，大家写快排练习建议使用 &lt;code&gt;Hoare partition scheme&lt;/code&gt; ，如果你觉得你的能力更好，那你可以写 &lt;code&gt;VS partition scheme&lt;/code&gt; 自己琢磨一下细节问题，相信你是能写出来的。那么下一篇会介绍优化的部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mingw 的 Bug</title>
      <link>/post/20191006-mingw-bug/</link>
      <pubDate>Sun, 06 Oct 2019 13:04:08 +0800</pubDate>
      <guid>/post/20191006-mingw-bug/</guid>
      <description>&lt;p&gt;这个问题最早的时候是今年8月，我在测试排序算法的速度，发现mingw上总有点不一样，而linux下的gcc是正常的，也在群里问过人，没人明白到底怎么回事，先描述一下当时遇到的情况。&lt;/p&gt;

&lt;p&gt;一开始我使用&lt;code&gt;std::random_shuffle&lt;/code&gt;打乱数组并用&lt;code&gt;std::sort&lt;/code&gt;排序，在VS上并没有发现什么问题，gcc也正常。但在mingw上，这样打乱的数组排序所花的时间，比起其它打乱方式的，例如直接赋值一个随机数的方式，要明显慢了近1倍，这个诡异的问题一直没想通是为啥。当时觉得可能是&lt;code&gt;std::sort&lt;/code&gt;对这种方式打乱的数据排序有点问题导致变慢。&lt;/p&gt;

&lt;p&gt;后来，为了和std函数脱钩，我自己重新写了随机数函数和random_shuffle函数，结果发现我的random_shuffle函数打乱的结果，&lt;code&gt;std::sort&lt;/code&gt;的时间是完全正常的，非得&lt;code&gt;std::random_shuffle&lt;/code&gt;才会出现两倍的情况，一时间我还以为是我写的有问题，还更换了不同随机函数，怎么也发现不了原因，终于把怀疑转向&lt;code&gt;std::random_shuffle&lt;/code&gt;，我就对这个函数的执行结果输出到文件，这一输出立即把我搞懵了，输出的结果分布特别有规律，初值我用的是&lt;code&gt;arr[i] = i&lt;/code&gt;，打乱后结果前32768个数都是数组里最大的数值，一时没明白怎么回事，难道它的实现很不寻常吗？我就去翻了一下源代码，在&lt;a href=&#34;https://en.cppreference.com/w/cpp/algorithm/random_shuffle&#34; target=&#34;_blank&#34;&gt;cppreference&lt;/a&gt;下源代码长下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template&amp;lt; class RandomIt &amp;gt;
void random_shuffle( RandomIt first, RandomIt last )
{
    typename std::iterator_traits&amp;lt;RandomIt&amp;gt;::difference_type i, n;
    n = last - first;
    for (i = n-1; i &amp;gt; 0; --i) {
        using std::swap;
        swap(first[i], first[std::rand() % (i+1)]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码我看着就不对，这个是生成不了我的执行结果的，于是又找到了下面这个：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;template &amp;lt;class RandomAccessIterator&amp;gt;
inline void random_shuffle(RandomAccessIterator first,
                           RandomAccessIterator last) {
  __random_shuffle(first, last, distance_type(first));
}
 
 
template &amp;lt;class RandomAccessIterator, class RandomNumberGenerator&amp;gt;
void random_shuffle(RandomAccessIterator first, RandomAccessIterator last,
                    RandomNumberGenerator&amp;amp; rand) {
  if (first == last) return;
  for (RandomAccessIterator i = first + 1; i != last; ++i)
    iter_swap(i, first + rand((i - first) + 1));
}
 
 
template &amp;lt;class RandomAccessIterator, class Distance&amp;gt;
void __random_shuffle(RandomAccessIterator first, RandomAccessIterator last,
                      Distance*) {
  if (first == last) return;
  for (RandomAccessIterator i = first + 1; i != last; ++i) 
#ifdef __STL_NO_DRAND48
    iter_swap(i, first + Distance(rand() % ((i - first) + 1)));
#else
  iter_swap(i, first + Distance(lrand48() % ((i - first) + 1)));
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看了这个代码，我瞬间明白这到底是怎么回事了，你能从中发现些什么吗？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我发现的是，前面的代码用的是rand，而之前我发现的，是数组里前32768个数都特别大，我的直觉是这个rand函数最大值就是32767从而导致以上问题，结果一查，还真的只有mingw的rand函数的最大值这么小，也就是说如果你希望代码跨平台，使用&lt;code&gt;std::random_shuffle&lt;/code&gt;要慎重，当然最好是减少依赖。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客第一文，附hugo表格的坑</title>
      <link>/post/20191005-first-post/</link>
      <pubDate>Sat, 05 Oct 2019 23:12:10 +0800</pubDate>
      <guid>/post/20191005-first-post/</guid>
      <description>&lt;p&gt;第一次使用这个hugo就遇到一堆坑，主题并不是随便用，会有SHA-256校验，而在windows平台下用git，clone下来会把&lt;code&gt;\n&lt;/code&gt;自动换成&lt;code&gt;\r\n&lt;/code&gt;从而导致主题应用失败，服了。&lt;/p&gt;

&lt;p&gt;另一个坑就是hugo的表格，你不能像以下这么写&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a|b|c
-|-|-
1|2|3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样hugo的引擎是不认为这是表格，正确的做法是改成下面这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a  | b | c
---|---|---
1  | 2 | 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示结果就是这样&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;区别是什么呢？在表格的第二行是&lt;code&gt;---|---|---&lt;/code&gt;，这一行是用来描述对齐方式的，不过hugo的引擎要求每列至少3个字符，所以刚好3个字符时只能是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
:--
--:
:-:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中四选一，任何一个只剩下两个字符就不算是表格。&lt;/p&gt;

&lt;p&gt;本博客计划是发布我的研究成果，当然主要是算法方面，而且主要是网上不会轻易搜索到的东西。&lt;/p&gt;

&lt;p&gt;更多的东西可以关注我的 Github &lt;a href=&#34;https://github.com/Baobaobear&#34; target=&#34;_blank&#34;&gt;账号&lt;/a&gt;。&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define _CRT_SECURE_NO_WARNINGS
#include &amp;lt;stdio.h&amp;gt;
 
int g_eof;
int get_lv(char c) {
	return !(c == &#39;+&#39; || c == &#39;-&#39;);
}
 
double get_val(double v[], char op) {
	if (op == &#39;+&#39;) return v[0] + v[1];
	if (op == &#39;-&#39;) return v[0] - v[1];
	if (op == &#39;*&#39;) return v[0] * v[1];
	if (op == &#39;/&#39;) return v[0] / v[1];
	return v[0];
}
 
double calc(char* op, int level, double val, char o, int i) {
	char c[2] = { o };
	double v[2] = { val };
	if ((g_eof = scanf(&amp;quot;%lf&amp;quot;, &amp;amp;v[i])) != EOF)
		scanf(&amp;quot;%c&amp;quot;, &amp;amp;c[i]);
	if (c[i] == &#39;(&#39;) {
		v[i] = calc(&amp;amp;c[i], 0, 0, 0, 0);
		scanf(&amp;quot;%c&amp;quot;, &amp;amp;c[i]);
	}
	if (i &amp;gt; 0) {
		if (!(c[i] == &#39;\n&#39; || c[i] == &#39;)&#39;
			|| get_lv(c[0]) &amp;gt;= get_lv(c[1])))
			v[i] = calc(&amp;amp;c[1], get_lv(c[1]), v[1], c[1], get_lv(c[1]) &amp;gt; 0);
		v[0] = get_val(v, c[0]);
		c[0] = c[1];
	}
	if (c[0] == &#39;\n&#39; || c[0] == &#39;)&#39; || get_lv(c[0]) &amp;lt; level) {
		*op = c[0];
		return v[0];
	}
	return calc(op, level, v[0], c[0], 1);
}
 
int main(void) {
	char op;
	while (g_eof != EOF)
		printf(&amp;quot;= %.15g\n&amp;quot;, calc(&amp;amp;op, 0, 0, &#39;\n&#39;, 0));
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
